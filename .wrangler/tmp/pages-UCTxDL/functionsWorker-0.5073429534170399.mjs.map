{
  "version": 3,
  "sources": ["../../../functions/lib/settings-storage.ts", "../../../functions/lib/translation-service.ts", "../../../functions/api/admin/announcement-badges/translate.ts", "../../../functions/api/invoices/admin/list.ts", "../../../functions/api/admin/announcement-badges/%5Bid%5D.ts", "../../../functions/api/admin/countdown-banners/%5Bid%5D.ts", "../../../functions/api/admin/dashboard-features/%5Bfeature%5D.ts", "../../../functions/api/admin/orders/%5BorderId%5D.ts", "../../../functions/api/extension/check/%5Bid%5D.ts", "../../../functions/api/extension/downloads/%5Bid%5D.ts", "../../../functions/api/invoices/%5Bid%5D/download.ts", "../../../functions/api/invoices/%5Bid%5D/download-receipt.ts", "../../../functions/api/invoices/%5Bid%5D/html.ts", "../../../functions/api/invoices/%5Bid%5D/receipt.ts", "../../../functions/lib/db.ts", "../../../functions/api/tickets/%5Bid%5D/archive.ts", "../../../node_modules/bcryptjs/index.js", "../../../functions/lib/user-storage.ts", "../../../functions/api/tickets/%5Bid%5D/messages.ts", "../../../functions/api/tickets/%5Bid%5D/status.ts", "../../../functions/api/user/%5Bid%5D/purchase-status.ts", "../../../functions/api/user/%5BuserId%5D/invoices.ts", "../../../functions/api/user/%5BuserId%5D/orders.ts", "../../../functions/api/user/%5BuserId%5D/purchase-status.ts", "../../../functions/api/admin/analytics.ts", "../../../functions/api/admin/announcement-badges.ts", "../../../functions/api/admin/auth-settings.ts", "../../../functions/api/admin/chat-settings.ts", "../../../functions/api/admin/check-user-data.ts", "../../../functions/api/admin/countdown-banners.ts", "../../../functions/api/admin/create-default-banner.ts", "../../../functions/api/admin/customers.ts", "../../../functions/api/admin/dashboard-features.ts", "../../../functions/api/admin/fix-banner-price.ts", "../../../functions/api/admin/fix-existing-purchases.ts", "../../../functions/api/admin/fix-premium-users.ts", "../../../functions/api/admin/fix-purchased-users.ts", "../../../functions/api/admin/force-update-price.ts", "../../../functions/api/admin/invoices.ts", "../../../functions/api/admin/login.ts", "../../../functions/api/admin/orders.ts", "../../../functions/api/admin/payment-settings.ts", "../../../functions/api/admin/pricing.ts", "../../../functions/api/admin/reset-db.ts", "../../../functions/api/admin/seo-settings.ts", "../../../functions/api/admin/stats.ts", "../../../functions/api/admin/sync-banner-price.ts", "../../../functions/api/admin/tickets.ts", "../../../functions/api/admin/update-banner-price.ts", "../../../functions/api/admin/update-banner-price-direct.ts", "../../../functions/api/admin/update-premium-status.ts", "../../../functions/api/admin/update-user-premium.ts", "../../../functions/api/admin/users.ts", "../../../functions/api/announcement-badge/active.ts", "../../../functions/api/auth/facebook.ts", "../../../functions/api/auth/github.ts", "../../../functions/api/auth/google.ts", "../../../functions/api/auth/register.ts", "../../../functions/api/countdown-banner/active.ts", "../../../functions/api/customer/login.ts", "../../../functions/api/customer/profile.ts", "../../../functions/api/customer/register.ts", "../../../functions/api/customer/stats.ts", "../../../functions/api/download-extension/premium.ts", "../../../functions/api/download-extension/trial.ts", "../../../functions/api/downloads/premium-extension.ts", "../../../functions/api/invoices/customer.ts", "../../../functions/api/invoices/generate.ts", "../../../functions/api/me/invoices.ts", "../../../functions/api/me/orders.ts", "../../../functions/api/orders/complete-purchase.ts", "../../../node_modules/src/entity.ts", "../../../node_modules/src/column.ts", "../../../node_modules/src/column-builder.ts", "../../../node_modules/src/table.utils.ts", "../../../node_modules/src/pg-core/foreign-keys.ts", "../../../node_modules/src/tracing-utils.ts", "../../../node_modules/src/pg-core/unique-constraint.ts", "../../../node_modules/src/pg-core/utils/array.ts", "../../../node_modules/src/pg-core/columns/common.ts", "../../../node_modules/src/pg-core/columns/enum.ts", "../../../node_modules/src/subquery.ts", "../../../node_modules/drizzle-orm/version.js", "../../../node_modules/src/tracing.ts", "../../../node_modules/src/view-common.ts", "../../../node_modules/src/table.ts", "../../../node_modules/src/sql/sql.ts", "../../../node_modules/src/alias.ts", "../../../node_modules/src/sqlite-core/alias.ts", "../../../node_modules/src/sqlite-core/checks.ts", "../../../node_modules/src/utils.ts", "../../../node_modules/src/sqlite-core/foreign-keys.ts", "../../../node_modules/src/sqlite-core/unique-constraint.ts", "../../../node_modules/src/sqlite-core/columns/common.ts", "../../../node_modules/src/sqlite-core/columns/blob.ts", "../../../node_modules/src/sqlite-core/columns/custom.ts", "../../../node_modules/src/sqlite-core/columns/integer.ts", "../../../node_modules/src/sqlite-core/columns/numeric.ts", "../../../node_modules/src/sqlite-core/columns/real.ts", "../../../node_modules/src/sqlite-core/columns/text.ts", "../../../node_modules/src/sqlite-core/columns/index.ts", "../../../node_modules/src/selection-proxy.ts", "../../../node_modules/src/query-promise.ts", "../../../node_modules/src/sqlite-core/columns/all.ts", "../../../node_modules/src/sqlite-core/table.ts", "../../../node_modules/src/sqlite-core/query-builders/delete.ts", "../../../node_modules/src/casing.ts", "../../../node_modules/src/errors.ts", "../../../node_modules/src/pg-core/table.ts", "../../../node_modules/src/pg-core/primary-keys.ts", "../../../node_modules/src/sql/expressions/conditions.ts", "../../../node_modules/src/sql/expressions/select.ts", "../../../node_modules/src/sql/expressions/index.ts", "../../../node_modules/src/relations.ts", "../../../node_modules/src/sql/functions/aggregate.ts", "../../../node_modules/src/sql/functions/vector.ts", "../../../node_modules/src/sql/functions/index.ts", "../../../node_modules/src/sql/index.ts", "../../../node_modules/src/sqlite-core/view-base.ts", "../../../node_modules/src/sqlite-core/dialect.ts", "../../../node_modules/src/query-builders/query-builder.ts", "../../../node_modules/src/sqlite-core/query-builders/select.ts", "../../../node_modules/src/sqlite-core/query-builders/query-builder.ts", "../../../node_modules/src/sqlite-core/query-builders/insert.ts", "../../../node_modules/drizzle-orm/sqlite-core/query-builders/select.types.js", "../../../node_modules/src/sqlite-core/query-builders/update.ts", "../../../node_modules/src/sqlite-core/query-builders/index.ts", "../../../node_modules/src/sqlite-core/query-builders/count.ts", "../../../node_modules/src/sqlite-core/query-builders/query.ts", "../../../node_modules/src/sqlite-core/query-builders/raw.ts", "../../../node_modules/src/sqlite-core/db.ts", "../../../node_modules/src/sqlite-core/indexes.ts", "../../../node_modules/src/sqlite-core/primary-keys.ts", "../../../node_modules/src/sqlite-core/session.ts", "../../../node_modules/drizzle-orm/sqlite-core/subquery.js", "../../../node_modules/src/sqlite-core/utils.ts", "../../../node_modules/src/sqlite-core/view.ts", "../../../node_modules/src/sqlite-core/index.ts", "../../../node_modules/src/expressions.ts", "../../../node_modules/src/logger.ts", "../../../node_modules/drizzle-orm/operations.js", "../../../node_modules/src/index.ts", "../../../node_modules/zod/lib/index.mjs", "../../../node_modules/src/constants.ts", "../../../node_modules/src/utils.ts", "../../../node_modules/src/column.ts", "../../../node_modules/src/schema.ts", "../../../shared/schema.ts", "../../../server/storage.ts", "../../../node_modules/src/d1/session.ts", "../../../node_modules/src/d1/driver.ts", "../../../node_modules/src/d1/index.ts", "../../../functions/api/orders/user-orders.ts", "../../../functions/api/products/pricing.ts", "../../../functions/api/download-extension/%5Btype%5D.ts", "../../../functions/api/generate-invoice/%5BorderId%5D.ts", "../../../functions/api/tickets/%5Bid%5D.ts", "../../../functions/api/auth-settings.ts", "../../../functions/api/chat.ts", "../../../functions/api/complete-stripe-payment.ts", "../../../functions/api/create-user-payment-intent.ts", "../../../functions/api/download-premium.ts", "../../../functions/api/init-db.ts", "../../../functions/api/invoice-settings.ts", "../../../functions/api/invoices.ts", "../../../functions/api/me.ts", "../../../functions/api/migrate-db.ts", "../../../functions/api/purchase-complete.ts", "../../../node_modules/es-object-atoms/index.js", "../../../node_modules/es-errors/index.js", "../../../node_modules/es-errors/eval.js", "../../../node_modules/es-errors/range.js", "../../../node_modules/es-errors/ref.js", "../../../node_modules/es-errors/syntax.js", "../../../node_modules/es-errors/type.js", "../../../node_modules/es-errors/uri.js", "../../../node_modules/math-intrinsics/abs.js", "../../../node_modules/math-intrinsics/floor.js", "../../../node_modules/math-intrinsics/max.js", "../../../node_modules/math-intrinsics/min.js", "../../../node_modules/math-intrinsics/pow.js", "../../../node_modules/math-intrinsics/round.js", "../../../node_modules/math-intrinsics/isNaN.js", "../../../node_modules/math-intrinsics/sign.js", "../../../node_modules/gopd/gOPD.js", "../../../node_modules/gopd/index.js", "../../../node_modules/es-define-property/index.js", "../../../node_modules/has-symbols/shams.js", "../../../node_modules/has-symbols/index.js", "../../../node_modules/get-proto/Reflect.getPrototypeOf.js", "../../../node_modules/get-proto/Object.getPrototypeOf.js", "../../../node_modules/function-bind/implementation.js", "../../../node_modules/function-bind/index.js", "../../../node_modules/call-bind-apply-helpers/functionCall.js", "../../../node_modules/call-bind-apply-helpers/functionApply.js", "../../../node_modules/call-bind-apply-helpers/reflectApply.js", "../../../node_modules/call-bind-apply-helpers/actualApply.js", "../../../node_modules/call-bind-apply-helpers/index.js", "../../../node_modules/dunder-proto/get.js", "../../../node_modules/get-proto/index.js", "../../../node_modules/hasown/index.js", "../../../node_modules/get-intrinsic/index.js", "../../../node_modules/define-data-property/index.js", "../../../node_modules/has-property-descriptors/index.js", "../../../node_modules/set-function-length/index.js", "../../../node_modules/call-bind/index.js", "../../../node_modules/call-bind/callBound.js", "../../../node_modules/object-inspect/index.js", "../../../node_modules/side-channel/index.js", "../../../node_modules/qs/lib/formats.js", "../../../node_modules/qs/lib/utils.js", "../../../node_modules/qs/lib/stringify.js", "../../../node_modules/qs/lib/parse.js", "../../../node_modules/qs/lib/index.js", "../../../node_modules/stripe/esm/utils.js", "../../../node_modules/stripe/esm/net/HttpClient.js", "../../../node_modules/stripe/esm/net/FetchHttpClient.js", "../../../node_modules/stripe/esm/crypto/CryptoProvider.js", "../../../node_modules/stripe/esm/crypto/SubtleCryptoProvider.js", "../../../node_modules/stripe/esm/platform/PlatformFunctions.js", "../../../node_modules/stripe/esm/StripeEmitter.js", "../../../node_modules/stripe/esm/platform/WebPlatformFunctions.js", "../../../node_modules/stripe/esm/Error.js", "../../../node_modules/stripe/esm/RequestSender.js", "../../../node_modules/stripe/esm/autoPagination.js", "../../../node_modules/stripe/esm/StripeMethod.js", "../../../node_modules/stripe/esm/StripeResource.js", "../../../node_modules/stripe/esm/Webhooks.js", "../../../node_modules/stripe/esm/apiVersion.js", "../../../node_modules/stripe/esm/ResourceNamespace.js", "../../../node_modules/stripe/esm/resources/FinancialConnections/Accounts.js", "../../../node_modules/stripe/esm/resources/Entitlements/ActiveEntitlements.js", "../../../node_modules/stripe/esm/resources/Billing/Alerts.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Issuing/Authorizations.js", "../../../node_modules/stripe/esm/resources/Issuing/Authorizations.js", "../../../node_modules/stripe/esm/resources/Tax/Calculations.js", "../../../node_modules/stripe/esm/resources/Issuing/Cardholders.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Issuing/Cards.js", "../../../node_modules/stripe/esm/resources/Issuing/Cards.js", "../../../node_modules/stripe/esm/resources/BillingPortal/Configurations.js", "../../../node_modules/stripe/esm/resources/Terminal/Configurations.js", "../../../node_modules/stripe/esm/resources/TestHelpers/ConfirmationTokens.js", "../../../node_modules/stripe/esm/resources/Terminal/ConnectionTokens.js", "../../../node_modules/stripe/esm/resources/Billing/CreditBalanceSummary.js", "../../../node_modules/stripe/esm/resources/Billing/CreditBalanceTransactions.js", "../../../node_modules/stripe/esm/resources/Billing/CreditGrants.js", "../../../node_modules/stripe/esm/resources/Treasury/CreditReversals.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Customers.js", "../../../node_modules/stripe/esm/resources/Treasury/DebitReversals.js", "../../../node_modules/stripe/esm/resources/Issuing/Disputes.js", "../../../node_modules/stripe/esm/resources/Radar/EarlyFraudWarnings.js", "../../../node_modules/stripe/esm/resources/V2/Core/EventDestinations.js", "../../../node_modules/stripe/esm/resources/V2/Core/Events.js", "../../../node_modules/stripe/esm/resources/Entitlements/Features.js", "../../../node_modules/stripe/esm/resources/Treasury/FinancialAccounts.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Treasury/InboundTransfers.js", "../../../node_modules/stripe/esm/resources/Treasury/InboundTransfers.js", "../../../node_modules/stripe/esm/resources/Terminal/Locations.js", "../../../node_modules/stripe/esm/resources/Billing/MeterEventAdjustments.js", "../../../node_modules/stripe/esm/resources/V2/Billing/MeterEventAdjustments.js", "../../../node_modules/stripe/esm/resources/V2/Billing/MeterEventSession.js", "../../../node_modules/stripe/esm/resources/V2/Billing/MeterEventStream.js", "../../../node_modules/stripe/esm/resources/Billing/MeterEvents.js", "../../../node_modules/stripe/esm/resources/V2/Billing/MeterEvents.js", "../../../node_modules/stripe/esm/resources/Billing/Meters.js", "../../../node_modules/stripe/esm/resources/Climate/Orders.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Treasury/OutboundPayments.js", "../../../node_modules/stripe/esm/resources/Treasury/OutboundPayments.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Treasury/OutboundTransfers.js", "../../../node_modules/stripe/esm/resources/Treasury/OutboundTransfers.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Issuing/PersonalizationDesigns.js", "../../../node_modules/stripe/esm/resources/Issuing/PersonalizationDesigns.js", "../../../node_modules/stripe/esm/resources/Issuing/PhysicalBundles.js", "../../../node_modules/stripe/esm/resources/Climate/Products.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Terminal/Readers.js", "../../../node_modules/stripe/esm/resources/Terminal/Readers.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Treasury/ReceivedCredits.js", "../../../node_modules/stripe/esm/resources/Treasury/ReceivedCredits.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Treasury/ReceivedDebits.js", "../../../node_modules/stripe/esm/resources/Treasury/ReceivedDebits.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Refunds.js", "../../../node_modules/stripe/esm/resources/Tax/Registrations.js", "../../../node_modules/stripe/esm/resources/Reporting/ReportRuns.js", "../../../node_modules/stripe/esm/resources/Reporting/ReportTypes.js", "../../../node_modules/stripe/esm/resources/Forwarding/Requests.js", "../../../node_modules/stripe/esm/resources/Sigma/ScheduledQueryRuns.js", "../../../node_modules/stripe/esm/resources/Apps/Secrets.js", "../../../node_modules/stripe/esm/resources/BillingPortal/Sessions.js", "../../../node_modules/stripe/esm/resources/Checkout/Sessions.js", "../../../node_modules/stripe/esm/resources/FinancialConnections/Sessions.js", "../../../node_modules/stripe/esm/resources/Tax/Settings.js", "../../../node_modules/stripe/esm/resources/Climate/Suppliers.js", "../../../node_modules/stripe/esm/resources/TestHelpers/TestClocks.js", "../../../node_modules/stripe/esm/resources/Issuing/Tokens.js", "../../../node_modules/stripe/esm/resources/Treasury/TransactionEntries.js", "../../../node_modules/stripe/esm/resources/TestHelpers/Issuing/Transactions.js", "../../../node_modules/stripe/esm/resources/FinancialConnections/Transactions.js", "../../../node_modules/stripe/esm/resources/Issuing/Transactions.js", "../../../node_modules/stripe/esm/resources/Tax/Transactions.js", "../../../node_modules/stripe/esm/resources/Treasury/Transactions.js", "../../../node_modules/stripe/esm/resources/Radar/ValueListItems.js", "../../../node_modules/stripe/esm/resources/Radar/ValueLists.js", "../../../node_modules/stripe/esm/resources/Identity/VerificationReports.js", "../../../node_modules/stripe/esm/resources/Identity/VerificationSessions.js", "../../../node_modules/stripe/esm/resources/Accounts.js", "../../../node_modules/stripe/esm/resources/AccountLinks.js", "../../../node_modules/stripe/esm/resources/AccountSessions.js", "../../../node_modules/stripe/esm/resources/ApplePayDomains.js", "../../../node_modules/stripe/esm/resources/ApplicationFees.js", "../../../node_modules/stripe/esm/resources/Balance.js", "../../../node_modules/stripe/esm/resources/BalanceTransactions.js", "../../../node_modules/stripe/esm/resources/Charges.js", "../../../node_modules/stripe/esm/resources/ConfirmationTokens.js", "../../../node_modules/stripe/esm/resources/CountrySpecs.js", "../../../node_modules/stripe/esm/resources/Coupons.js", "../../../node_modules/stripe/esm/resources/CreditNotes.js", "../../../node_modules/stripe/esm/resources/CustomerSessions.js", "../../../node_modules/stripe/esm/resources/Customers.js", "../../../node_modules/stripe/esm/resources/Disputes.js", "../../../node_modules/stripe/esm/resources/EphemeralKeys.js", "../../../node_modules/stripe/esm/resources/Events.js", "../../../node_modules/stripe/esm/resources/ExchangeRates.js", "../../../node_modules/stripe/esm/resources/FileLinks.js", "../../../node_modules/stripe/esm/multipart.js", "../../../node_modules/stripe/esm/resources/Files.js", "../../../node_modules/stripe/esm/resources/InvoiceItems.js", "../../../node_modules/stripe/esm/resources/InvoicePayments.js", "../../../node_modules/stripe/esm/resources/InvoiceRenderingTemplates.js", "../../../node_modules/stripe/esm/resources/Invoices.js", "../../../node_modules/stripe/esm/resources/Mandates.js", "../../../node_modules/stripe/esm/resources/OAuth.js", "../../../node_modules/stripe/esm/resources/PaymentIntents.js", "../../../node_modules/stripe/esm/resources/PaymentLinks.js", "../../../node_modules/stripe/esm/resources/PaymentMethodConfigurations.js", "../../../node_modules/stripe/esm/resources/PaymentMethodDomains.js", "../../../node_modules/stripe/esm/resources/PaymentMethods.js", "../../../node_modules/stripe/esm/resources/Payouts.js", "../../../node_modules/stripe/esm/resources/Plans.js", "../../../node_modules/stripe/esm/resources/Prices.js", "../../../node_modules/stripe/esm/resources/Products.js", "../../../node_modules/stripe/esm/resources/PromotionCodes.js", "../../../node_modules/stripe/esm/resources/Quotes.js", "../../../node_modules/stripe/esm/resources/Refunds.js", "../../../node_modules/stripe/esm/resources/Reviews.js", "../../../node_modules/stripe/esm/resources/SetupAttempts.js", "../../../node_modules/stripe/esm/resources/SetupIntents.js", "../../../node_modules/stripe/esm/resources/ShippingRates.js", "../../../node_modules/stripe/esm/resources/Sources.js", "../../../node_modules/stripe/esm/resources/SubscriptionItems.js", "../../../node_modules/stripe/esm/resources/SubscriptionSchedules.js", "../../../node_modules/stripe/esm/resources/Subscriptions.js", "../../../node_modules/stripe/esm/resources/TaxCodes.js", "../../../node_modules/stripe/esm/resources/TaxIds.js", "../../../node_modules/stripe/esm/resources/TaxRates.js", "../../../node_modules/stripe/esm/resources/Tokens.js", "../../../node_modules/stripe/esm/resources/Topups.js", "../../../node_modules/stripe/esm/resources/Transfers.js", "../../../node_modules/stripe/esm/resources/WebhookEndpoints.js", "../../../node_modules/stripe/esm/resources.js", "../../../node_modules/stripe/esm/stripe.core.js", "../../../node_modules/stripe/esm/stripe.esm.worker.js", "../../../functions/api/stripe-webhook.ts", "../../../functions/api/test-upload.ts", "../../../functions/api/test-user.ts", "../../../functions/api/tickets/index.ts", "../../../functions/health.ts", "functionsRoutes-0.8044054200943971.mjs", "../bundle-vdH2kt/middleware-loader.entry.ts", "../bundle-vdH2kt/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/wrangler/node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/.wrangler/tmp/pages-UCTxDL/functionsWorker-0.5073429534170399.mjs",
  "sourcesContent": ["export class SettingsStorage {\n  private db: any;\n\n  constructor(database: any) {\n    this.db = database;\n  }\n\n  async initializeSettings() {\n    try {\n      const result = await this.db.prepare(`\n        CREATE TABLE IF NOT EXISTS settings (\n          key TEXT PRIMARY KEY,\n          value TEXT NOT NULL,\n          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n        )\n      `).run();\n      console.log('Settings table initialized:', result);\n    } catch (error) {\n      console.error('Failed to initialize settings table:', error);\n      throw error;\n    }\n  }\n\n  async getSetting(key: string): Promise<string | null> {\n    try {\n      const result = await this.db.prepare(\n        'SELECT value FROM settings WHERE key = ?'\n      ).bind(key).first();\n      \n      return result ? result.value : null;\n    } catch (error) {\n      console.error('Failed to get setting:', error);\n      return null;\n    }\n  }\n\n  async setSetting(key: string, value: string): Promise<void> {\n    try {\n      console.log(`Setting ${key} with value length:`, value.length);\n      const result = await this.db.prepare(\n        'INSERT OR REPLACE INTO settings (key, value, updated_at) VALUES (?, ?, CURRENT_TIMESTAMP)'\n      ).bind(key, value).run();\n      console.log(`Successfully set ${key}, result:`, result);\n    } catch (error) {\n      console.error(`Failed to set setting ${key}:`, error);\n      throw error;\n    }\n  }\n\n  async getChatSettings(): Promise<any> {\n    try {\n      const openaiApiKey = await this.getSetting('openai_api_key');\n      const assistantId = await this.getSetting('openai_assistant_id');\n      const chatModel = await this.getSetting('chat_model') || 'gpt-4o-mini';\n      const enabled = await this.getSetting('chat_enabled') || 'true';\n\n      return {\n        openaiApiKey: openaiApiKey ? '***hidden***' : '',\n        assistantId: assistantId || '',\n        chatModel,\n        enabled: enabled === 'true'\n      };\n    } catch (error) {\n      console.error('Failed to get chat settings:', error);\n      return {\n        openaiApiKey: '',\n        assistantId: '',\n        chatModel: 'gpt-4o-mini',\n        enabled: true\n      };\n    }\n  }\n\n  async setChatSettings(settings: any): Promise<void> {\n    try {\n      if (settings.openaiApiKey && settings.openaiApiKey !== '***hidden***') {\n        await this.setSetting('openai_api_key', settings.openaiApiKey);\n      }\n      \n      if (settings.assistantId !== undefined) {\n        await this.setSetting('openai_assistant_id', settings.assistantId || '');\n      }\n      \n      if (settings.chatModel) {\n        await this.setSetting('chat_model', settings.chatModel);\n      }\n      \n      if (settings.enabled !== undefined) {\n        await this.setSetting('chat_enabled', settings.enabled.toString());\n      }\n    } catch (error) {\n      console.error('Failed to set chat settings:', error);\n      console.error('Settings object:', settings);\n      const message = error instanceof Error ? error.message : String(error);\n      throw new Error(`Settings storage error: ${message}`);\n    }\n  }\n\n  async getOpenAIApiKey(): Promise<string | null> {\n    return await this.getSetting('openai_api_key');\n  }\n}\n", "interface TranslationRequest {\n  text: string;\n  targetLanguages: string[];\n  context?: string;\n  maxLength?: number;\n  tone?: 'marketing' | 'professional' | 'casual' | 'urgent';\n}\n\ninterface TranslationResult {\n  [language: string]: string;\n}\n\ninterface OpenAIResponse {\n  choices: {\n    message: {\n      content: string;\n    };\n  }[];\n}\n\nexport class TranslationService {\n  private static readonly supportedLanguages = {\n    en: 'English',\n    de: 'German', \n    fr: 'French',\n    es: 'Spanish',\n    it: 'Italian',\n    pt: 'Portuguese',\n    nl: 'Dutch',\n    da: 'Danish',\n    no: 'Norwegian',\n    fi: 'Finnish',\n    tr: 'Turkish',\n    pl: 'Polish',\n    ru: 'Russian'\n  };\n\n  static async translateBadgeText(\n    text: string,\n    targetLanguages: string[],\n    openaiApiKey?: string\n  ): Promise<TranslationResult> {\n    // Return empty map if no API key provided\n    if (!openaiApiKey) {\n      console.warn('OpenAI API key not provided - returning empty translation map');\n      return {};\n    }\n\n    // Filter out invalid languages\n    const validLanguages = targetLanguages.filter(lang => \n      lang in this.supportedLanguages && lang !== 'en'\n    );\n\n    if (validLanguages.length === 0) {\n      return {};\n    }\n\n    const languageNames = validLanguages.map(code => \n      `${code}: ${this.supportedLanguages[code as keyof typeof this.supportedLanguages]}`\n    ).join(', ');\n\n    const prompt = `Translate the following announcement badge text into multiple languages.\n\nOriginal text (English): \"${text}\"\nContext: Announcement badge for a Chrome extension product website\nTarget languages: ${languageNames}\nTone: Marketing/promotional tone\n\nRequirements:\n- Maintain the marketing/promotional tone\n- Keep the same emotional impact as the original\n- Adapt cultural nuances appropriately for each target market\n- Keep translations concise and impactful for badge display\n- Ensure translations sound natural to native speakers\n\nRespond with a JSON object where keys are language codes (${validLanguages.join(', ')}) and values are the translated text.\n\nExample format:\n{\n  \"de\": \"German translation here\",\n  \"fr\": \"French translation here\"\n}`;\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${openaiApiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: \"gpt-4o\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are a professional translator specializing in marketing and e-commerce content. Provide accurate, culturally appropriate translations that maintain the marketing impact of the original text.\"\n            },\n            {\n              role: \"user\", \n              content: prompt\n            }\n          ],\n          response_format: { type: \"json_object\" },\n          temperature: 0.3,\n          max_tokens: 1000\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json() as OpenAIResponse;\n      const translationText = data.choices[0]?.message?.content;\n      \n      if (!translationText) {\n        throw new Error('No translation received from OpenAI');\n      }\n\n      const translations = JSON.parse(translationText);\n      \n      // Validate translations\n      const result: TranslationResult = {};\n      for (const lang of validLanguages) {\n        if (translations[lang] && typeof translations[lang] === 'string') {\n          result[lang] = translations[lang].trim();\n        }\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Translation service error:', error);\n      throw new Error(`Translation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static getSupportedLanguages(): typeof TranslationService.supportedLanguages {\n    return this.supportedLanguages;\n  }\n}\n", "import { SettingsStorage } from '../../../lib/settings-storage';\nimport { TranslationService } from '../../../lib/translation-service';\n\ninterface Env {\n  DB: D1Database;\n  OPENAI_API_KEY?: string;\n}\n\ndeclare global {\n  interface D1Database {}\n  interface PagesFunction<T = any> {\n    (context: { request: Request; env: T; params: any; waitUntil: (promise: Promise<any>) => void; }): Promise<Response> | Response;\n  }\n}\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\n  try {\n    const requestData = await context.request.json();\n    const { textEn, targetLanguages } = requestData;\n    \n    if (!textEn || !targetLanguages || !Array.isArray(targetLanguages)) {\n      return new Response(JSON.stringify({ \n        error: 'textEn and targetLanguages array are required' \n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n\n    // Get OpenAI API key from environment or settings\n    let openaiApiKey = context.env.OPENAI_API_KEY;\n    \n    if (!openaiApiKey) {\n      // Try to get from settings storage\n      const settingsStorage = new SettingsStorage(context.env.DB);\n      const apiKeySetting = await settingsStorage.getSetting('openai_api_key');\n      openaiApiKey = apiKeySetting;\n    }\n\n    if (!openaiApiKey) {\n      return new Response(JSON.stringify({ \n        error: 'OpenAI API key not configured' \n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n\n    console.log('Translating badge text:', textEn, 'to languages:', targetLanguages);\n\n    // Translate the text\n    const translations = await TranslationService.translateBadgeText(\n      textEn,\n      targetLanguages,\n      openaiApiKey\n    );\n\n    console.log('Translation results:', translations);\n\n    return new Response(JSON.stringify(translations), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error translating badge text:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to translate badge text',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\n// Helper to return JSON responses\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  try {\n    // Query the database for all invoices, ordered by most recent\n    const { results } = await env.DB.prepare(\n      'SELECT * FROM invoices ORDER BY invoiceDate DESC'\n    ).all();\n\n    if (!results) {\n      return json([]);\n    }\n\n    return json(results);\n\n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n", "import { SettingsStorage } from '../../../lib/settings-storage';\n\ninterface Env {\n  DB: D1Database;\n}\n\ndeclare global {\n  interface D1Database {}\n  interface PagesFunction<T = any> {\n    (context: { request: Request; env: T; params: any; waitUntil: (promise: Promise<any>) => void; }): Promise<Response> | Response;\n  }\n}\n\ninterface AnnouncementBadge {\n  id: string;\n  title: string;\n  subtitle: string;\n  backgroundColor: string;\n  textColor: string;\n  priority: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const badgeId = context.params.id;\n    \n    if (!badgeId) {\n      return new Response(JSON.stringify({ error: 'Badge ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Get all badges\n    const badgesData = await settingsStorage.getSetting('announcement_badges');\n    const badges = badgesData ? JSON.parse(badgesData) : [];\n    \n    // Find specific badge\n    const badge = badges.find((b: AnnouncementBadge) => b.id === badgeId);\n    \n    if (!badge) {\n      return new Response(JSON.stringify({ error: 'Badge not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    return new Response(JSON.stringify(badge), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching announcement badge:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to fetch announcement badge',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestPut: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const badgeId = context.params.id;\n    const requestData = await context.request.json();\n    \n    if (!badgeId) {\n      return new Response(JSON.stringify({ error: 'Badge ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    console.log('Updating announcement badge:', badgeId, JSON.stringify(requestData, null, 2));\n    \n    // Get existing badges\n    const existingBadgesData = await settingsStorage.getSetting('announcement_badges');\n    const existingBadges = existingBadgesData ? JSON.parse(existingBadgesData) : [];\n    \n    // Find and update badge\n    const badgeIndex = existingBadges.findIndex((badge: AnnouncementBadge) => badge.id === badgeId);\n    \n    if (badgeIndex === -1) {\n      return new Response(JSON.stringify({ error: 'Badge not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Update badge - handle different field names from frontend\n    existingBadges[badgeIndex] = {\n      ...existingBadges[badgeIndex],\n      title: requestData.title || requestData.text || requestData.badgeText || requestData.content || requestData.message || existingBadges[badgeIndex].title,\n      subtitle: requestData.subtitle || existingBadges[badgeIndex].subtitle,\n      backgroundColor: requestData.backgroundColor || requestData.bgColor || requestData.background || existingBadges[badgeIndex].backgroundColor,\n      textColor: requestData.textColor || requestData.color || requestData.foreground || existingBadges[badgeIndex].textColor,\n      priority: requestData.priority ? parseInt(requestData.priority) : existingBadges[badgeIndex].priority,\n      isActive: requestData.isActive !== undefined ? Boolean(requestData.isActive) : requestData.enabled !== undefined ? Boolean(requestData.enabled) : existingBadges[badgeIndex].isActive,\n      updatedAt: new Date().toISOString(),\n    };\n    \n    console.log('Updated badge object:', JSON.stringify(existingBadges[badgeIndex], null, 2));\n    \n    // Save updated badges\n    await settingsStorage.setSetting('announcement_badges', JSON.stringify(existingBadges));\n    \n    console.log('Updated announcement badge:', badgeId);\n    \n    return new Response(JSON.stringify(existingBadges[badgeIndex]), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error updating announcement badge:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to update announcement badge',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestDelete: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const badgeId = context.params.id;\n    \n    if (!badgeId) {\n      return new Response(JSON.stringify({ error: 'Badge ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    console.log('Deleting announcement badge:', badgeId);\n    \n    // Get existing badges\n    const existingBadgesData = await settingsStorage.getSetting('announcement_badges');\n    const existingBadges = existingBadgesData ? JSON.parse(existingBadgesData) : [];\n    \n    // Filter out the badge to delete\n    const updatedBadges = existingBadges.filter((badge: AnnouncementBadge) => badge.id !== badgeId);\n    \n    if (updatedBadges.length === existingBadges.length) {\n      return new Response(JSON.stringify({ error: 'Badge not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Save updated badges\n    await settingsStorage.setSetting('announcement_badges', JSON.stringify(updatedBadges));\n    \n    console.log('Deleted announcement badge:', badgeId);\n    \n    return new Response(JSON.stringify({ success: true }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error deleting announcement badge:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to delete announcement badge',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n", "import { SettingsStorage } from '../../../lib/settings-storage';\n\ninterface Env {\n  DB: D1Database;\n}\n\ndeclare global {\n  interface D1Database {}\n  interface PagesFunction<T = any> {\n    (context: { request: Request; env: T; params: any; waitUntil: (promise: Promise<any>) => void; }): Promise<Response> | Response;\n  }\n}\n\ninterface CountdownBanner {\n  id: string;\n  title: string;\n  subtitle: string;\n  targetPrice: number;\n  originalPrice: number;\n  endDate: string;\n  priority: number;\n  backgroundColor: string;\n  textColor: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const bannerId = context.params.id;\n    \n    if (!bannerId) {\n      return new Response(JSON.stringify({ error: 'Banner ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Get all banners\n    const bannersData = await settingsStorage.getSetting('countdown_banners');\n    const banners = bannersData ? JSON.parse(bannersData) : [];\n    \n    // Find specific banner\n    const banner = banners.find((b: CountdownBanner) => b.id === bannerId);\n    \n    if (!banner) {\n      return new Response(JSON.stringify({ error: 'Banner not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    return new Response(JSON.stringify(banner), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching countdown banner:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to fetch countdown banner',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestPut: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const bannerId = context.params.id;\n    const requestData = await context.request.json();\n    \n    if (!bannerId) {\n      return new Response(JSON.stringify({ error: 'Banner ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    console.log('Updating countdown banner:', bannerId, requestData);\n    \n    // Get existing banners\n    const existingBannersData = await settingsStorage.getSetting('countdown_banners');\n    const existingBanners = existingBannersData ? JSON.parse(existingBannersData) : [];\n    \n    // Find and update banner\n    const bannerIndex = existingBanners.findIndex((banner: CountdownBanner) => banner.id === bannerId);\n    \n    if (bannerIndex === -1) {\n      return new Response(JSON.stringify({ error: 'Banner not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Update banner\n    existingBanners[bannerIndex] = {\n      ...existingBanners[bannerIndex],\n      title: requestData.title || existingBanners[bannerIndex].title,\n      subtitle: requestData.subtitle || existingBanners[bannerIndex].subtitle,\n      targetPrice: requestData.targetPrice ? parseFloat(requestData.targetPrice) : existingBanners[bannerIndex].targetPrice,\n      originalPrice: requestData.originalPrice ? parseFloat(requestData.originalPrice) : existingBanners[bannerIndex].originalPrice,\n      endDate: requestData.endDate || existingBanners[bannerIndex].endDate,\n      priority: requestData.priority ? parseInt(requestData.priority) : existingBanners[bannerIndex].priority,\n      backgroundColor: requestData.backgroundColor || existingBanners[bannerIndex].backgroundColor,\n      textColor: requestData.textColor || existingBanners[bannerIndex].textColor,\n      isActive: requestData.isActive !== undefined ? requestData.isActive : existingBanners[bannerIndex].isActive,\n      updatedAt: new Date().toISOString(),\n    };\n    \n    // Save updated banners\n    await settingsStorage.setSetting('countdown_banners', JSON.stringify(existingBanners));\n    \n    console.log('Updated countdown banner:', bannerId);\n    \n    return new Response(JSON.stringify(existingBanners[bannerIndex]), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error updating countdown banner:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to update countdown banner',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestDelete: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const bannerId = context.params.id;\n    \n    if (!bannerId) {\n      return new Response(JSON.stringify({ error: 'Banner ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    console.log('Deleting countdown banner:', bannerId);\n    \n    // Get existing banners\n    const existingBannersData = await settingsStorage.getSetting('countdown_banners');\n    const existingBanners = existingBannersData ? JSON.parse(existingBannersData) : [];\n    \n    // Filter out the banner to delete\n    const updatedBanners = existingBanners.filter((banner: CountdownBanner) => banner.id !== bannerId);\n    \n    if (updatedBanners.length === existingBanners.length) {\n      return new Response(JSON.stringify({ error: 'Banner not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Save updated banners\n    await settingsStorage.setSetting('countdown_banners', JSON.stringify(updatedBanners));\n    \n    console.log('Deleted countdown banner:', bannerId);\n    \n    return new Response(JSON.stringify({ success: true }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error deleting countdown banner:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to delete countdown banner',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n", "export const onRequestPut = async ({ request, params }: any) => {\n  try {\n    const featureName = params.feature;\n    const { isEnabled, description } = await request.json();\n    \n    // Demo response - in real implementation, save to database\n    return new Response(JSON.stringify({\n      success: true,\n      message: `Feature ${featureName} updated successfully`,\n      feature: {\n        id: featureName,\n        name: featureName.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n        isEnabled,\n        description: description || `${featureName} feature`\n      }\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to update feature'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'PUT, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "export async function onRequestPut(context: any) {\n  const { request, env, params } = context;\n  const orderId = params.orderId;\n\n  // CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'PUT, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  // Handle preflight requests\n  if (request.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { status } = await request.json();\n\n    if (!status || !['pending', 'completed', 'failed', 'refunded'].includes(status)) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Invalid status. Must be one of: pending, completed, failed, refunded' \n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n\n    // Update order status\n    const updateQuery = `\n      UPDATE orders \n      SET status = ?, completedAt = ?\n      WHERE id = ?\n    `;\n    \n    const completedAt = status === 'completed' ? new Date().toISOString() : null;\n    \n    const updateResult = await env.DB.prepare(updateQuery)\n      .bind(status, completedAt, orderId)\n      .run();\n\n    if (!updateResult.success) {\n      throw new Error('Failed to update order status');\n    }\n\n    // If order is completed, update user premium status\n    if (status === 'completed') {\n      // Get order details to update user\n      const orderQuery = `\n        SELECT customerEmail, finalAmount \n        FROM orders \n        WHERE id = ?\n      `;\n      \n      const orderResult = await env.DB.prepare(orderQuery).bind(orderId).first();\n      \n      if (orderResult) {\n        // Update user premium status and stats\n        const userUpdateQuery = `\n          UPDATE users \n          SET \n            isPremium = 1\n          WHERE email = ?\n        `;\n        \n        await env.DB.prepare(userUpdateQuery)\n          .bind(orderResult.customerEmail)\n          .run();\n      }\n    }\n\n    return new Response(JSON.stringify({ \n      success: true, \n      message: 'Order status updated successfully' \n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\n    });\n\n  } catch (error) {\n    console.error('Error updating order:', error);\n    return new Response(JSON.stringify({ \n      success: false, \n      error: 'Failed to update order status' \n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\n    });\n  }\n}\n", "// Cloudflare Pages Function: /api/extension/check/[id]\n// Handles extension status check\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, params, env }) => {\n  try {\n    const paramId = params.id as string;\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return json({ canUse: false, reason: 'Not authenticated' });\n    }\n\n    const token = authHeader.substring(7);\n\n    // Handle demo user\n    if (token === 'demo-jwt-token' && paramId === '1') {\n      return json({\n        canUse: true,\n        reason: 'Premium access',\n        trialUsed: 0,\n        isBlocked: false\n      });\n    }\n\n    // For real users, verify token and check database\n    if (token.startsWith('jwt-token-')) {\n      const parts = token.split('-');\n      if (parts.length < 3) {\n        return json({ canUse: false, reason: 'Invalid token' }, 401);\n      }\n\n      const userEmail = parts[2];\n\n      if (!env.DB) {\n        return json({ canUse: false, reason: 'Database not available' }, 500);\n      }\n\n      const customer = await env.DB.prepare(\n        'SELECT extension_activated FROM customers WHERE email = ?'\n      ).bind(userEmail).first<{ extension_activated: number }>();\n\n      if (customer && customer.extension_activated) {\n        return json({\n          canUse: true,\n          reason: 'Premium access',\n          trialUsed: 0,\n          isBlocked: false\n        });\n      } else {\n        // Return trial status for non-premium users\n        return json({\n          canUse: true,\n          reason: 'Trial access',\n          trialUsed: 5, // This could be dynamic in a real app\n          isBlocked: false\n        });\n      }\n    }\n    \n    return json({ canUse: false, reason: 'Invalid token' }, 401);\n    \n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n", "// Cloudflare Pages Function: /api/extension/downloads/[id]\n// Handles extension downloads list\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, params, env }) => {\n  try {\n    const userId = params.id as string;\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return json([]);\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Handle demo-jwt-token or jwt-token-1-* format\n    if (token === 'demo-jwt-token' || (token.startsWith('jwt-token-') && token.split('-')[2] === '1')) {\n      return json([\n        {\n          id: 1,\n          downloadToken: 'demo-download-token',\n          downloadType: 'paid',\n          downloadCount: 1,\n          createdAt: new Date().toISOString()\n        }\n      ]);\n    }\n    \n    // For other users, return empty array\n    return json([]);\n    \n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\n// Data structures - should be consistent with html.ts\ninterface Invoice {\n  id: number;\n  orderId: number;\n  invoiceNumber: string;\n  customerName: string;\n  customerEmail: string;\n  totalAmount: number;\n  status: string;\n  invoiceDate: string;\n  dueDate: string;\n}\n\ninterface Order {\n  id: number;\n  productName: string;\n  finalAmount: number;\n  currency: string;\n  paymentMethod: string;\n  status: string;\n  customerName: string;\n  customerEmail: string;\n  completedAt: string;\n  createdAt: string;\n}\n\n// HTML generation function - duplicated from html.ts for simplicity\nfunction generateInvoiceHTML(invoice: Invoice, order: Order, settings: any) {\n  const company = settings.company || {\n    name: 'OCUS Job Hunter',\n    address: 'Digital Services Company',\n    email: 'support@jobhunter.one',\n    website: 'https://jobhunter.one'\n  };\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Invoice #${invoice.invoiceNumber}</title>\n      <style>\n        body { font-family: sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 800px; margin: auto; padding: 20px; border: 1px solid #eee; }\n        .header { display: flex; justify-content: space-between; align-items: flex-start; }\n        .details { display: flex; justify-content: space-between; margin-top: 20px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { padding: 10px; border: 1px solid #ddd; }\n        .totals { margin-top: 20px; text-align: right; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>Invoice</h1>\n          <div>\n            <strong>${company.name}</strong><br>\n            ${company.address}<br>\n            ${company.email}\n          </div>\n        </div>\n        <div class=\"details\">\n          <div>\n            <h3>Bill To:</h3>\n            ${order.customerName}<br>\n            ${order.customerEmail}\n          </div>\n          <div>\n            <h3>Invoice Details:</h3>\n            <strong>Invoice #:</strong> ${invoice.invoiceNumber}<br>\n            <strong>Date:</strong> ${new Date(invoice.invoiceDate).toLocaleDateString()}\n          </div>\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>${order.productName}</td>\n              <td>${order.finalAmount.toFixed(2)} ${order.currency}</td>\n            </tr>\n          </tbody>\n        </table>\n        <div class=\"totals\">\n          <h3>Total: ${order.finalAmount.toFixed(2)} ${order.currency}</h3>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ params, env }) => {\n  try {\n    const invoiceId = params.id;\n\n    if (!invoiceId) {\n      return new Response('Invoice ID is required', { status: 400 });\n    }\n\n    // Fetch data\n    const invoice: Invoice = await env.DB.prepare('SELECT * FROM invoices WHERE id = ?').bind(invoiceId).first();\n    if (!invoice) return new Response('Invoice not found', { status: 404 });\n\n    const order: Order = await env.DB.prepare('SELECT * FROM orders WHERE id = ?').bind(invoice.orderId).first();\n    if (!order) return new Response('Associated order not found', { status: 404 });\n\n    const settingsStmt = await env.DB.prepare('SELECT value FROM settings WHERE key = ?').bind('invoice_settings').first();\n    const settings = settingsStmt ? JSON.parse(settingsStmt.value as string) : {};\n\n    const html = generateInvoiceHTML(invoice, order, settings);\n\n    return new Response(html, {\n      headers: {\n        'Content-Type': 'text/html',\n        'Content-Disposition': `attachment; filename=\"invoice-${invoice.invoiceNumber}.html\"`,\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error: any) {\n    return new Response(`Error generating invoice: ${error.message}`, { status: 500 });\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\n// Data structures - consistent with receipt.ts\ninterface Invoice {\n  id: number;\n  orderId: number;\n  invoiceNumber: string;\n}\n\ninterface Order {\n  id: number;\n  finalAmount: number;\n  currency: string;\n  customerName: string;\n  customerEmail: string;\n  completedAt: string;\n}\n\n// HTML generation function - duplicated from receipt.ts\nfunction generateReceiptHTML(invoice: Invoice, order: Order, settings: any) {\n  const company = settings.company || {\n    name: 'OCUS Job Hunter',\n    email: 'support@jobhunter.one'\n  };\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Receipt for Invoice #${invoice.invoiceNumber}</title>\n      <style>\n        body { font-family: sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; }\n        .header { text-align: center; border-bottom: 1px solid #eee; padding-bottom: 10px; }\n        .details { margin-top: 20px; }\n        .summary { margin-top: 20px; }\n        .total-amount { font-size: 1.2em; font-weight: bold; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>Payment Receipt</h1>\n        </div>\n        <div class=\"details\">\n          <p><strong>Receipt #:</strong> RCPT-${invoice.id}</p>\n          <p><strong>Payment Date:</strong> ${new Date(order.completedAt).toLocaleDateString()}</p>\n          <p><strong>Paid To:</strong> ${company.name}</p>\n          <p><strong>Paid By:</strong> ${order.customerName}</p>\n        </div>\n        <div class=\"summary\">\n          <h3>Summary</h3>\n          <p>Total Paid: <span class=\"total-amount\">${order.finalAmount.toFixed(2)} ${order.currency}</span></p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ params, env }) => {\n  try {\n    const invoiceId = params.id;\n\n    if (!invoiceId) {\n      return new Response('Invoice ID is required', { status: 400 });\n    }\n\n    // Fetch data\n    const invoice: Invoice = await env.DB.prepare('SELECT * FROM invoices WHERE id = ?').bind(invoiceId).first();\n    if (!invoice) return new Response('Invoice not found', { status: 404 });\n\n    const order: Order = await env.DB.prepare('SELECT * FROM orders WHERE id = ?').bind(invoice.orderId).first();\n    if (!order) return new Response('Associated order not found', { status: 404 });\n\n    const settingsStmt = await env.DB.prepare('SELECT value FROM settings WHERE key = ?').bind('invoice_settings').first();\n    const settings = settingsStmt ? JSON.parse(settingsStmt.value as string) : {};\n\n    const html = generateReceiptHTML(invoice, order, settings);\n\n    return new Response(html, {\n      headers: {\n        'Content-Type': 'text/html',\n        'Content-Disposition': `attachment; filename=\"receipt-${invoice.invoiceNumber}.html\"`,\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error: any) {\n    return new Response(`Error generating receipt: ${error.message}`, { status: 500 });\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\n// Invoice and Order data structures (inferred from generate.ts)\ninterface Invoice {\n  id: number;\n  orderId: number;\n  invoiceNumber: string;\n  customerName: string;\n  customerEmail: string;\n  totalAmount: number;\n  status: string;\n  invoiceDate: string;\n  dueDate: string;\n}\n\ninterface Order {\n  id: number;\n  productName: string;\n  finalAmount: number;\n  currency: string;\n  paymentMethod: string;\n  status: string;\n  activationCode: string;\n  downloadToken: string;\n  customerName: string;\n  customerEmail: string;\n  completedAt: string;\n  createdAt: string;\n}\n\n// Main function to generate invoice HTML\nfunction generateInvoiceHTML(invoice: Invoice, order: Order, settings: any) {\n  const company = settings.company || {\n    name: 'OCUS Job Hunter',\n    address: 'Digital Services Company',\n    email: 'support@jobhunter.one',\n    website: 'https://jobhunter.one'\n  };\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Invoice #${invoice.invoiceNumber}</title>\n      <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f9f9f9; margin: 0; padding: 0; }\n        .container { max-width: 800px; margin: 20px auto; padding: 30px; background-color: #fff; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.05); }\n        .header { display: flex; justify-content: space-between; align-items: flex-start; padding-bottom: 20px; border-bottom: 2px solid #eee; }\n        .header h1 { font-size: 2.5em; color: #000; margin: 0; }\n        .header .company-details { text-align: right; font-size: 0.9em; color: #555; }\n        .details { display: flex; justify-content: space-between; margin-top: 30px; }\n        .details .customer-details, .details .invoice-details { font-size: 0.95em; }\n        .details h3 { margin-top: 0; font-size: 1.1em; color: #000; border-bottom: 1px solid #eee; padding-bottom: 5px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 30px; }\n        th, td { padding: 12px 15px; text-align: left; }\n        thead { background-color: #f5f5f5; border-bottom: 2px solid #ddd; }\n        th { font-weight: 600; color: #333; }\n        tbody tr { border-bottom: 1px solid #eee; }\n        .totals { margin-top: 30px; text-align: right; }\n        .totals table { width: auto; float: right; }\n        .totals td { text-align: right; }\n        .totals .total-amount { font-size: 1.4em; font-weight: bold; color: #000; }\n        .footer { margin-top: 40px; text-align: center; font-size: 0.85em; color: #777; border-top: 1px solid #eee; padding-top: 20px; }\n        .status { font-size: 1.2em; font-weight: bold; padding: 8px 12px; border-radius: 6px; text-transform: uppercase; }\n        .status.paid { color: #28a745; background-color: #e9f7ec; }\n        .status.pending { color: #ffc107; background-color: #fff8e1; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>Invoice</h1>\n          <div class=\"company-details\">\n            <strong>${company.name}</strong><br>\n            ${company.address}<br>\n            ${company.email}<br>\n            ${company.website}\n          </div>\n        </div>\n        <div class=\"details\">\n          <div class=\"customer-details\">\n            <h3>Bill To:</h3>\n            <strong>${order.customerName}</strong><br>\n            ${order.customerEmail}\n          </div>\n          <div class=\"invoice-details\">\n            <h3>Invoice Details:</h3>\n            <strong>Invoice #:</strong> ${invoice.invoiceNumber}<br>\n            <strong>Date:</strong> ${new Date(invoice.invoiceDate).toLocaleDateString()}<br>\n            <strong>Due Date:</strong> ${new Date(invoice.dueDate).toLocaleDateString()}<br>\n            <strong>Status:</strong> <span class=\"status ${invoice.status.toLowerCase()}\">${invoice.status}</span>\n          </div>\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Quantity</th>\n              <th>Unit Price</th>\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>${order.productName}</td>\n              <td>1</td>\n              <td>${order.finalAmount.toFixed(2)} ${order.currency}</td>\n              <td>${order.finalAmount.toFixed(2)} ${order.currency}</td>\n            </tr>\n          </tbody>\n        </table>\n        <div class=\"totals\">\n          <table>\n            <tr>\n              <td>Subtotal:</td>\n              <td>${order.finalAmount.toFixed(2)} ${order.currency}</td>\n            </tr>\n            <tr>\n              <td>Tax (0%):</td>\n              <td>0.00 ${order.currency}</td>\n            </tr>\n            <tr>\n              <td class=\"total-amount\">Total:</td>\n              <td class=\"total-amount\">${order.finalAmount.toFixed(2)} ${order.currency}</td>\n            </tr>\n          </table>\n        </div>\n        <div class=\"footer\">\n          <p>Thank you for your business!</p>\n          <p>If you have any questions, please contact us at ${company.email}.</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ params, env }) => {\n  try {\n    const invoiceId = params.id;\n\n    if (!invoiceId) {\n      return new Response('Invoice ID is required', { status: 400 });\n    }\n\n    // 1. Fetch invoice details\n    const invoice: Invoice = await env.DB.prepare(\n      'SELECT * FROM invoices WHERE id = ?'\n    ).bind(invoiceId).first();\n\n    if (!invoice) {\n      return new Response('Invoice not found', { status: 404 });\n    }\n\n    // 2. Fetch associated order details\n    const order: Order = await env.DB.prepare(\n      'SELECT * FROM orders WHERE id = ?'\n    ).bind(invoice.orderId).first();\n\n    if (!order) {\n      return new Response('Associated order not found', { status: 404 });\n    }\n\n    // 3. Fetch invoice settings (e.g., company details)\n    const settingsStmt = await env.DB.prepare('SELECT value FROM settings WHERE key = ?').bind('invoice_settings').first();\n    const settings = settingsStmt ? JSON.parse(settingsStmt.value as string) : {};\n\n    // 4. Generate HTML\n    const html = generateInvoiceHTML(invoice, order, settings);\n\n    return new Response(html, {\n      headers: {\n        'Content-Type': 'text/html',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error: any) {\n    return new Response(`Error generating invoice: ${error.message}`, { status: 500 });\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\n// Data structures\ninterface Invoice {\n  id: number;\n  orderId: number;\n  invoiceNumber: string;\n  customerName: string;\n  customerEmail: string;\n  totalAmount: number;\n  status: string;\n  invoiceDate: string;\n}\n\ninterface Order {\n  id: number;\n  productName: string;\n  finalAmount: number;\n  currency: string;\n  paymentMethod: string;\n  status: string;\n  customerName: string;\n  customerEmail: string;\n  completedAt: string;\n}\n\n// Function to generate receipt HTML\nfunction generateReceiptHTML(invoice: Invoice, order: Order, settings: any) {\n  const company = settings.company || {\n    name: 'OCUS Job Hunter',\n    email: 'support@jobhunter.one'\n  };\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Receipt for Invoice #${invoice.invoiceNumber}</title>\n      <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f9f9f9; margin: 0; padding: 0; }\n        .container { max-width: 600px; margin: 20px auto; padding: 30px; background-color: #fff; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.05); }\n        .header { text-align: center; padding-bottom: 20px; border-bottom: 2px solid #eee; }\n        .header h1 { font-size: 2.2em; color: #28a745; margin: 0; }\n        .header p { font-size: 1.1em; color: #555; }\n        .details { margin-top: 30px; font-size: 0.95em; }\n        .details strong { color: #000; }\n        .summary { margin-top: 30px; }\n        .summary h3 { font-size: 1.2em; border-bottom: 1px solid #eee; padding-bottom: 5px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 15px; }\n        td { padding: 10px 0; }\n        .total-amount { font-size: 1.5em; font-weight: bold; color: #000; }\n        .footer { margin-top: 30px; text-align: center; font-size: 0.85em; color: #777; border-top: 1px solid #eee; padding-top: 20px; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>Payment Receipt</h1>\n          <p>Thank you for your purchase!</p>\n        </div>\n        <div class=\"details\">\n          <p><strong>Receipt #:</strong> RCPT-${invoice.id}</p>\n          <p><strong>Invoice #:</strong> ${invoice.invoiceNumber}</p>\n          <p><strong>Payment Date:</strong> ${new Date(order.completedAt).toLocaleDateString()}</p>\n          <p><strong>Paid To:</strong> ${company.name}</p>\n          <p><strong>Paid By:</strong> ${order.customerName} (${order.customerEmail})</p>\n        </div>\n        <div class=\"summary\">\n          <h3>Payment Summary</h3>\n          <table>\n            <tr>\n              <td>${order.productName}</td>\n              <td style=\"text-align: right;\">${order.finalAmount.toFixed(2)} ${order.currency}</td>\n            </tr>\n            <tr>\n              <td style=\"font-weight: bold;\">Total Paid:</td>\n              <td style=\"text-align: right;\" class=\"total-amount\">${order.finalAmount.toFixed(2)} ${order.currency}</td>\n            </tr>\n          </table>\n        </div>\n        <div class=\"footer\">\n          <p>If you have any questions, please contact us at ${company.email}.</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ params, env }) => {\n  try {\n    const invoiceId = params.id;\n\n    if (!invoiceId) {\n      return new Response('Invoice ID is required', { status: 400 });\n    }\n\n    // Fetch invoice and order details\n    const invoice: Invoice = await env.DB.prepare('SELECT * FROM invoices WHERE id = ?').bind(invoiceId).first();\n    if (!invoice) return new Response('Invoice not found', { status: 404 });\n\n    const order: Order = await env.DB.prepare('SELECT * FROM orders WHERE id = ?').bind(invoice.orderId).first();\n    if (!order) return new Response('Associated order not found', { status: 404 });\n\n    // Fetch settings\n    const settingsStmt = await env.DB.prepare('SELECT value FROM settings WHERE key = ?').bind('invoice_settings').first();\n    const settings = settingsStmt ? JSON.parse(settingsStmt.value as string) : {};\n\n    const html = generateReceiptHTML(invoice, order, settings);\n\n    return new Response(html, {\n      headers: { 'Content-Type': 'text/html', 'Access-Control-Allow-Origin': '*' }\n    });\n\n  } catch (error: any) {\n    return new Response(`Error generating receipt: ${error.message}`, { status: 500 });\n  }\n};\n", "// D1 Database helper for Cloudflare Functions\n\n// D1Database type definition for Cloudflare Workers\ninterface D1Database {\n  prepare(query: string): D1PreparedStatement;\n  dump(): Promise<ArrayBuffer>;\n  batch<T = unknown>(statements: D1PreparedStatement[]): Promise<D1Result<T>[]>;\n  exec(query: string): Promise<D1ExecResult>;\n}\n\ninterface D1PreparedStatement {\n  bind(...values: any[]): D1PreparedStatement;\n  first<T = unknown>(colName?: string): Promise<T | null>;\n  run<T = unknown>(): Promise<D1Result<T>>;\n  all<T = unknown>(): Promise<D1Result<T[]>>;\n  raw<T = unknown>(): Promise<T[]>;\n}\n\ninterface D1Result<T = unknown> {\n  results: T;\n  success: boolean;\n  meta: any;\n  error?: string;\n}\n\ninterface D1ExecResult {\n  count: number;\n  duration: number;\n}\n\nexport interface Env {\n  DB: D1Database;\n  EXPRESS_API_BASE?: string;\n}\n\nexport interface Ticket {\n  id: number;\n  customer_id: number;\n  title: string;\n  description: string;\n  category: string;\n  priority: string;\n  status: 'open' | 'in-progress' | 'resolved' | 'closed' | 'archived';\n  customer_email: string;\n  customer_name: string;\n  assigned_to_user_id?: number;\n  created_at: string;\n  updated_at: string;\n  resolved_at?: string;\n  archived_at?: string;\n}\n\nexport interface TicketMessage {\n  id: number;\n  ticket_id: number;\n  message: string;\n  is_from_customer: boolean;\n  sender_name: string;\n  sender_email?: string;\n  created_at: string;\n  attachments?: string;\n}\n\nexport class TicketStorage {\n  constructor(private db: D1Database) {}\n\n  async getAllTickets(): Promise<Ticket[]> {\n    try {\n      const result = await this.db.prepare('SELECT * FROM tickets ORDER BY created_at DESC').all();\n      return result.results as Ticket[];\n    } catch (error: any) {\n      console.error('D1 getAllTickets error:', error);\n      throw new Error(`Database query failed: ${error.message}`);\n    }\n  }\n\n  async getTicketsByCustomerEmail(email: string): Promise<Ticket[]> {\n    try {\n      const result = await this.db.prepare('SELECT * FROM tickets WHERE customer_email = ? ORDER BY created_at DESC')\n        .bind(email)\n        .all();\n      return result.results as Ticket[];\n    } catch (error: any) {\n      console.error('D1 getTicketsByCustomerEmail error:', error);\n      throw new Error(`Database query failed: ${error.message}`);\n    }\n  }\n\n  async getTicketsByCustomerId(customerId: number): Promise<Ticket[]> {\n    try {\n      const result = await this.db.prepare('SELECT * FROM tickets WHERE customer_id = ? ORDER BY created_at DESC')\n        .bind(customerId)\n        .all();\n      return result.results as Ticket[];\n    } catch (error: any) {\n      console.error('D1 getTicketsByCustomerId error:', error);\n      throw new Error(`Database query failed: ${error.message}`);\n    }\n  }\n\n  async getTicketById(id: number): Promise<Ticket | null> {\n    const result = await this.db.prepare('SELECT * FROM tickets WHERE id = ?')\n      .bind(id)\n      .first();\n    return result as Ticket | null;\n  }\n\n  async createTicket(ticket: Omit<Ticket, 'id' | 'created_at' | 'updated_at'>): Promise<Ticket> {\n    // Ensure customer_id is part of the ticket object for insertion\n    if (ticket.customer_id === undefined) {\n      throw new Error('customer_id is required to create a ticket.');\n    }\n    const now = new Date().toISOString();\n    \n    try {\n      const result = await this.db.prepare(`\n        INSERT INTO tickets (customer_id, title, description, category, priority, status, customer_email, customer_name, assigned_to_user_id, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        RETURNING *\n      `).bind(\n        ticket.customer_id,\n        ticket.title,\n        ticket.description,\n        ticket.category,\n        ticket.priority,\n        ticket.status,\n        ticket.customer_email,\n        ticket.customer_name,\n        ticket.assigned_to_user_id || null,\n        now,\n        now\n      ).first();\n      \n      if (!result) {\n        throw new Error('Failed to insert ticket - no result returned');\n      }\n      \n      return result as Ticket;\n    } catch (error: any) {\n      console.error('D1 createTicket error:', error);\n      throw new Error(`Database insert failed: ${error.message}`);\n    }\n  }\n\n  async updateTicket(id: number, updates: Partial<Ticket>): Promise<Ticket | null> {\n    const now = new Date().toISOString();\n    \n    try {\n      const result = await this.db.prepare(`\n        UPDATE tickets \n        SET title = COALESCE(?, title),\n            description = COALESCE(?, description),\n            category = COALESCE(?, category),\n            priority = COALESCE(?, priority),\n            status = COALESCE(?, status),\n            assigned_to_user_id = COALESCE(?, assigned_to_user_id),\n            updated_at = ?,\n            resolved_at = CASE WHEN ? = 'resolved' THEN ? ELSE resolved_at END,\n            archived_at = CASE WHEN ? = 'archived' THEN ? ELSE archived_at END\n        WHERE id = ?\n        RETURNING *\n      `).bind(\n        updates.title || null,\n        updates.description || null,\n        updates.category || null,\n        updates.priority || null,\n        updates.status || null,\n        updates.assigned_to_user_id || null,\n        now,\n        updates.status,\n        updates.status === 'resolved' ? now : null,\n        updates.status,\n        updates.status === 'archived' ? now : null,\n        id\n      ).first();\n      \n      return result as Ticket | null;\n    } catch (error: any) {\n      console.error('D1 updateTicket error:', error);\n      throw new Error(`Database update failed: ${error.message}`);\n    }\n  }\n\n  async archiveTicket(id: number): Promise<Ticket | null> {\n    const now = new Date().toISOString();\n    \n    try {\n      const result = await this.db.prepare(`\n        UPDATE tickets \n        SET status = 'archived',\n            archived_at = ?,\n            updated_at = ?\n        WHERE id = ?\n        RETURNING *\n      `).bind(now, now, id).first();\n      \n      return result as Ticket | null;\n    } catch (error: any) {\n      console.error('D1 archiveTicket error:', error);\n      throw new Error(`Database archive failed: ${error.message}`);\n    }\n  }\n\n  async updateTicketStatus(id: number, status: string): Promise<void> {\n    const now = new Date().toISOString();\n    await this.db.prepare('UPDATE tickets SET status = ?, updated_at = ? WHERE id = ?')\n      .bind(status, now, id)\n      .run();\n  }\n\n  async deleteTicket(id: number): Promise<void> {\n    // Delete messages first due to foreign key constraint\n    await this.db.prepare('DELETE FROM ticket_messages WHERE ticket_id = ?').bind(id).run();\n    await this.db.prepare('DELETE FROM tickets WHERE id = ?').bind(id).run();\n  }\n\n  async getTicketMessages(ticketId: number): Promise<TicketMessage[]> {\n    const result = await this.db.prepare('SELECT * FROM ticket_messages WHERE ticket_id = ? ORDER BY created_at ASC')\n      .bind(ticketId)\n      .all();\n    return result.results as TicketMessage[];\n  }\n\n  async addTicketMessage(message: Omit<TicketMessage, 'id' | 'created_at'>): Promise<TicketMessage> {\n    const now = new Date().toISOString();\n    \n    // Insert message\n    const result = await this.db.prepare(`\n      INSERT INTO ticket_messages (ticket_id, message, is_from_customer, sender_name, sender_email, created_at, attachments)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n      RETURNING *\n    `).bind(\n      message.ticket_id,\n      message.message,\n      message.is_from_customer ? 1 : 0,\n      message.sender_name,\n      message.sender_email || null,\n      now,\n      message.attachments || null\n    ).first();\n\n    // Update ticket timestamp\n    await this.db.prepare('UPDATE tickets SET updated_at = ? WHERE id = ?')\n      .bind(now, message.ticket_id)\n      .run();\n\n    return result as TicketMessage;\n  }\n}\n", "// Archive ticket endpoint for Cloudflare Pages Functions\nimport { TicketStorage } from '../../../lib/db';\n\ninterface Env {\n  DB: any;\n  EXPRESS_API_BASE?: string;\n}\n\nexport const onRequestPost = async ({ request, params, env }: { request: Request; params: { id: string }; env: Env }) => {\n  const ticketId = Number(params.id);\n\n  if (!ticketId || isNaN(ticketId)) {\n    return Response.json({ success: false, message: 'Invalid ticket ID' }, { status: 400 });\n  }\n\n  // Check if we should proxy to Express backend\n  if (env.EXPRESS_API_BASE) {\n    try {\n      const proxyUrl = `${env.EXPRESS_API_BASE}/api/tickets/${ticketId}/archive`;\n      const proxyResponse = await fetch(proxyUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': request.headers.get('Authorization') || '',\n        },\n      });\n      \n      const data = await proxyResponse.json();\n      return Response.json(data, { status: proxyResponse.status });\n    } catch (error) {\n      console.error('Express proxy error:', error);\n      // Fall through to D1 implementation\n    }\n  }\n\n  // Check if database is available\n  if (!env.DB) {\n    return Response.json({ success: false, message: 'Database not available' }, { status: 500 });\n  }\n\n  try {\n    const storage = new TicketStorage(env.DB);\n    \n    // Check if ticket exists\n    const existingTicket = await storage.getTicketById(ticketId);\n    if (!existingTicket) {\n      return Response.json({ success: false, message: 'Ticket not found' }, { status: 404 });\n    }\n\n    // Archive the ticket\n    const archivedTicket = await storage.archiveTicket(ticketId);\n    \n    if (!archivedTicket) {\n      return Response.json({ success: false, message: 'Failed to archive ticket' }, { status: 500 });\n    }\n\n    return Response.json({ \n      success: true, \n      message: 'Ticket archived successfully',\n      ticket: archivedTicket \n    });\n\n  } catch (error: any) {\n    console.error('Archive ticket error:', error);\n    return Response.json({ \n      success: false, \n      message: 'Failed to archive ticket',\n      error: error.message \n    }, { status: 500 });\n  }\n};\n", "/*\n Copyright (c) 2012 Nevins Bartolomeo <nevins.bartolomeo@gmail.com>\n Copyright (c) 2012 Shane Girish <shaneGirish@gmail.com>\n Copyright (c) 2025 Daniel Wirtz <dcode@dcode.io>\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n notice, this list of conditions and the following disclaimer in the\n documentation and/or other materials provided with the distribution.\n 3. The name of the author may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// The Node.js crypto module is used as a fallback for the Web Crypto API. When\n// building for the browser, inclusion of the crypto module should be disabled,\n// which the package hints at in its package.json for bundlers that support it.\nimport nodeCrypto from \"crypto\";\n\n/**\n * The random implementation to use as a fallback.\n * @type {?function(number):!Array.<number>}\n * @inner\n */\nvar randomFallback = null;\n\n/**\n * Generates cryptographically secure random bytes.\n * @function\n * @param {number} len Bytes length\n * @returns {!Array.<number>} Random bytes\n * @throws {Error} If no random implementation is available\n * @inner\n */\nfunction randomBytes(len) {\n  // Web Crypto API. Globally available in the browser and in Node.js >=23.\n  try {\n    return crypto.getRandomValues(new Uint8Array(len));\n  } catch {}\n  // Node.js crypto module for non-browser environments.\n  try {\n    return nodeCrypto.randomBytes(len);\n  } catch {}\n  // Custom fallback specified with `setRandomFallback`.\n  if (!randomFallback) {\n    throw Error(\n      \"Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative\",\n    );\n  }\n  return randomFallback(len);\n}\n\n/**\n * Sets the pseudo random number generator to use as a fallback if neither node's `crypto` module nor the Web Crypto\n *  API is available. Please note: It is highly important that the PRNG used is cryptographically secure and that it\n *  is seeded properly!\n * @param {?function(number):!Array.<number>} random Function taking the number of bytes to generate as its\n *  sole argument, returning the corresponding array of cryptographically secure random byte values.\n * @see http://nodejs.org/api/crypto.html\n * @see http://www.w3.org/TR/WebCryptoAPI/\n */\nexport function setRandomFallback(random) {\n  randomFallback = random;\n}\n\n/**\n * Synchronously generates a salt.\n * @param {number=} rounds Number of rounds to use, defaults to 10 if omitted\n * @param {number=} seed_length Not supported.\n * @returns {string} Resulting salt\n * @throws {Error} If a random fallback is required but not set\n */\nexport function genSaltSync(rounds, seed_length) {\n  rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;\n  if (typeof rounds !== \"number\")\n    throw Error(\n      \"Illegal arguments: \" + typeof rounds + \", \" + typeof seed_length,\n    );\n  if (rounds < 4) rounds = 4;\n  else if (rounds > 31) rounds = 31;\n  var salt = [];\n  salt.push(\"$2b$\");\n  if (rounds < 10) salt.push(\"0\");\n  salt.push(rounds.toString());\n  salt.push(\"$\");\n  salt.push(base64_encode(randomBytes(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw\n  return salt.join(\"\");\n}\n\n/**\n * Asynchronously generates a salt.\n * @param {(number|function(Error, string=))=} rounds Number of rounds to use, defaults to 10 if omitted\n * @param {(number|function(Error, string=))=} seed_length Not supported.\n * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting salt\n * @returns {!Promise} If `callback` has been omitted\n * @throws {Error} If `callback` is present but not a function\n */\nexport function genSalt(rounds, seed_length, callback) {\n  if (typeof seed_length === \"function\")\n    (callback = seed_length), (seed_length = undefined); // Not supported.\n  if (typeof rounds === \"function\") (callback = rounds), (rounds = undefined);\n  if (typeof rounds === \"undefined\") rounds = GENSALT_DEFAULT_LOG2_ROUNDS;\n  else if (typeof rounds !== \"number\")\n    throw Error(\"illegal arguments: \" + typeof rounds);\n\n  function _async(callback) {\n    nextTick(function () {\n      // Pretty thin, but salting is fast enough\n      try {\n        callback(null, genSaltSync(rounds));\n      } catch (err) {\n        callback(err);\n      }\n    });\n  }\n\n  if (callback) {\n    if (typeof callback !== \"function\")\n      throw Error(\"Illegal callback: \" + typeof callback);\n    _async(callback);\n  } else\n    return new Promise(function (resolve, reject) {\n      _async(function (err, res) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(res);\n      });\n    });\n}\n\n/**\n * Synchronously generates a hash for the given password.\n * @param {string} password Password to hash\n * @param {(number|string)=} salt Salt length to generate or salt to use, default to 10\n * @returns {string} Resulting hash\n */\nexport function hashSync(password, salt) {\n  if (typeof salt === \"undefined\") salt = GENSALT_DEFAULT_LOG2_ROUNDS;\n  if (typeof salt === \"number\") salt = genSaltSync(salt);\n  if (typeof password !== \"string\" || typeof salt !== \"string\")\n    throw Error(\"Illegal arguments: \" + typeof password + \", \" + typeof salt);\n  return _hash(password, salt);\n}\n\n/**\n * Asynchronously generates a hash for the given password.\n * @param {string} password Password to hash\n * @param {number|string} salt Salt length to generate or salt to use\n * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash\n * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\n *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n * @returns {!Promise} If `callback` has been omitted\n * @throws {Error} If `callback` is present but not a function\n */\nexport function hash(password, salt, callback, progressCallback) {\n  function _async(callback) {\n    if (typeof password === \"string\" && typeof salt === \"number\")\n      genSalt(salt, function (err, salt) {\n        _hash(password, salt, callback, progressCallback);\n      });\n    else if (typeof password === \"string\" && typeof salt === \"string\")\n      _hash(password, salt, callback, progressCallback);\n    else\n      nextTick(\n        callback.bind(\n          this,\n          Error(\"Illegal arguments: \" + typeof password + \", \" + typeof salt),\n        ),\n      );\n  }\n\n  if (callback) {\n    if (typeof callback !== \"function\")\n      throw Error(\"Illegal callback: \" + typeof callback);\n    _async(callback);\n  } else\n    return new Promise(function (resolve, reject) {\n      _async(function (err, res) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(res);\n      });\n    });\n}\n\n/**\n * Compares two strings of the same length in constant time.\n * @param {string} known Must be of the correct length\n * @param {string} unknown Must be the same length as `known`\n * @returns {boolean}\n * @inner\n */\nfunction safeStringCompare(known, unknown) {\n  var diff = known.length ^ unknown.length;\n  for (var i = 0; i < known.length; ++i) {\n    diff |= known.charCodeAt(i) ^ unknown.charCodeAt(i);\n  }\n  return diff === 0;\n}\n\n/**\n * Synchronously tests a password against a hash.\n * @param {string} password Password to compare\n * @param {string} hash Hash to test against\n * @returns {boolean} true if matching, otherwise false\n * @throws {Error} If an argument is illegal\n */\nexport function compareSync(password, hash) {\n  if (typeof password !== \"string\" || typeof hash !== \"string\")\n    throw Error(\"Illegal arguments: \" + typeof password + \", \" + typeof hash);\n  if (hash.length !== 60) return false;\n  return safeStringCompare(\n    hashSync(password, hash.substring(0, hash.length - 31)),\n    hash,\n  );\n}\n\n/**\n * Asynchronously tests a password against a hash.\n * @param {string} password Password to compare\n * @param {string} hashValue Hash to test against\n * @param {function(Error, boolean)=} callback Callback receiving the error, if any, otherwise the result\n * @param {function(number)=} progressCallback Callback successively called with the percentage of rounds completed\n *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n * @returns {!Promise} If `callback` has been omitted\n * @throws {Error} If `callback` is present but not a function\n */\nexport function compare(password, hashValue, callback, progressCallback) {\n  function _async(callback) {\n    if (typeof password !== \"string\" || typeof hashValue !== \"string\") {\n      nextTick(\n        callback.bind(\n          this,\n          Error(\n            \"Illegal arguments: \" + typeof password + \", \" + typeof hashValue,\n          ),\n        ),\n      );\n      return;\n    }\n    if (hashValue.length !== 60) {\n      nextTick(callback.bind(this, null, false));\n      return;\n    }\n    hash(\n      password,\n      hashValue.substring(0, 29),\n      function (err, comp) {\n        if (err) callback(err);\n        else callback(null, safeStringCompare(comp, hashValue));\n      },\n      progressCallback,\n    );\n  }\n\n  if (callback) {\n    if (typeof callback !== \"function\")\n      throw Error(\"Illegal callback: \" + typeof callback);\n    _async(callback);\n  } else\n    return new Promise(function (resolve, reject) {\n      _async(function (err, res) {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(res);\n      });\n    });\n}\n\n/**\n * Gets the number of rounds used to encrypt the specified hash.\n * @param {string} hash Hash to extract the used number of rounds from\n * @returns {number} Number of rounds used\n * @throws {Error} If `hash` is not a string\n */\nexport function getRounds(hash) {\n  if (typeof hash !== \"string\")\n    throw Error(\"Illegal arguments: \" + typeof hash);\n  return parseInt(hash.split(\"$\")[2], 10);\n}\n\n/**\n * Gets the salt portion from a hash. Does not validate the hash.\n * @param {string} hash Hash to extract the salt from\n * @returns {string} Extracted salt part\n * @throws {Error} If `hash` is not a string or otherwise invalid\n */\nexport function getSalt(hash) {\n  if (typeof hash !== \"string\")\n    throw Error(\"Illegal arguments: \" + typeof hash);\n  if (hash.length !== 60)\n    throw Error(\"Illegal hash length: \" + hash.length + \" != 60\");\n  return hash.substring(0, 29);\n}\n\n/**\n * Tests if a password will be truncated when hashed, that is its length is\n * greater than 72 bytes when converted to UTF-8.\n * @param {string} password The password to test\n * @returns {boolean} `true` if truncated, otherwise `false`\n */\nexport function truncates(password) {\n  if (typeof password !== \"string\")\n    throw Error(\"Illegal arguments: \" + typeof password);\n  return utf8Length(password) > 72;\n}\n\n/**\n * Continues with the callback on the next tick.\n * @function\n * @param {function(...[*])} callback Callback to execute\n * @inner\n */\nvar nextTick =\n  typeof process !== \"undefined\" &&\n  process &&\n  typeof process.nextTick === \"function\"\n    ? typeof setImmediate === \"function\"\n      ? setImmediate\n      : process.nextTick\n    : setTimeout;\n\n/** Calculates the byte length of a string encoded as UTF8. */\nfunction utf8Length(string) {\n  var len = 0,\n    c = 0;\n  for (var i = 0; i < string.length; ++i) {\n    c = string.charCodeAt(i);\n    if (c < 128) len += 1;\n    else if (c < 2048) len += 2;\n    else if (\n      (c & 0xfc00) === 0xd800 &&\n      (string.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      ++i;\n      len += 4;\n    } else len += 3;\n  }\n  return len;\n}\n\n/** Converts a string to an array of UTF8 bytes. */\nfunction utf8Array(string) {\n  var offset = 0,\n    c1,\n    c2;\n  var buffer = new Array(utf8Length(string));\n  for (var i = 0, k = string.length; i < k; ++i) {\n    c1 = string.charCodeAt(i);\n    if (c1 < 128) {\n      buffer[offset++] = c1;\n    } else if (c1 < 2048) {\n      buffer[offset++] = (c1 >> 6) | 192;\n      buffer[offset++] = (c1 & 63) | 128;\n    } else if (\n      (c1 & 0xfc00) === 0xd800 &&\n      ((c2 = string.charCodeAt(i + 1)) & 0xfc00) === 0xdc00\n    ) {\n      c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff);\n      ++i;\n      buffer[offset++] = (c1 >> 18) | 240;\n      buffer[offset++] = ((c1 >> 12) & 63) | 128;\n      buffer[offset++] = ((c1 >> 6) & 63) | 128;\n      buffer[offset++] = (c1 & 63) | 128;\n    } else {\n      buffer[offset++] = (c1 >> 12) | 224;\n      buffer[offset++] = ((c1 >> 6) & 63) | 128;\n      buffer[offset++] = (c1 & 63) | 128;\n    }\n  }\n  return buffer;\n}\n\n// A base64 implementation for the bcrypt algorithm. This is partly non-standard.\n\n/**\n * bcrypt's own non-standard base64 dictionary.\n * @type {!Array.<string>}\n * @const\n * @inner\n **/\nvar BASE64_CODE =\n  \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\n\n/**\n * @type {!Array.<number>}\n * @const\n * @inner\n **/\nvar BASE64_INDEX = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n  -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28,\n  29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1,\n];\n\n/**\n * Encodes a byte array to base64 with up to len bytes of input.\n * @param {!Array.<number>} b Byte array\n * @param {number} len Maximum input length\n * @returns {string}\n * @inner\n */\nfunction base64_encode(b, len) {\n  var off = 0,\n    rs = [],\n    c1,\n    c2;\n  if (len <= 0 || len > b.length) throw Error(\"Illegal len: \" + len);\n  while (off < len) {\n    c1 = b[off++] & 0xff;\n    rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);\n    c1 = (c1 & 0x03) << 4;\n    if (off >= len) {\n      rs.push(BASE64_CODE[c1 & 0x3f]);\n      break;\n    }\n    c2 = b[off++] & 0xff;\n    c1 |= (c2 >> 4) & 0x0f;\n    rs.push(BASE64_CODE[c1 & 0x3f]);\n    c1 = (c2 & 0x0f) << 2;\n    if (off >= len) {\n      rs.push(BASE64_CODE[c1 & 0x3f]);\n      break;\n    }\n    c2 = b[off++] & 0xff;\n    c1 |= (c2 >> 6) & 0x03;\n    rs.push(BASE64_CODE[c1 & 0x3f]);\n    rs.push(BASE64_CODE[c2 & 0x3f]);\n  }\n  return rs.join(\"\");\n}\n\n/**\n * Decodes a base64 encoded string to up to len bytes of output.\n * @param {string} s String to decode\n * @param {number} len Maximum output length\n * @returns {!Array.<number>}\n * @inner\n */\nfunction base64_decode(s, len) {\n  var off = 0,\n    slen = s.length,\n    olen = 0,\n    rs = [],\n    c1,\n    c2,\n    c3,\n    c4,\n    o,\n    code;\n  if (len <= 0) throw Error(\"Illegal len: \" + len);\n  while (off < slen - 1 && olen < len) {\n    code = s.charCodeAt(off++);\n    c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    code = s.charCodeAt(off++);\n    c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    if (c1 == -1 || c2 == -1) break;\n    o = (c1 << 2) >>> 0;\n    o |= (c2 & 0x30) >> 4;\n    rs.push(String.fromCharCode(o));\n    if (++olen >= len || off >= slen) break;\n    code = s.charCodeAt(off++);\n    c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    if (c3 == -1) break;\n    o = ((c2 & 0x0f) << 4) >>> 0;\n    o |= (c3 & 0x3c) >> 2;\n    rs.push(String.fromCharCode(o));\n    if (++olen >= len || off >= slen) break;\n    code = s.charCodeAt(off++);\n    c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    o = ((c3 & 0x03) << 6) >>> 0;\n    o |= c4;\n    rs.push(String.fromCharCode(o));\n    ++olen;\n  }\n  var res = [];\n  for (off = 0; off < olen; off++) res.push(rs[off].charCodeAt(0));\n  return res;\n}\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar BCRYPT_SALT_LEN = 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar BLOWFISH_NUM_ROUNDS = 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar MAX_EXECUTION_TIME = 100;\n\n/**\n * @type {Array.<number>}\n * @const\n * @inner\n */\nvar P_ORIG = [\n  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,\n  0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b,\n];\n\n/**\n * @type {Array.<number>}\n * @const\n * @inner\n */\nvar S_ORIG = [\n  0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,\n  0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,\n  0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658,\n  0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,\n  0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n  0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,\n  0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6,\n  0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,\n  0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c,\n  0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n  0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1,\n  0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,\n  0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a,\n  0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,\n  0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n  0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,\n  0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706,\n  0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,\n  0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b,\n  0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n  0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c,\n  0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,\n  0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a,\n  0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,\n  0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n  0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,\n  0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8,\n  0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,\n  0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33,\n  0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n  0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0,\n  0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,\n  0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777,\n  0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,\n  0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n  0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,\n  0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e,\n  0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,\n  0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9,\n  0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n  0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f,\n  0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,\n  0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a, 0x4b7a70e9, 0xb5b32944,\n  0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,\n  0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\n  0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,\n  0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086, 0x8470eb26,\n  0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,\n  0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c,\n  0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n  0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6,\n  0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,\n  0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f,\n  0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,\n  0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\n  0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,\n  0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa,\n  0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,\n  0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55,\n  0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n  0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1,\n  0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,\n  0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78,\n  0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,\n  0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\n  0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,\n  0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170,\n  0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,\n  0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7,\n  0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n  0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099,\n  0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,\n  0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263,\n  0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,\n  0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\n  0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,\n  0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7,\n  0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,\n  0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d,\n  0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n  0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460,\n  0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,\n  0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e447a2e, 0xc3453484,\n  0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,\n  0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\n  0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,\n  0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a,\n  0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,\n  0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785,\n  0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n  0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900,\n  0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,\n  0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9,\n  0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,\n  0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\n  0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,\n  0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9,\n  0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,\n  0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f,\n  0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n  0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e,\n  0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,\n  0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd,\n  0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,\n  0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\n  0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,\n  0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c,\n  0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,\n  0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b,\n  0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n  0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386,\n  0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,\n  0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0,\n  0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,\n  0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\n  0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,\n  0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770,\n  0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,\n  0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c,\n  0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n  0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa,\n  0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,\n  0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63,\n  0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,\n  0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\n  0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,\n  0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4,\n  0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,\n  0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742,\n  0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n  0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79,\n  0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,\n  0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a,\n  0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,\n  0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n  0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,\n  0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,\n  0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,\n  0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6,\n  0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n  0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba,\n  0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,\n  0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5,\n  0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,\n  0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n  0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,\n  0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd,\n  0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,\n  0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb,\n  0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n  0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc,\n  0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,\n  0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,\n  0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,\n  0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n  0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,\n  0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a,\n  0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,\n  0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b,\n  0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n  0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e,\n  0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,\n  0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,\n  0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,\n  0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n  0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,\n  0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3,\n  0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,\n  0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c,\n  0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n  0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6,\n];\n\n/**\n * @type {Array.<number>}\n * @const\n * @inner\n */\nvar C_ORIG = [\n  0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944, 0x6f756274,\n];\n\n/**\n * @param {Array.<number>} lr\n * @param {number} off\n * @param {Array.<number>} P\n * @param {Array.<number>} S\n * @returns {Array.<number>}\n * @inner\n */\nfunction _encipher(lr, off, P, S) {\n  // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt\n  var n,\n    l = lr[off],\n    r = lr[off + 1];\n\n  l ^= P[0];\n\n  /*\n    for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)\n        // Feistel substitution on left word\n        n  = S[l >>> 24],\n        n += S[0x100 | ((l >> 16) & 0xff)],\n        n ^= S[0x200 | ((l >> 8) & 0xff)],\n        n += S[0x300 | (l & 0xff)],\n        r ^= n ^ P[++i],\n        // Feistel substitution on right word\n        n  = S[r >>> 24],\n        n += S[0x100 | ((r >> 16) & 0xff)],\n        n ^= S[0x200 | ((r >> 8) & 0xff)],\n        n += S[0x300 | (r & 0xff)],\n        l ^= n ^ P[++i];\n    */\n\n  //The following is an unrolled version of the above loop.\n  //Iteration 0\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[1];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[2];\n  //Iteration 1\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[3];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[4];\n  //Iteration 2\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[5];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[6];\n  //Iteration 3\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[7];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[8];\n  //Iteration 4\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[9];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[10];\n  //Iteration 5\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[11];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[12];\n  //Iteration 6\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[13];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[14];\n  //Iteration 7\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[15];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[16];\n\n  lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n  lr[off + 1] = l;\n  return lr;\n}\n\n/**\n * @param {Array.<number>} data\n * @param {number} offp\n * @returns {{key: number, offp: number}}\n * @inner\n */\nfunction _streamtoword(data, offp) {\n  for (var i = 0, word = 0; i < 4; ++i)\n    (word = (word << 8) | (data[offp] & 0xff)),\n      (offp = (offp + 1) % data.length);\n  return { key: word, offp: offp };\n}\n\n/**\n * @param {Array.<number>} key\n * @param {Array.<number>} P\n * @param {Array.<number>} S\n * @inner\n */\nfunction _key(key, P, S) {\n  var offset = 0,\n    lr = [0, 0],\n    plen = P.length,\n    slen = S.length,\n    sw;\n  for (var i = 0; i < plen; i++)\n    (sw = _streamtoword(key, offset)),\n      (offset = sw.offp),\n      (P[i] = P[i] ^ sw.key);\n  for (i = 0; i < plen; i += 2)\n    (lr = _encipher(lr, 0, P, S)), (P[i] = lr[0]), (P[i + 1] = lr[1]);\n  for (i = 0; i < slen; i += 2)\n    (lr = _encipher(lr, 0, P, S)), (S[i] = lr[0]), (S[i + 1] = lr[1]);\n}\n\n/**\n * Expensive key schedule Blowfish.\n * @param {Array.<number>} data\n * @param {Array.<number>} key\n * @param {Array.<number>} P\n * @param {Array.<number>} S\n * @inner\n */\nfunction _ekskey(data, key, P, S) {\n  var offp = 0,\n    lr = [0, 0],\n    plen = P.length,\n    slen = S.length,\n    sw;\n  for (var i = 0; i < plen; i++)\n    (sw = _streamtoword(key, offp)), (offp = sw.offp), (P[i] = P[i] ^ sw.key);\n  offp = 0;\n  for (i = 0; i < plen; i += 2)\n    (sw = _streamtoword(data, offp)),\n      (offp = sw.offp),\n      (lr[0] ^= sw.key),\n      (sw = _streamtoword(data, offp)),\n      (offp = sw.offp),\n      (lr[1] ^= sw.key),\n      (lr = _encipher(lr, 0, P, S)),\n      (P[i] = lr[0]),\n      (P[i + 1] = lr[1]);\n  for (i = 0; i < slen; i += 2)\n    (sw = _streamtoword(data, offp)),\n      (offp = sw.offp),\n      (lr[0] ^= sw.key),\n      (sw = _streamtoword(data, offp)),\n      (offp = sw.offp),\n      (lr[1] ^= sw.key),\n      (lr = _encipher(lr, 0, P, S)),\n      (S[i] = lr[0]),\n      (S[i + 1] = lr[1]);\n}\n\n/**\n * Internaly crypts a string.\n * @param {Array.<number>} b Bytes to crypt\n * @param {Array.<number>} salt Salt bytes to use\n * @param {number} rounds Number of rounds\n * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If\n *  omitted, the operation will be performed synchronously.\n *  @param {function(number)=} progressCallback Callback called with the current progress\n * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`\n * @inner\n */\nfunction _crypt(b, salt, rounds, callback, progressCallback) {\n  var cdata = C_ORIG.slice(),\n    clen = cdata.length,\n    err;\n\n  // Validate\n  if (rounds < 4 || rounds > 31) {\n    err = Error(\"Illegal number of rounds (4-31): \" + rounds);\n    if (callback) {\n      nextTick(callback.bind(this, err));\n      return;\n    } else throw err;\n  }\n  if (salt.length !== BCRYPT_SALT_LEN) {\n    err = Error(\n      \"Illegal salt length: \" + salt.length + \" != \" + BCRYPT_SALT_LEN,\n    );\n    if (callback) {\n      nextTick(callback.bind(this, err));\n      return;\n    } else throw err;\n  }\n  rounds = (1 << rounds) >>> 0;\n\n  var P,\n    S,\n    i = 0,\n    j;\n\n  //Use typed arrays when available - huge speedup!\n  if (typeof Int32Array === \"function\") {\n    P = new Int32Array(P_ORIG);\n    S = new Int32Array(S_ORIG);\n  } else {\n    P = P_ORIG.slice();\n    S = S_ORIG.slice();\n  }\n\n  _ekskey(salt, b, P, S);\n\n  /**\n   * Calcualtes the next round.\n   * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`\n   * @inner\n   */\n  function next() {\n    if (progressCallback) progressCallback(i / rounds);\n    if (i < rounds) {\n      var start = Date.now();\n      for (; i < rounds; ) {\n        i = i + 1;\n        _key(b, P, S);\n        _key(salt, P, S);\n        if (Date.now() - start > MAX_EXECUTION_TIME) break;\n      }\n    } else {\n      for (i = 0; i < 64; i++)\n        for (j = 0; j < clen >> 1; j++) _encipher(cdata, j << 1, P, S);\n      var ret = [];\n      for (i = 0; i < clen; i++)\n        ret.push(((cdata[i] >> 24) & 0xff) >>> 0),\n          ret.push(((cdata[i] >> 16) & 0xff) >>> 0),\n          ret.push(((cdata[i] >> 8) & 0xff) >>> 0),\n          ret.push((cdata[i] & 0xff) >>> 0);\n      if (callback) {\n        callback(null, ret);\n        return;\n      } else return ret;\n    }\n    if (callback) nextTick(next);\n  }\n\n  // Async\n  if (typeof callback !== \"undefined\") {\n    next();\n\n    // Sync\n  } else {\n    var res;\n    while (true) if (typeof (res = next()) !== \"undefined\") return res || [];\n  }\n}\n\n/**\n * Internally hashes a password.\n * @param {string} password Password to hash\n * @param {?string} salt Salt to use, actually never null\n * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,\n *  hashing is performed synchronously.\n *  @param {function(number)=} progressCallback Callback called with the current progress\n * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`\n * @inner\n */\nfunction _hash(password, salt, callback, progressCallback) {\n  var err;\n  if (typeof password !== \"string\" || typeof salt !== \"string\") {\n    err = Error(\"Invalid string / salt: Not a string\");\n    if (callback) {\n      nextTick(callback.bind(this, err));\n      return;\n    } else throw err;\n  }\n\n  // Validate the salt\n  var minor, offset;\n  if (salt.charAt(0) !== \"$\" || salt.charAt(1) !== \"2\") {\n    err = Error(\"Invalid salt version: \" + salt.substring(0, 2));\n    if (callback) {\n      nextTick(callback.bind(this, err));\n      return;\n    } else throw err;\n  }\n  if (salt.charAt(2) === \"$\") (minor = String.fromCharCode(0)), (offset = 3);\n  else {\n    minor = salt.charAt(2);\n    if (\n      (minor !== \"a\" && minor !== \"b\" && minor !== \"y\") ||\n      salt.charAt(3) !== \"$\"\n    ) {\n      err = Error(\"Invalid salt revision: \" + salt.substring(2, 4));\n      if (callback) {\n        nextTick(callback.bind(this, err));\n        return;\n      } else throw err;\n    }\n    offset = 4;\n  }\n\n  // Extract number of rounds\n  if (salt.charAt(offset + 2) > \"$\") {\n    err = Error(\"Missing salt rounds\");\n    if (callback) {\n      nextTick(callback.bind(this, err));\n      return;\n    } else throw err;\n  }\n  var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10,\n    r2 = parseInt(salt.substring(offset + 1, offset + 2), 10),\n    rounds = r1 + r2,\n    real_salt = salt.substring(offset + 3, offset + 25);\n  password += minor >= \"a\" ? \"\\x00\" : \"\";\n\n  var passwordb = utf8Array(password),\n    saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);\n\n  /**\n   * Finishes hashing.\n   * @param {Array.<number>} bytes Byte array\n   * @returns {string}\n   * @inner\n   */\n  function finish(bytes) {\n    var res = [];\n    res.push(\"$2\");\n    if (minor >= \"a\") res.push(minor);\n    res.push(\"$\");\n    if (rounds < 10) res.push(\"0\");\n    res.push(rounds.toString());\n    res.push(\"$\");\n    res.push(base64_encode(saltb, saltb.length));\n    res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));\n    return res.join(\"\");\n  }\n\n  // Sync\n  if (typeof callback == \"undefined\")\n    return finish(_crypt(passwordb, saltb, rounds));\n  // Async\n  else {\n    _crypt(\n      passwordb,\n      saltb,\n      rounds,\n      function (err, bytes) {\n        if (err) callback(err, null);\n        else callback(null, finish(bytes));\n      },\n      progressCallback,\n    );\n  }\n}\n\n/**\n * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.\n * @function\n * @param {!Array.<number>} bytes Byte array\n * @param {number} length Maximum input length\n * @returns {string}\n */\nexport function encodeBase64(bytes, length) {\n  return base64_encode(bytes, length);\n}\n\n/**\n * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.\n * @function\n * @param {string} string String to decode\n * @param {number} length Maximum output length\n * @returns {!Array.<number>}\n */\nexport function decodeBase64(string, length) {\n  return base64_decode(string, length);\n}\n\nexport default {\n  setRandomFallback,\n  genSaltSync,\n  genSalt,\n  hashSync,\n  hash,\n  compareSync,\n  compare,\n  getRounds,\n  getSalt,\n  truncates,\n  encodeBase64,\n  decodeBase64,\n};\n", "import type { D1Database } from '@cloudflare/workers-types';\nimport bcrypt from 'bcryptjs';\n\nexport interface User {\n  id: number;\n  email: string;\n  name: string;\n  password?: string;\n}\n\nexport class UserStorage {\n  constructor(private db: D1Database) {}\n\n  async getAllCustomers(): Promise<any[]> {\n    try {\n      const customers = await this.db.prepare(`\n        SELECT id, email, name, is_premium, extension_activated, total_spent, total_orders, created_at\n        FROM customers \n        ORDER BY created_at DESC\n      `).all();\n      return customers.results || [];\n    } catch (error) {\n      console.error('Failed to get all customers:', error);\n      return [];\n    }\n  }\n\n  async initializeUsers(): Promise<void> {\n    try {\n      await this.db.prepare(`\n        CREATE TABLE IF NOT EXISTS users (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          email TEXT UNIQUE NOT NULL,\n          password TEXT, -- Nullable for social logins\n          name TEXT NOT NULL,\n          role TEXT DEFAULT 'customer' NOT NULL,\n          provider TEXT,\n          provider_id TEXT,\n          is_premium BOOLEAN DEFAULT 0,\n          extension_activated BOOLEAN DEFAULT 0,\n          premium_activated_at TEXT,\n          total_spent REAL DEFAULT 0,\n          total_orders INTEGER DEFAULT 0,\n          created_at TEXT NOT NULL DEFAULT (datetime('now')),\n          updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n        )\n      `).run();\n    } catch (error) {\n      console.error('Failed to initialize users table:', error);\n      throw new Error('Database initialization failed.');\n    }\n  }\n\n    async createUser(email: string, password: string, name: string): Promise<User> {\n    const hashedPassword = bcrypt.hashSync(password, 10);\n    const now = new Date().toISOString();\n    try {\n      const result = await this.db.prepare(`\n        INSERT INTO users (email, name, password, created_at, updatedAt)\n        VALUES (?, ?, ?, datetime('now'), datetime('now'))\n      `).bind(email, name, hashedPassword).run();\n\n      const userId = result.meta.last_row_id;\n      if (!userId) {\n        throw new Error('Failed to get user ID after creation.');\n      }\n\n      const newUser = await this.getUserById(userId);\n      if (!newUser) {\n        throw new Error('Could not retrieve newly created user.');\n      }\n      return newUser;\n\n    } catch (error) {\n      console.error('Failed to create user:', error);\n      throw error; // Re-throw to be handled by the caller\n    }\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    try {\n      const user = await this.db.prepare(\n        'SELECT * FROM users WHERE email = ?'\n      ).bind(email).first<User>();\n      return user || null;\n    } catch (error) {\n      console.error('Failed to get user by email:', error);\n      return null;\n    }\n  }\n\n    async validateUser(email: string, password: string): Promise<Omit<User, 'password'> | null> {\n    try {\n      const user = await this.getUserByEmail(email);\n      if (user && user.password && bcrypt.compareSync(password, user.password)) {\n        const { password: _, ...userWithoutPassword } = user;\n        return userWithoutPassword;\n      }\n      return null;\n    } catch (error) {\n      console.error('Failed to validate user:', error);\n      return null;\n    }\n  }\n\n  async getUserById(id: number): Promise<User | null> {\n    try {\n      const user = await this.db.prepare(\n        'SELECT * FROM users WHERE id = ?'\n      ).bind(id).first<User>();\n      return user || null;\n    } catch (error) {\n      console.error('Failed to get user by ID:', error);\n      return null;\n    }\n  }\n}\n", "import { TicketStorage, Env } from '../../../lib/db';\n\ninterface MessagePayload {\n  content?: string;\n  message?: string;\n  customerEmail?: string;\n  customerName?: string;\n  isAdmin?: boolean;\n}\nimport { UserStorage } from '../../../lib/user-storage';\nimport type { D1Database } from '@cloudflare/workers-types';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestPost = async ({ request, params, env }: { request: Request; params: { id: string }; env: Env }) => {\n  try {\n    const ticketId = Number(params.id);\n    // If EXPRESS_API_BASE is configured, proxy the request to Express (preserves persistence and auth via cookies)\n    const expressBase: string | undefined = env?.EXPRESS_API_BASE;\n    if (expressBase) {\n      const base = expressBase.replace(/\\/$/, \"\");\n      const url = `${base}/api/tickets/${ticketId}/messages`;\n      const headers: Record<string, string> = {};\n      const cookie = request.headers.get('cookie');\n      const ct = request.headers.get('content-type');\n      const auth = request.headers.get('authorization');\n      if (cookie) headers['cookie'] = cookie;\n      if (ct) headers['content-type'] = ct;\n      if (auth) headers['authorization'] = auth;\n      const proxied = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: request.body,\n        redirect: 'manual',\n      });\n      // Rewrite Set-Cookie to scope to current host\n      const respHeaders = new Headers(proxied.headers);\n      const setCookie = respHeaders.get('set-cookie');\n      if (setCookie) {\n        const rewritten = setCookie.replace(/;\\s*Domain=[^;]+/i, '');\n        respHeaders.delete('set-cookie');\n        respHeaders.append('set-cookie', rewritten);\n      }\n      return new Response(proxied.body, { status: proxied.status, headers: respHeaders });\n    }\n    // Robust body parsing: JSON -> FormData -> Text\n    let content: string | undefined;\n    let customerEmail: string | undefined;\n    let customerName: string | undefined;\n    let isAdmin: boolean | undefined;\n    let attachmentData: string | undefined;\n\n    const ct = request.headers.get('content-type') || '';\n    try {\n      if (ct.includes('application/json')) {\n        const body = await request.json() as MessagePayload;\n        content = body?.content ?? body?.message;\n        customerEmail = body?.customerEmail;\n        customerName = body?.customerName;\n        isAdmin = !!body?.isAdmin;\n      } else if (ct.includes('multipart/form-data')) {\n        const form = await request.formData();\n        const raw = form.get('content') ?? form.get('message');\n        content = typeof raw === 'string' ? raw : undefined;\n        const ce = form.get('customerEmail');\n        customerEmail = typeof ce === 'string' ? ce : undefined;\n        const cn = form.get('customerName');\n        customerName = typeof cn === 'string' ? cn : undefined;\n        const ia = form.get('isAdmin');\n        isAdmin = typeof ia === 'string' ? ia === 'true' : false;\n        \n        // Process file attachments\n        const attachments: Array<{name: string; type: string; size: number}> = [];\n        for (const [key, value] of form.entries()) {\n          if (key.startsWith('attachment_') && value instanceof File) {\n            attachments.push({\n              name: value.name,\n              type: value.type,\n              size: value.size\n            });\n          }\n        }\n        \n        // Store attachment metadata as JSON string\n        if (attachments.length > 0) {\n          content = content || '[File attachment]';\n          attachmentData = JSON.stringify(attachments);\n        }\n      } else {\n        // Try JSON first, then text fallback\n        try {\n          const body = await request.json() as MessagePayload;\n          content = body?.content ?? body?.message;\n          customerEmail = body?.customerEmail;\n          customerName = body?.customerName;\n          isAdmin = !!body?.isAdmin;\n        } catch {\n          const text = await request.text();\n          // If plain text, treat as content\n          content = text || undefined;\n        }\n      }\n    } catch {\n      // As last resort, try reading text\n      const text = await request.text();\n      content = text || undefined;\n    }\n\n    content = typeof content === 'string' ? content.trim() : content;\n    \n    // Allow empty content if there are attachments (files/images)\n    const hasAttachments = request.headers.get('content-type')?.includes('multipart/form-data');\n    if (!content && !hasAttachments) {\n      return json({ success: false, message: 'Missing content' }, 400);\n    }\n    \n    // Set default content for attachment-only messages\n    if (!content && hasAttachments) {\n      content = '[File attachment]';\n    }\n\n    const storage = new TicketStorage(env.DB);\n    const ticket = await storage.getTicketById(ticketId);\n    // Degrade to 200 to prevent client hard-failures; keep informative payload\n    if (!ticket) return json({ success: false, message: 'Ticket not found' }, 200);\n\n    let finalSenderName = customerName;\n    \n    // If we don't have customerName but have customerEmail, try to fetch from user storage\n    if (!customerName && customerEmail && !isAdmin) {\n      try {\n        const userStorage = new UserStorage(env.DB as D1Database);\n        await userStorage.initializeUsers();\n        const user = await userStorage.getUserByEmail(customerEmail);\n        if (user) {\n          finalSenderName = user.name;\n        }\n      } catch (error) {\n        console.error('Failed to fetch user name for message:', error);\n      }\n    }\n\n    const msg = await storage.addTicketMessage({\n      ticket_id: ticketId,\n      message: content || '[File attachment]',\n      is_from_customer: !isAdmin,\n      sender_name: finalSenderName || (isAdmin ? 'Admin' : ticket.customer_name),\n      sender_email: customerEmail || (isAdmin ? undefined : ticket.customer_email),\n      attachments: attachmentData,\n    });\n\n    return json({ success: true, message: msg });\n  } catch (error) {\n    console.error('Failed to add message:', error);\n    const message = error instanceof Error ? error.message : 'An unknown error occurred';\n    return json({ success: false, message }, 500);\n  }\n};\n\nexport const onRequestGet = async ({ request, params, env }: { request: Request; params: { id: string }; env: Env }) => {\n  const ticketId = Number(params.id);\n  // If EXPRESS_API_BASE is configured, proxy the GET to Express to read from DB\n  const expressBase: string | undefined = env?.EXPRESS_API_BASE;\n  if (expressBase) {\n    const base = expressBase.replace(/\\/$/, \"\");\n    const url = `${base}/api/tickets/${ticketId}/messages`;\n    const headers: Record<string, string> = {};\n    const cookie = request.headers.get('cookie');\n    const auth = request.headers.get('authorization');\n    if (cookie) headers['cookie'] = cookie;\n    if (auth) headers['authorization'] = auth;\n    const proxied = await fetch(url, { headers, redirect: 'manual' });\n    const respHeaders = new Headers(proxied.headers);\n    const setCookie = respHeaders.get('set-cookie');\n    if (setCookie) {\n      const rewritten = setCookie.replace(/;\\s*Domain=[^;]+/i, '');\n      respHeaders.delete('set-cookie');\n      respHeaders.append('set-cookie', rewritten);\n    }\n    return new Response(proxied.body, { status: proxied.status, headers: respHeaders });\n  }\n\n  const storage = new TicketStorage(env.DB);\n  const messages = await storage.getTicketMessages(ticketId);\n  // Map to admin UI shape\n  const mapped = messages.map((m) => ({\n    id: m.id,\n    ticketId: m.ticket_id,\n    content: m.message,\n    isAdmin: !m.is_from_customer,\n    authorName: m.sender_name,\n    createdAt: m.created_at,\n    attachments: [],\n  }));\n  return json(mapped);\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "// Update only the status of a ticket: /api/tickets/:id/status\n\nfunction getStore() {\n  const s: any = (globalThis as any).__TICKET_STORE__;\n  if (!s) {\n    (globalThis as any).__TICKET_STORE__ = { tickets: [], messages: new Map(), seq: 1, msgSeq: 1 };\n  }\n  return (globalThis as any).__TICKET_STORE__ as {\n    tickets: any[];\n    messages: Map<number, any[]>;\n    seq: number;\n    msgSeq: number;\n  };\n}\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nfunction toInternalStatus(input: string) {\n  // UI uses: open | in_progress | closed\n  // Store uses: open | in-progress | resolved | closed\n  if (input === 'in_progress') return 'in-progress';\n  if (input === 'closed') return 'closed';\n  return input || 'open';\n}\n\nexport const onRequestPut = async ({ request, params, env }: any) => {\n  try {\n    const ticketId = Number(params.id);\n    const expressBase: string | undefined = env?.EXPRESS_API_BASE;\n    if (expressBase) {\n      const base = expressBase.replace(/\\/$/, \"\");\n      const url = `${base}/api/tickets/${ticketId}/status`;\n      const headers: Record<string, string> = {};\n      const cookie = request.headers.get('cookie');\n      const ct = request.headers.get('content-type');\n      const auth = request.headers.get('authorization');\n      if (cookie) headers['cookie'] = cookie;\n      if (ct) headers['content-type'] = ct;\n      if (auth) headers['authorization'] = auth;\n      const proxied = await fetch(url, { method: 'PUT', headers, body: request.body, redirect: 'manual' });\n      const respHeaders = new Headers(proxied.headers);\n      const setCookie = respHeaders.get('set-cookie');\n      if (setCookie) {\n        const rewritten = setCookie.replace(/;\\s*Domain=[^;]+/i, '');\n        respHeaders.delete('set-cookie');\n        respHeaders.append('set-cookie', rewritten);\n      }\n      return new Response(proxied.body, { status: proxied.status, headers: respHeaders });\n    }\n    const body = await request.json().catch(() => ({}));\n    const status = body?.status;\n    if (!status) return json({ success: false, message: 'Missing status' }, 400);\n\n    const store = getStore();\n    const idx = store.tickets.findIndex((t) => t.id === ticketId);\n    if (idx === -1) return json({ success: false, message: 'Ticket not found' }, 404);\n\n    const now = new Date().toISOString();\n    store.tickets[idx] = {\n      ...store.tickets[idx],\n      status: toInternalStatus(status),\n      updated_at: now,\n    };\n\n    return json({ success: true, ticket: store.tickets[idx] });\n  } catch (e) {\n    return json({ success: false, message: 'Failed to update status' }, 500);\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'PUT, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "// Cloudflare Pages Function: /api/user/[id]/purchase-status\n// Handles user purchase status retrieval\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, params, env }) => {\n  try {\n    const userId = params.id as string;\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return json({\n        hasPurchased: false,\n        totalSpent: '0.00',\n        completedOrders: 0,\n        lastPurchaseDate: null\n      });\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Handle demo-jwt-token or jwt-token-1-* format\n    if (token === 'demo-jwt-token' || (token.startsWith('jwt-token-') && token.split('-')[2] === '1')) {\n      return json({\n        hasPurchased: true,\n        totalSpent: '29.99',\n        completedOrders: 1,\n        lastPurchaseDate: Date.now()\n      });\n    }\n    \n    // Check database for real customer purchases\n    if (!env.DB) {\n      return json({\n        hasPurchased: false,\n        totalSpent: '0.00',\n        completedOrders: 0,\n        lastPurchaseDate: null\n      });\n    }\n\n    try {\n      // Parse email from token\n      if (!token.startsWith('jwt-token-')) {\n        return json({\n          hasPurchased: false,\n          totalSpent: '0.00',\n          completedOrders: 0,\n          lastPurchaseDate: null\n        }, 401);\n      }\n\n      const parts = token.split('-');\n      if (parts.length < 3) {\n        return json({\n          hasPurchased: false,\n          totalSpent: '0.00',\n          completedOrders: 0,\n          lastPurchaseDate: null\n        }, 401);\n      }\n\n      const email = parts[2];\n\n      // First check users table (registered users)\n      const user = await env.DB.prepare(`\n        SELECT id, email, extension_activated, is_premium\n        FROM users WHERE email = ?\n      `).bind(email).first<{ id: number; email: string; extension_activated: number; is_premium: number }>();\n\n      // If not found in users, check customers table\n      const customer = user ? null : await env.DB.prepare(`\n        SELECT id, email, extension_activated\n        FROM customers WHERE email = ?\n      `).bind(email).first<{ id: number; email: string; extension_activated: number }>();\n\n      if (!user && !customer) {\n        return json({\n          hasPurchased: false,\n          totalSpent: '0.00',\n          completedOrders: 0,\n          lastPurchaseDate: null\n        });\n      }\n\n      const hasPremiumStatus = (user?.is_premium === 1) || Boolean(customer?.extension_activated);\n      const hasExtensionActivated = (user?.extension_activated === 1) || Boolean(customer?.extension_activated);\n\n      // Check completed orders using customer_email\n      const orderStats = await env.DB.prepare(`\n        SELECT COUNT(*) as completedOrders, \n               SUM(final_amount) as totalPaid,\n               MAX(completed_at) as lastPurchaseDate\n        FROM orders \n        WHERE customer_email = ? AND status = 'completed' AND final_amount > 0\n      `).bind(email).first<{ completedOrders: number; totalPaid: string; lastPurchaseDate: string | number | null }>();\n\n      const completedOrders = Number(orderStats?.completedOrders || 0);\n      const totalPaid = String(orderStats?.totalPaid || '0.00');\n      const lastPurchaseDate = orderStats?.lastPurchaseDate;\n\n      const hasPurchased = (completedOrders > 0 && parseFloat(totalPaid || '0') > 0) || (hasPremiumStatus || hasExtensionActivated);\n\n      return json({\n        hasPurchased,\n        totalSpent: totalPaid,\n        completedOrders,\n        lastPurchaseDate: lastPurchaseDate ? new Date(String(lastPurchaseDate)).getTime() : null\n      });\n\n    } catch (dbError) {\n      console.error('Database error in purchase-status:', dbError);\n      return json({\n        hasPurchased: false,\n        totalSpent: '0.00',\n        completedOrders: 0,\n        lastPurchaseDate: null\n      });\n    }\n    \n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../../lib/context';\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    // Authorization header\n    const authHeader = context.request.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), {\n        status: 401,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    const token = authHeader.substring(7);\n\n    // Demo token -> return mock camelCase invoice\n    if (token === 'demo-jwt-token') {\n      const demoInvoice = {\n        id: 1,\n        invoiceNumber: 'INV-2025-000001',\n        orderId: 1,\n        customerName: 'Demo User',\n        customerEmail: 'demo@example.com',\n        invoiceDate: new Date().toISOString(),\n        dueDate: new Date().toISOString(),\n        subtotal: '29.99',\n        taxAmount: '0.00',\n        discountAmount: '0.00',\n        totalAmount: '29.99',\n        currency: 'USD',\n        status: 'paid',\n        paidAt: new Date().toISOString(),\n        notes: 'Premium extension purchase',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        paymentMethod: 'stripe'\n      };\n      return new Response(JSON.stringify([demoInvoice]), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    // Real tokens: jwt-token-{email}-{timestamp}\n    if (!token.startsWith('jwt-token-')) {\n      return new Response(JSON.stringify({ error: 'Invalid token' }), {\n        status: 401,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    const parts = token.split('-');\n    if (parts.length < 3) {\n      return new Response(JSON.stringify({ error: 'Invalid token format' }), {\n        status: 401,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n    const userEmail = parts[2];\n\n    if (!context.env.DB) {\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    const query = `\n      SELECT \n        i.id AS id,\n        i.invoice_number AS invoiceNumber,\n        i.order_id AS orderId,\n        i.customer_name AS customerName,\n        i.customer_email AS customerEmail,\n        i.invoice_date AS invoiceDate,\n        i.due_date AS dueDate,\n        i.subtotal AS subtotal,\n        i.tax_amount AS taxAmount,\n        i.discount_amount AS discountAmount,\n        i.total_amount AS totalAmount,\n        i.currency AS currency,\n        i.status AS status,\n        i.paid_at AS paidAt,\n        i.notes AS notes,\n        i.created_at AS createdAt,\n        i.updated_at AS updatedAt,\n        o.payment_method AS paymentMethod\n      FROM invoices i\n      LEFT JOIN orders o ON i.order_id = o.id\n      WHERE i.customer_email = ?\n      ORDER BY i.created_at DESC\n    `;\n\n    try {\n      const result = await context.env.DB.prepare(query).bind(userEmail).all();\n      const invoices = result.results || [];\n      return new Response(JSON.stringify(invoices), {\n        status: 200,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    } catch (dbErr) {\n      console.error('DB error in /api/user/[userId]/invoices:', dbErr);\n      return new Response(JSON.stringify({ error: 'Database error' }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching user invoices:', error);\n    return new Response(JSON.stringify({ error: 'Failed to fetch invoices' }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    }\n  });\n};\n", "interface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const { params } = context;\n    const userId = params.userId as string;\n\n    if (!userId) {\n      return new Response(JSON.stringify({ error: 'User ID is required' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Fetch user orders from database\n    const ordersQuery = `\n      SELECT \n        id,\n        customerEmail,\n        customerName,\n        productId,\n        originalAmount,\n        finalAmount,\n        currency,\n        status,\n        paymentMethod,\n        downloadToken,\n        downloadCount,\n        maxDownloads,\n        activationCode,\n        createdAt,\n        completedAt\n      FROM orders \n      WHERE customerEmail = (SELECT email FROM users WHERE id = ?)\n      ORDER BY createdAt DESC\n    `;\n\n    const ordersResult = await context.env.DB.prepare(ordersQuery).bind(userId).all();\n    \n    return new Response(JSON.stringify(ordersResult.results || []), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching user orders:', error);\n    return new Response(JSON.stringify({ error: 'Failed to fetch orders' }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\ninterface UserEmail {\n  email: string;\n}\n\ninterface PurchaseStatus {\n  completedOrders: number;\n  totalSpent: number;\n  lastPurchaseDate: string | null;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const { params } = context;\n    const userId = params.userId as string;\n\n    if (!userId) {\n      return new Response(JSON.stringify({ error: 'User ID is required' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Always return default values if database is not available\n    if (!context.env.DB) {\n      return new Response(JSON.stringify({ \n        hasPurchased: false,\n        totalSpent: '0.00',\n        completedOrders: 0,\n        lastPurchaseDate: null\n      }), {\n        status: 200,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Get user email from customers table first, then users table as fallback\n    let userResult: UserEmail | null = null;\n    \n    try {\n      // Try customers table first with different column name variations\n      try {\n        const customerQuery = `SELECT email FROM customers WHERE id = ?`;\n        userResult = await context.env.DB.prepare(customerQuery).bind(userId).first<UserEmail>();\n      } catch (e) {\n        // Try with different column names\n        try {\n          const customerQuery = `SELECT email FROM customers WHERE id = ?`;\n          userResult = await context.env.DB.prepare(customerQuery).bind(parseInt(userId)).first<UserEmail>();\n        } catch (e2) {\n          console.log('Customers table query failed');\n        }\n      }\n      \n      // Fallback to users table if not found in customers\n      if (!userResult) {\n        try {\n          const usersQuery = `SELECT email FROM users WHERE id = ?`;\n          userResult = await context.env.DB.prepare(usersQuery).bind(userId).first<UserEmail>();\n        } catch (e) {\n          try {\n            const usersQuery = `SELECT email FROM users WHERE id = ?`;\n            userResult = await context.env.DB.prepare(usersQuery).bind(parseInt(userId)).first<UserEmail>();\n          } catch (e2) {\n            console.log('Users table query also failed');\n          }\n        }\n      }\n    } catch (tableError) {\n      console.log('Table access error:', tableError);\n    }\n    \n    // Return default values if no user found\n    if (!userResult) {\n      return new Response(JSON.stringify({ \n        hasPurchased: false,\n        totalSpent: '0.00',\n        completedOrders: 0,\n        lastPurchaseDate: null\n      }), {\n        status: 200,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Try to get purchase status from orders with multiple query variations\n    let statusResult: PurchaseStatus | null = null;\n    \n    try {\n      // Try different column name combinations\n      const queryVariations = [\n        `SELECT \n          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completedOrders,\n          COALESCE(SUM(CASE WHEN status = 'completed' THEN CAST(final_amount as REAL) ELSE 0 END), 0) as totalSpent,\n          MAX(CASE WHEN status = 'completed' THEN created_at END) as lastPurchaseDate\n        FROM orders \n        WHERE (user_id = ? OR customer_email = ?)`,\n        \n        `SELECT \n          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completedOrders,\n          COALESCE(SUM(CASE WHEN status = 'completed' THEN CAST(\"finalAmount\" as REAL) ELSE 0 END), 0) as totalSpent,\n          MAX(CASE WHEN status = 'completed' THEN \"createdAt\" END) as lastPurchaseDate\n        FROM orders \n        WHERE (\"userId\" = ? OR \"customerEmail\" = ?)`,\n        \n        `SELECT \n          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completedOrders,\n          COALESCE(SUM(CASE WHEN status = 'completed' THEN CAST(finalAmount as REAL) ELSE 0 END), 0) as totalSpent,\n          MAX(CASE WHEN status = 'completed' THEN createdAt END) as lastPurchaseDate\n        FROM orders \n        WHERE (userId = ? OR customerEmail = ?)`\n      ];\n\n      for (const query of queryVariations) {\n        try {\n          statusResult = await context.env.DB.prepare(query).bind(userId, userResult.email).first<PurchaseStatus>();\n          if (statusResult) break;\n        } catch (e) {\n          try {\n            statusResult = await context.env.DB.prepare(query).bind(parseInt(userId), userResult.email).first<PurchaseStatus>();\n            if (statusResult) break;\n          } catch (e2) {\n            console.log('Query variation failed, trying next');\n          }\n        }\n      }\n    } catch (queryError) {\n      console.log('All order queries failed:', queryError);\n    }\n    \n    const hasPurchased = (statusResult?.completedOrders || 0) > 0;\n    const totalSpent = (statusResult?.totalSpent || 0).toFixed(2);\n    const completedOrders = statusResult?.completedOrders || 0;\n    const lastPurchaseDate = statusResult?.lastPurchaseDate ? new Date(statusResult.lastPurchaseDate).getTime() : null;\n\n    return new Response(JSON.stringify({\n      hasPurchased,\n      totalSpent,\n      completedOrders,\n      lastPurchaseDate\n    }), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching purchase status:', error);\n    // Always return valid data instead of error\n    return new Response(JSON.stringify({ \n      hasPurchased: false,\n      totalSpent: '0.00',\n      completedOrders: 0,\n      lastPurchaseDate: null\n    }), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    // Get real analytics data from database\n    const ordersStatsQuery = `\n      SELECT \n        COUNT(*) as totalOrders,\n        COUNT(CASE WHEN status = 'completed' THEN 1 END) as completedOrders,\n        SUM(CASE WHEN status = 'completed' THEN CAST(final_amount as REAL) ELSE 0 END) as totalRevenue\n      FROM orders\n    `;\n\n    const usersStatsQuery = `\n      SELECT \n        COUNT(*) as totalUsers,\n        COUNT(CASE WHEN is_premium = 1 THEN 1 END) as premiumUsers\n      FROM users\n    `;\n\n    const [ordersStats, usersStats] = await Promise.all([\n      context.env.DB.prepare(ordersStatsQuery).first(),\n      context.env.DB.prepare(usersStatsQuery).first()\n    ]);\n\n    const analytics = {\n      totalRevenue: Number(ordersStats?.totalRevenue) || 0,\n      totalSales: Number(ordersStats?.completedOrders) || 0,\n      activeCustomers: Number(usersStats?.totalUsers) || 0,\n      avgRating: 4.9 // Static rating\n    };\n    \n    return new Response(JSON.stringify({\n      success: true,\n      ...analytics\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Failed to get analytics:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to load analytics',\n      totalRevenue: 0,\n      totalSales: 0,\n      activeCustomers: 0,\n      avgRating: 4.9\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import { SettingsStorage } from '../../lib/settings-storage';\n\ninterface Env {\n  DB: D1Database;\n}\n\ndeclare global {\n  interface D1Database {}\n  interface PagesFunction<T = any> {\n    (context: { request: Request; env: T; params: any; waitUntil: (promise: Promise<any>) => void; }): Promise<Response> | Response;\n  }\n}\n\ninterface AnnouncementBadge {\n  id: string;\n  title: string;\n  subtitle: string;\n  backgroundColor: string;\n  textColor: string;\n  priority: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    \n    // Get all announcement badges from storage\n    const badgesData = await settingsStorage.getSetting('announcement_badges');\n    const badges = badgesData ? JSON.parse(badgesData) : [];\n    \n    console.log('Retrieved announcement badges:', badges.length);\n    \n    return new Response(JSON.stringify(badges), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching announcement badges:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to fetch announcement badges',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const requestData = await context.request.json();\n    \n    console.log('Creating new announcement badge:', JSON.stringify(requestData, null, 2));\n    \n    // Create new badge - handle different field names from frontend\n    const newBadge: AnnouncementBadge = {\n      id: crypto.randomUUID(),\n      title: requestData.title || requestData.text || requestData.badgeText || requestData.content || requestData.message || '',\n      subtitle: requestData.subtitle || '',\n      backgroundColor: requestData.backgroundColor || requestData.bgColor || requestData.background || '#007cba',\n      textColor: requestData.textColor || requestData.color || requestData.foreground || '#ffffff',\n      priority: parseInt(requestData.priority) || 1,\n      isActive: requestData.isActive !== undefined ? Boolean(requestData.isActive) : requestData.enabled !== undefined ? Boolean(requestData.enabled) : true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    \n    console.log('Created badge object:', JSON.stringify(newBadge, null, 2));\n    \n    // Auto-translate if requested\n    if (requestData.autoTranslate !== false && newBadge.title) {\n      try {\n        // Get OpenAI API key\n        let openaiApiKey = context.env.OPENAI_API_KEY;\n        if (!openaiApiKey) {\n          const apiKeySetting = await settingsStorage.getSetting('openai_api_key');\n          openaiApiKey = apiKeySetting;\n        }\n\n        if (openaiApiKey) {\n          const supportedLanguages = ['de', 'fr', 'es', 'it', 'pt', 'nl', 'da', 'no', 'fi', 'tr', 'pl', 'ru'];\n          \n          // Call translation service\n          const translationResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${openaiApiKey}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              model: \"gpt-4o\",\n              messages: [\n                {\n                  role: \"system\",\n                  content: \"You are a professional translator specializing in marketing content. Provide accurate, culturally appropriate translations that maintain the marketing impact of the original text.\"\n                },\n                {\n                  role: \"user\", \n                  content: `Translate the following announcement badge text into multiple languages.\n\nOriginal text (English): \"${newBadge.title}\"\nContext: Announcement badge for a Chrome extension product website\nTarget languages: ${supportedLanguages.map(code => `${code}: ${({'de': 'German', 'fr': 'French', 'es': 'Spanish', 'it': 'Italian', 'pt': 'Portuguese', 'nl': 'Dutch', 'da': 'Danish', 'no': 'Norwegian', 'fi': 'Finnish', 'tr': 'Turkish', 'pl': 'Polish', 'ru': 'Russian'})[code]}`).join(', ')}\nTone: Marketing/promotional tone\n\nRequirements:\n- Maintain the marketing/promotional tone\n- Keep the same emotional impact as the original\n- Adapt cultural nuances appropriately for each target market\n- Keep translations concise and impactful for badge display\n- Ensure translations sound natural to native speakers\n\nRespond with a JSON object where keys are language codes (${supportedLanguages.join(', ')}) and values are the translated text.\n\nExample format:\n{\n  \"de\": \"German translation here\",\n  \"fr\": \"French translation here\"\n}`\n                }\n              ],\n              response_format: { type: \"json_object\" },\n              temperature: 0.3,\n              max_tokens: 1000\n            })\n          });\n\n          if (translationResponse.ok) {\n            const data = await translationResponse.json();\n            const translationText = data.choices[0]?.message?.content;\n            \n            if (translationText) {\n              const translations = JSON.parse(translationText);\n              // Store translations in the badge object\n              (newBadge as any).textTranslations = translations;\n              console.log('Auto-translated badge to languages:', Object.keys(translations));\n            }\n          }\n        }\n      } catch (translationError) {\n        console.warn('Auto-translation failed, continuing without translations:', translationError);\n      }\n    }\n    \n    // Get existing badges\n    const existingBadgesData = await settingsStorage.getSetting('announcement_badges');\n    const existingBadges = existingBadgesData ? JSON.parse(existingBadgesData) : [];\n    \n    // Add new badge\n    existingBadges.push(newBadge);\n    \n    // Save updated badges\n    await settingsStorage.setSetting('announcement_badges', JSON.stringify(existingBadges));\n    \n    console.log('Created announcement badge:', newBadge.id);\n    \n    return new Response(JSON.stringify({ badge: newBadge }), {\n      status: 201,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error creating announcement badge:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to create announcement badge',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestPut: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const requestData = await context.request.json();\n    const badgeId = requestData.id;\n    \n    if (!badgeId) {\n      return new Response(JSON.stringify({ error: 'Badge ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    console.log('Updating announcement badge:', badgeId);\n    \n    // Get existing badges\n    const existingBadgesData = await settingsStorage.getSetting('announcement_badges');\n    const existingBadges = existingBadgesData ? JSON.parse(existingBadgesData) : [];\n    \n    // Find and update badge\n    const badgeIndex = existingBadges.findIndex((badge: AnnouncementBadge) => badge.id === badgeId);\n    \n    if (badgeIndex === -1) {\n      return new Response(JSON.stringify({ error: 'Badge not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Update badge - handle different field names from frontend\n    existingBadges[badgeIndex] = {\n      ...existingBadges[badgeIndex],\n      title: requestData.title || requestData.text || requestData.badgeText || existingBadges[badgeIndex].title,\n      subtitle: requestData.subtitle || existingBadges[badgeIndex].subtitle,\n      backgroundColor: requestData.backgroundColor || requestData.bgColor || existingBadges[badgeIndex].backgroundColor,\n      textColor: requestData.textColor || requestData.color || existingBadges[badgeIndex].textColor,\n      priority: requestData.priority ? parseInt(requestData.priority) : existingBadges[badgeIndex].priority,\n      isActive: requestData.isActive !== undefined ? requestData.isActive : existingBadges[badgeIndex].isActive,\n      updatedAt: new Date().toISOString(),\n    };\n    \n    // Save updated badges\n    await settingsStorage.setSetting('announcement_badges', JSON.stringify(existingBadges));\n    \n    console.log('Updated announcement badge:', badgeId);\n    \n    return new Response(JSON.stringify({ badge: existingBadges[badgeIndex] }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error updating announcement badge:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to update announcement badge',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestDelete: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const url = new URL(context.request.url);\n    const badgeId = url.searchParams.get('id');\n    \n    if (!badgeId) {\n      return new Response(JSON.stringify({ error: 'Badge ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    console.log('Deleting announcement badge:', badgeId);\n    \n    // Get existing badges\n    const existingBadgesData = await settingsStorage.getSetting('announcement_badges');\n    const existingBadges = existingBadgesData ? JSON.parse(existingBadgesData) : [];\n    \n    // Filter out the badge to delete\n    const updatedBadges = existingBadges.filter((badge: AnnouncementBadge) => badge.id !== badgeId);\n    \n    if (updatedBadges.length === existingBadges.length) {\n      return new Response(JSON.stringify({ error: 'Badge not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Save updated badges\n    await settingsStorage.setSetting('announcement_badges', JSON.stringify(updatedBadges));\n    \n    console.log('Deleted announcement badge:', badgeId);\n    \n    return new Response(JSON.stringify({ success: true }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error deleting announcement badge:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to delete announcement badge',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n", "export const onRequestGet = async (context: any) => {\n  const { env } = context;\n  \n  try {\n    // Fetch auth settings from D1 database\n    const selectQuery = `SELECT * FROM auth_settings WHERE id = 1`;\n    const result = await env.DB.prepare(selectQuery).first();\n\n    if (!result) {\n      // Return default settings if no record found\n      const defaultSettings = {\n        googleEnabled: false,\n        facebookEnabled: false,\n        githubEnabled: false,\n        recaptchaEnabled: false,\n        recaptchaCustomerEnabled: false,\n        recaptchaAdminEnabled: false,\n        recaptchaSiteKey: '',\n        googleClientId: '',\n        googleClientSecret: '',\n        facebookAppId: '',\n        facebookAppSecret: '',\n        githubClientId: '',\n        githubClientSecret: '',\n        jwtSecret: 'demo-jwt-secret',\n        sessionTimeout: 3600\n      };\n\n      return new Response(JSON.stringify(defaultSettings), {\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Map database fields to frontend format\n    const authSettings = {\n      googleEnabled: Boolean(result.google_enabled),\n      facebookEnabled: Boolean(result.facebook_enabled),\n      githubEnabled: Boolean(result.github_enabled),\n      recaptchaEnabled: Boolean(result.recaptcha_enabled),\n      recaptchaCustomerEnabled: Boolean(result.recaptcha_customer_enabled),\n      recaptchaAdminEnabled: Boolean(result.recaptcha_admin_enabled),\n      recaptchaSiteKey: result.recaptcha_site_key || '',\n      googleClientId: result.google_client_id || '',\n      googleClientSecret: result.google_client_secret || '',\n      facebookAppId: result.facebook_app_id || '',\n      facebookAppSecret: result.facebook_app_secret || '',\n      githubClientId: result.github_client_id || '',\n      githubClientSecret: result.github_client_secret || '',\n      jwtSecret: result.jwt_secret || 'demo-jwt-secret',\n      sessionTimeout: result.session_timeout || 3600\n    };\n\n    return new Response(JSON.stringify(authSettings), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error fetching auth settings:\", error);\n    return new Response(JSON.stringify({ \n      message: \"Error fetching auth settings: \" + error.message \n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestPut = async (context: any) => {\n  const { request, env } = context;\n  \n  try {\n    const settings = await request.json();\n    \n    // Map frontend fields to database format\n    const updateData = {\n      google_enabled: settings.googleEnabled ? 1 : 0,\n      google_client_id: settings.googleClientId || null,\n      google_client_secret: settings.googleClientSecret || null,\n      facebook_enabled: settings.facebookEnabled ? 1 : 0,\n      facebook_app_id: settings.facebookAppId || null,\n      facebook_app_secret: settings.facebookAppSecret || null,\n      github_enabled: settings.githubEnabled ? 1 : 0,\n      github_client_id: settings.githubClientId || null,\n      github_client_secret: settings.githubClientSecret || null,\n      recaptcha_enabled: settings.recaptchaEnabled ? 1 : 0,\n      recaptcha_site_key: settings.recaptchaSiteKey || null,\n      recaptcha_secret_key: settings.recaptchaSecretKey || null,\n      recaptcha_mode: settings.recaptchaMode || 'v2',\n      recaptcha_customer_enabled: settings.recaptchaCustomerEnabled ? 1 : 0,\n      recaptcha_admin_enabled: settings.recaptchaAdminEnabled ? 1 : 0,\n      jwt_secret: settings.jwtSecret || 'demo-jwt-secret',\n      session_timeout: settings.sessionTimeout || 3600,\n      stripe_enabled: settings.stripeEnabled ? 1 : 0,\n      stripe_public_key: settings.stripePublicKey || null,\n      stripe_secret_key: settings.stripeSecretKey || null,\n      updated_at: new Date().toISOString()\n    };\n\n    // Update auth settings in D1 database\n    const updateQuery = `\n      UPDATE auth_settings \n      SET google_enabled = ?, google_client_id = ?, google_client_secret = ?,\n          facebook_enabled = ?, facebook_app_id = ?, facebook_app_secret = ?,\n          github_enabled = ?, github_client_id = ?, github_client_secret = ?,\n          recaptcha_enabled = ?, recaptcha_site_key = ?, recaptcha_secret_key = ?,\n          recaptcha_mode = ?, recaptcha_customer_enabled = ?, recaptcha_admin_enabled = ?,\n          jwt_secret = ?, session_timeout = ?, stripe_enabled = ?, stripe_public_key = ?, \n          stripe_secret_key = ?, updated_at = ?\n      WHERE id = 1\n    `;\n\n    await env.DB.prepare(updateQuery)\n      .bind(\n        updateData.google_enabled, updateData.google_client_id, updateData.google_client_secret,\n        updateData.facebook_enabled, updateData.facebook_app_id, updateData.facebook_app_secret,\n        updateData.github_enabled, updateData.github_client_id, updateData.github_client_secret,\n        updateData.recaptcha_enabled, updateData.recaptcha_site_key, updateData.recaptcha_secret_key,\n        updateData.recaptcha_mode, updateData.recaptcha_customer_enabled, updateData.recaptcha_admin_enabled,\n        updateData.jwt_secret, updateData.session_timeout, updateData.stripe_enabled, \n        updateData.stripe_public_key, updateData.stripe_secret_key, updateData.updated_at\n      )\n      .run();\n\n    // Fetch the updated settings to return\n    const selectQuery = `SELECT * FROM auth_settings WHERE id = 1`;\n    const result = await env.DB.prepare(selectQuery).first();\n\n    // Map back to frontend format for response\n    const updatedSettings = {\n      googleEnabled: Boolean(result.google_enabled),\n      facebookEnabled: Boolean(result.facebook_enabled),\n      githubEnabled: Boolean(result.github_enabled),\n      recaptchaEnabled: Boolean(result.recaptcha_enabled),\n      recaptchaCustomerEnabled: Boolean(result.recaptcha_customer_enabled),\n      recaptchaAdminEnabled: Boolean(result.recaptcha_admin_enabled),\n      recaptchaSiteKey: result.recaptcha_site_key || '',\n      googleClientId: result.google_client_id || '',\n      facebookAppId: result.facebook_app_id || '',\n      githubClientId: result.github_client_id || ''\n    };\n    \n    return new Response(JSON.stringify(updatedSettings), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error: any) {\n    console.error(\"Error updating auth settings:\", error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to update authentication settings: ' + error.message\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import { SettingsStorage } from '../../lib/settings-storage';\n\nexport const onRequestGet = async ({ env }: any) => {\n  try {\n    if (!env.DB) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    const settingsStorage = new SettingsStorage(env.DB);\n    await settingsStorage.initializeSettings();\n    \n    const settings = await settingsStorage.getChatSettings();\n\n    return new Response(JSON.stringify({\n      success: true,\n      ...settings\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Failed to get chat settings:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to load chat settings'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestPut = async ({ request, env }: any) => {\n  try {\n    console.log('Chat settings PUT request received');\n    console.log('Environment DB available:', !!env.DB);\n    \n    if (!env.DB) {\n      console.error('Database not available in environment');\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    const requestBody = await request.json();\n    console.log('Request body received:', requestBody);\n    \n    const { openaiApiKey, assistantId, chatModel, enabled } = requestBody;\n    \n    console.log('Initializing settings storage...');\n    const settingsStorage = new SettingsStorage(env.DB);\n    \n    try {\n      await settingsStorage.initializeSettings();\n      console.log('Settings storage initialized successfully');\n    } catch (initError) {\n      console.error('Failed to initialize settings storage:', initError);\n      throw initError;\n    }\n    \n    // Only update settings that are provided and not empty\n    const settingsToUpdate: any = {};\n    if (openaiApiKey && openaiApiKey.trim() !== '' && openaiApiKey !== '***hidden***') {\n      settingsToUpdate.openaiApiKey = openaiApiKey.trim();\n    }\n    if (assistantId !== undefined) {\n      settingsToUpdate.assistantId = assistantId;\n    }\n    if (chatModel && chatModel.trim() !== '') {\n      settingsToUpdate.chatModel = chatModel.trim();\n    }\n    if (enabled !== undefined) {\n      settingsToUpdate.enabled = enabled;\n    }\n    \n    console.log('Settings to update:', settingsToUpdate);\n    \n    try {\n      await settingsStorage.setChatSettings(settingsToUpdate);\n      console.log('Settings updated successfully');\n    } catch (updateError) {\n      console.error('Failed to update settings:', updateError);\n      throw updateError;\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Chat settings updated successfully'\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Chat settings PUT error:', error);\n    console.error('Error stack:', error.stack);\n    return new Response(JSON.stringify({\n      success: false,\n      message: `Failed to update chat settings: ${error.message || error}`,\n      error: error.toString()\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n", "// Cloudflare Pages Function: /api/admin/check-user-data\n// Check user data across all tables for debugging\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const url = new URL(request.url);\n    const email = url.searchParams.get('email');\n\n    if (!email) {\n      return json({ success: false, message: 'Email required' }, 400);\n    }\n\n    if (!env.DB) {\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    // Check users table\n    const user = await env.DB.prepare(`\n      SELECT id, email, name, is_premium, extension_activated, premium_activated_at, created_at\n      FROM users WHERE email = ?\n    `).bind(email).first();\n\n    // Check customers table\n    const customer = await env.DB.prepare(`\n      SELECT id, email, name, is_premium, extension_activated, created_at\n      FROM customers WHERE email = ?\n    `).bind(email).first();\n\n    // Check orders\n    const orders = await env.DB.prepare(`\n      SELECT id, customer_id, customer_email, original_amount, final_amount, status, created_at, completed_at\n      FROM orders WHERE customer_email = ?\n    `).bind(email).all();\n\n    // Check invoices\n    const invoices = await env.DB.prepare(`\n      SELECT id, invoice_number, customer_id, order_id, amount, status, created_at\n      FROM invoices WHERE customer_id IN (\n        SELECT id FROM customers WHERE email = ?\n        UNION\n        SELECT id FROM users WHERE email = ?\n      )\n    `).bind(email, email).all();\n\n    return json({\n      success: true,\n      email,\n      user,\n      customer,\n      orders: orders.results,\n      invoices: invoices.results,\n      summary: {\n        userExists: !!user,\n        customerExists: !!customer,\n        userPremium: user?.is_premium === 1,\n        customerPremium: customer?.is_premium === 1,\n        userExtensionActivated: user?.extension_activated === 1,\n        customerExtensionActivated: customer?.extension_activated === 1,\n        totalOrders: orders.results?.length || 0,\n        totalInvoices: invoices.results?.length || 0\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Error checking user data:', error);\n    return json({ \n      success: false, \n      message: error.message \n    }, 500);\n  }\n};\n", "import { SettingsStorage } from '../../lib/settings-storage';\n\ninterface Env {\n  DB: D1Database;\n  OPENAI_API_KEY?: string;\n}\n\ndeclare global {\n  interface D1Database {}\n  interface PagesFunction<T = any> {\n    (context: { request: Request; env: T; params: any; waitUntil: (promise: Promise<any>) => void; }): Promise<Response> | Response;\n  }\n}\n\ninterface CountdownBanner {\n  id: string;\n  title: string;\n  subtitle: string;\n  targetPrice: number;\n  originalPrice: number;\n  endDate: string;\n  priority: number;\n  backgroundColor: string;\n  textColor: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    \n    // Get all countdown banners from storage\n    const bannersData = await settingsStorage.getSetting('countdown_banners');\n    const banners = bannersData ? JSON.parse(bannersData) : [];\n    \n    console.log('Retrieved countdown banners:', banners.length);\n    \n    return new Response(JSON.stringify(banners), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching countdown banners:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to fetch countdown banners',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const requestData = await context.request.json();\n    \n    console.log('Creating new countdown banner:', requestData);\n    \n    // Create new banner\n    const newBanner: CountdownBanner = {\n      id: crypto.randomUUID(),\n      title: requestData.title || '',\n      subtitle: requestData.subtitle || '',\n      targetPrice: parseFloat(requestData.targetPrice) || 0,\n      originalPrice: parseFloat(requestData.originalPrice) || 0,\n      endDate: requestData.endDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n      priority: requestData.priority || 1,\n      backgroundColor: requestData.backgroundColor || '#007cba',\n      textColor: requestData.textColor || '#ffffff',\n      isActive: requestData.isActive !== false,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    \n    // Auto-translate if requested\n    if (requestData.autoTranslate !== false && (newBanner.title || newBanner.subtitle)) {\n      try {\n        // Get OpenAI API key\n        let openaiApiKey = context.env.OPENAI_API_KEY;\n        if (!openaiApiKey) {\n          const apiKeySetting = await settingsStorage.getSetting('openai_api_key');\n          openaiApiKey = apiKeySetting || undefined;\n        }\n\n        if (openaiApiKey) {\n          const supportedLanguages = ['de', 'fr', 'es', 'it', 'pt', 'nl', 'da', 'no', 'fi', 'tr', 'pl', 'ru'];\n          \n          // Translate both title and subtitle\n          const translationPromises: Promise<Response>[] = [];\n          \n          if (newBanner.title) {\n            translationPromises.push(\n              fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${openaiApiKey}`,\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                  model: \"gpt-4o\",\n                  messages: [\n                    {\n                      role: \"system\",\n                      content: \"You are a professional translator specializing in marketing content. Provide accurate, culturally appropriate translations that maintain the marketing impact of the original text.\"\n                    },\n                    {\n                      role: \"user\", \n                      content: `Translate the following countdown banner title into multiple languages.\n\nOriginal text (English): \"${newBanner.title}\"\nContext: Countdown banner title for limited-time promotion on Chrome extension website\nTarget languages: ${supportedLanguages.map(code => `${code}: ${({'de': 'German', 'fr': 'French', 'es': 'Spanish', 'it': 'Italian', 'pt': 'Portuguese', 'nl': 'Dutch', 'da': 'Danish', 'no': 'Norwegian', 'fi': 'Finnish', 'tr': 'Turkish', 'pl': 'Polish', 'ru': 'Russian'})[code]}`).join(', ')}\nTone: Urgent/promotional tone\n\nRequirements:\n- Maintain the urgent/promotional tone\n- Keep the same emotional impact as the original\n- Adapt cultural nuances appropriately for each target market\n- Keep translations concise and impactful for banner display\n- Ensure translations sound natural to native speakers\n\nRespond with a JSON object where keys are language codes (${supportedLanguages.join(', ')}) and values are the translated text.\n\nExample format:\n{\n  \"de\": \"German translation here\",\n  \"fr\": \"French translation here\"\n}`\n                    }\n                  ],\n                  response_format: { type: \"json_object\" },\n                  temperature: 0.3,\n                  max_tokens: 1000\n                })\n              })\n            );\n          }\n          \n          if (newBanner.subtitle) {\n            translationPromises.push(\n              fetch('https://api.openai.com/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${openaiApiKey}`,\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                  model: \"gpt-4o\",\n                  messages: [\n                    {\n                      role: \"system\",\n                      content: \"You are a professional translator specializing in marketing content. Provide accurate, culturally appropriate translations that maintain the marketing impact of the original text.\"\n                    },\n                    {\n                      role: \"user\", \n                      content: `Translate the following countdown banner subtitle into multiple languages.\n\nOriginal text (English): \"${newBanner.subtitle}\"\nContext: Countdown banner subtitle describing promotional offer on Chrome extension website\nTarget languages: ${supportedLanguages.map(code => `${code}: ${({'de': 'German', 'fr': 'French', 'es': 'Spanish', 'it': 'Italian', 'pt': 'Portuguese', 'nl': 'Dutch', 'da': 'Danish', 'no': 'Norwegian', 'fi': 'Finnish', 'tr': 'Turkish', 'pl': 'Polish', 'ru': 'Russian'})[code]}`).join(', ')}\nTone: Marketing/promotional tone\n\nRequirements:\n- Maintain the marketing/promotional tone\n- Keep the same emotional impact as the original\n- Adapt cultural nuances appropriately for each target market\n- Keep translations concise and impactful for banner display\n- Ensure translations sound natural to native speakers\n\nRespond with a JSON object where keys are language codes (${supportedLanguages.join(', ')}) and values are the translated text.\n\nExample format:\n{\n  \"de\": \"German translation here\",\n  \"fr\": \"French translation here\"\n}`\n                    }\n                  ],\n                  response_format: { type: \"json_object\" },\n                  temperature: 0.3,\n                  max_tokens: 1000\n                })\n              })\n            );\n          }\n\n          const responses = await Promise.all(translationPromises);\n          const translations: any = {};\n          \n          if (responses[0] && responses[0].ok) {\n            const titleData = await responses[0].json();\n            const titleTranslations = JSON.parse(titleData.choices[0]?.message?.content || '{}');\n            translations.titleTranslations = titleTranslations;\n          }\n          \n          if (responses[1] && responses[1].ok) {\n            const subtitleData = await responses[1].json();\n            const subtitleTranslations = JSON.parse(subtitleData.choices[0]?.message?.content || '{}');\n            translations.subtitleTranslations = subtitleTranslations;\n          }\n          \n          // Store translations in the banner object\n          Object.assign(newBanner, translations);\n          console.log('Auto-translated banner to languages:', Object.keys(translations));\n        }\n      } catch (translationError) {\n        console.warn('Auto-translation failed, continuing without translations:', translationError);\n      }\n    }\n    \n    // Get existing banners\n    const existingBannersData = await settingsStorage.getSetting('countdown_banners');\n    const existingBanners = existingBannersData ? JSON.parse(existingBannersData) : [];\n    \n    // Add new banner\n    existingBanners.push(newBanner);\n    \n    // Save updated banners\n    await settingsStorage.setSetting('countdown_banners', JSON.stringify(existingBanners));\n    \n    console.log('Created countdown banner:', newBanner.id);\n    \n    return new Response(JSON.stringify({ banner: newBanner }), {\n      status: 201,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error creating countdown banner:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to create countdown banner',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestPut: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const requestData = await context.request.json();\n    const bannerId = requestData.id;\n    \n    if (!bannerId) {\n      return new Response(JSON.stringify({ error: 'Banner ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    console.log('Updating countdown banner:', bannerId);\n    \n    // Get existing banners\n    const existingBannersData = await settingsStorage.getSetting('countdown_banners');\n    const existingBanners = existingBannersData ? JSON.parse(existingBannersData) : [];\n    \n    // Find and update banner\n    const bannerIndex = existingBanners.findIndex((banner: CountdownBanner) => banner.id === bannerId);\n    \n    if (bannerIndex === -1) {\n      return new Response(JSON.stringify({ error: 'Banner not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Update banner\n    existingBanners[bannerIndex] = {\n      ...existingBanners[bannerIndex],\n      ...requestData,\n      targetPrice: requestData.targetPrice ? parseFloat(requestData.targetPrice) : existingBanners[bannerIndex].targetPrice,\n      originalPrice: requestData.originalPrice ? parseFloat(requestData.originalPrice) : existingBanners[bannerIndex].originalPrice,\n      updatedAt: new Date().toISOString(),\n    };\n    \n    // Save updated banners\n    await settingsStorage.setSetting('countdown_banners', JSON.stringify(existingBanners));\n    \n    console.log('Updated countdown banner:', bannerId);\n    \n    return new Response(JSON.stringify({ banner: existingBanners[bannerIndex] }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error updating countdown banner:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to update countdown banner',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestDelete: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    const url = new URL(context.request.url);\n    const bannerId = url.searchParams.get('id');\n    \n    if (!bannerId) {\n      return new Response(JSON.stringify({ error: 'Banner ID is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    console.log('Deleting countdown banner:', bannerId);\n    \n    // Get existing banners\n    const existingBannersData = await settingsStorage.getSetting('countdown_banners');\n    const existingBanners = existingBannersData ? JSON.parse(existingBannersData) : [];\n    \n    // Filter out the banner to delete\n    const updatedBanners = existingBanners.filter((banner: CountdownBanner) => banner.id !== bannerId);\n    \n    if (updatedBanners.length === existingBanners.length) {\n      return new Response(JSON.stringify({ error: 'Banner not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Save updated banners\n    await settingsStorage.setSetting('countdown_banners', JSON.stringify(updatedBanners));\n    \n    console.log('Deleted countdown banner:', bannerId);\n    \n    return new Response(JSON.stringify({ success: true }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error deleting countdown banner:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to delete countdown banner',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nexport const onRequestPost: PagesFunction<Env> = async ({ env }) => {\n  try {\n    // Check if there's already an active banner\n    const existingBanner = await env.DB.prepare(`\n      SELECT id FROM countdown_banners \n      WHERE isActive = 1 \n      LIMIT 1\n    `).first();\n\n    if (existingBanner) {\n      return new Response(JSON.stringify({\n        success: true,\n        message: 'Active banner already exists',\n        bannerId: existingBanner.id\n      }), {\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Create a default countdown banner for testing\n    const endDate = new Date();\n    endDate.setDate(endDate.getDate() + 7); // 7 days from now\n\n    // First update existing banner to \u20AC1 if it exists\n    await env.DB.prepare(`\n      UPDATE countdown_banners \n      SET targetPrice = '1.00' \n      WHERE id = 1\n    `).run();\n\n    const result = await env.DB.prepare(`\n      INSERT INTO countdown_banners (\n        titleEn, subtitleEn, titleTranslations, subtitleTranslations,\n        targetPrice, originalPrice, endDateTime, isEnabled, backgroundColor, textColor, priority\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      'Limited Time Offer!',\n      'Get OCUS Job Hunter Extension at Special Price',\n      '{}',\n      '{}',\n      '1.00',\n      '299.99',\n      endDate.toISOString(),\n      1,\n      '#FF6B35',\n      '#FFFFFF',\n      1\n    ).run();\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Default countdown banner created successfully',\n      bannerId: result.meta.last_row_id\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error creating default banner:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to create default banner',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import { UserStorage } from '../../lib/user-storage';\n\nexport const onRequestGet = async ({ env }: any) => {\n  try {\n    const userStorage = new UserStorage(env.DB);\n    await userStorage.initializeUsers();\n    \n    const customers = await userStorage.getAllCustomers();\n    \n    return new Response(JSON.stringify({\n      success: true,\n      customers\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Failed to get customers:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to load customers'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "// Simple persistent storage using D1 database\nclass FeatureStorage {\n  private db: D1Database;\n\n  constructor(db: D1Database) {\n    this.db = db;\n  }\n\n  async getFeatureStates(): Promise<Record<string, boolean>> {\n    try {\n      const result = await this.db.prepare(`\n        SELECT feature_name, is_enabled \n        FROM dashboard_features\n      `).all();\n\n      const states: Record<string, boolean> = {\n        'affiliate-program': true,\n        'analytics': true,\n        'billing': true\n      };\n\n      if (result.results) {\n        result.results.forEach((row: any) => {\n          states[row.feature_name] = Boolean(row.is_enabled);\n        });\n      }\n\n      return states;\n    } catch (error) {\n      console.error('Failed to get feature states:', error);\n      return {\n        'affiliate-program': true,\n        'analytics': true,\n        'billing': true\n      };\n    }\n  }\n\n  async updateFeatureState(featureName: string, isEnabled: boolean): Promise<void> {\n    try {\n      await this.db.prepare(`\n        INSERT OR REPLACE INTO dashboard_features (feature_name, is_enabled, updated_at)\n        VALUES (?, ?, datetime('now'))\n      `).bind(featureName, isEnabled ? 1 : 0).run();\n    } catch (error) {\n      console.error('Failed to update feature state:', error);\n      throw error;\n    }\n  }\n\n  async initializeFeatures(): Promise<void> {\n    try {\n      await this.db.prepare(`\n        CREATE TABLE IF NOT EXISTS dashboard_features (\n          feature_name TEXT PRIMARY KEY,\n          is_enabled INTEGER DEFAULT 1,\n          updated_at TEXT DEFAULT (datetime('now'))\n        )\n      `).run();\n\n      const defaultFeatures = ['affiliate-program', 'analytics', 'billing'];\n      for (const feature of defaultFeatures) {\n        await this.db.prepare(`\n          INSERT OR IGNORE INTO dashboard_features (feature_name, is_enabled)\n          VALUES (?, 1)\n        `).bind(feature).run();\n      }\n    } catch (error) {\n      console.error('Failed to initialize features:', error);\n    }\n  }\n}\n\nexport const onRequestGet = async ({ env }: { env: any }) => {\n  try {\n    const storage = new FeatureStorage(env.DB);\n    await storage.initializeFeatures();\n    const states = await storage.getFeatureStates();\n\n    const features = [\n      {\n        id: 'affiliate-program',\n        name: 'Affiliate Program',\n        description: 'Controls visibility of referral system and commission tracking',\n        isEnabled: states['affiliate-program'],\n        category: 'monetization'\n      },\n      {\n        id: 'analytics',\n        name: 'Analytics',\n        description: 'Controls visibility of usage statistics and performance metrics',\n        isEnabled: states['analytics'],\n        category: 'insights'\n      },\n      {\n        id: 'billing',\n        name: 'Billing',\n        description: 'Controls visibility of payment history and subscription management',\n        isEnabled: states['billing'],\n        category: 'payments'\n      }\n    ];\n\n    return new Response(JSON.stringify(features), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  } catch (error) {\n    console.error('Error getting features:', error);\n    return new Response(JSON.stringify([]), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestPut = async ({ request, env }: { request: Request; env: any }) => {\n  try {\n    const { featureName, isEnabled } = await request.json();\n    \n    const storage = new FeatureStorage(env.DB);\n    await storage.updateFeatureState(featureName, isEnabled);\n    \n    return new Response(JSON.stringify({\n      success: true,\n      message: `Feature ${featureName} updated successfully`,\n      feature: {\n        id: featureName,\n        isEnabled\n      }\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to update feature'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ env }) => {\n  try {\n    // Update the banner price directly in countdown_banners table\n    const updateResult = await env.DB.prepare(`\n      UPDATE countdown_banners \n      SET targetPrice = '1.00'\n      WHERE id = 1\n    `).run();\n\n    // Verify the update\n    const updatedBanner = await env.DB.prepare(`\n      SELECT id, targetPrice, originalPrice FROM countdown_banners WHERE id = 1\n    `).first();\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Banner price updated to \u20AC1.00',\n      updateResult: {\n        success: updateResult.success,\n        meta: updateResult.meta\n      },\n      banner: updatedBanner\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to update banner price',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n", "// Cloudflare Pages Function: /api/admin/fix-existing-purchases\n// Updates existing purchase records to reflect premium status\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    if (!env.DB) {\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    const now = new Date().toISOString();\n    let updatedRecords = 0;\n\n    // Find all completed orders that should have premium status\n    const completedOrders = await env.DB.prepare(`\n      SELECT DISTINCT customer_id, customer_email, customer_name, final_amount\n      FROM orders \n      WHERE status = 'completed' AND final_amount > 0\n    `).all();\n\n    console.log('Found completed orders:', completedOrders.results?.length);\n\n    if (completedOrders.results && completedOrders.results.length > 0) {\n      for (const order of completedOrders.results) {\n        const orderData = order as any;\n        \n        // Update customers table\n        if (orderData.customer_id) {\n          const customerUpdate = await env.DB.prepare(`\n            UPDATE customers \n            SET is_premium = 1, \n                extension_activated = 1,\n                total_spent = COALESCE(total_spent, 0) + ?,\n                total_orders = COALESCE(total_orders, 0) + 1,\n                updated_at = ?\n            WHERE id = ? AND (is_premium != 1 OR extension_activated != 1)\n          `).bind(orderData.final_amount, now, orderData.customer_id).run();\n          \n          if (customerUpdate.meta?.changes && customerUpdate.meta.changes > 0) {\n            updatedRecords++;\n            console.log('Updated customer:', orderData.customer_id);\n          }\n        }\n\n        // Update users table by email\n        if (orderData.customer_email) {\n          const userUpdate = await env.DB.prepare(`\n            UPDATE users \n            SET is_premium = 1, \n                extension_activated = 1,\n                premium_activated_at = ?,\n                total_spent = COALESCE(total_spent, 0) + ?,\n                total_orders = COALESCE(total_orders, 0) + 1\n            WHERE email = ? AND (is_premium != 1 OR extension_activated != 1)\n          `).bind(now, orderData.final_amount, orderData.customer_email).run();\n          \n          if (userUpdate.meta?.changes && userUpdate.meta.changes > 0) {\n            updatedRecords++;\n            console.log('Updated user:', orderData.customer_email);\n          }\n        }\n      }\n    }\n\n    // Also check for any customers/users with orders but missing premium flags\n    const missingPremiumCustomers = await env.DB.prepare(`\n      SELECT c.id, c.email, c.name\n      FROM customers c\n      WHERE c.id IN (\n        SELECT DISTINCT customer_id \n        FROM orders \n        WHERE status = 'completed' AND final_amount > 0\n      ) AND (c.is_premium != 1 OR c.extension_activated != 1)\n    `).all();\n\n    if (missingPremiumCustomers.results && missingPremiumCustomers.results.length > 0) {\n      for (const customer of missingPremiumCustomers.results) {\n        const customerData = customer as any;\n        \n        await env.DB.prepare(`\n          UPDATE customers \n          SET is_premium = 1, extension_activated = 1, updated_at = ?\n          WHERE id = ?\n        `).bind(now, customerData.id).run();\n        \n        updatedRecords++;\n        console.log('Fixed missing premium status for customer:', customerData.id);\n      }\n    }\n\n    return json({\n      success: true,\n      message: `Updated ${updatedRecords} records with premium status`,\n      updatedRecords\n    });\n\n  } catch (error: any) {\n    console.error('Error fixing existing purchases:', error);\n    return json({\n      success: false,\n      message: 'Failed to fix existing purchases',\n      error: error.message\n    }, 500);\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "// Fix premium activation for existing users who have completed purchases\nexport const onRequestPost = async ({ request, env }: any) => {\n  try {\n    const body = await request.json() as { adminKey?: string };\n    \n    // Simple admin key check\n    if (body.adminKey !== 'fix-premium-2024') {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Invalid admin key'\n      }), {\n        status: 403,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n\n    if (!env.DB) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n\n    const results = {\n      usersChecked: 0,\n      customersChecked: 0,\n      usersFixed: 0,\n      customersFixed: 0,\n      errors: []\n    };\n\n    // Get all customers with completed paid orders but missing premium flags\n    const customersWithOrders = await env.DB.prepare(`\n      SELECT DISTINCT c.id, c.email, c.name, c.is_premium, c.extension_activated,\n             COUNT(o.id) as orderCount, SUM(o.final_amount) as totalPaid\n      FROM customers c\n      JOIN orders o ON c.id = o.customer_id\n      WHERE o.status = 'completed' AND o.final_amount > 0\n      GROUP BY c.id, c.email, c.name, c.is_premium, c.extension_activated\n    `).all();\n\n    console.log('Found customers with completed orders:', customersWithOrders.results?.length);\n\n    for (const customer of customersWithOrders.results || []) {\n      results.customersChecked++;\n      \n      // Check if customer needs premium flags updated\n      const needsUpdate = customer.is_premium !== 1 || customer.extension_activated !== 1;\n      \n      if (needsUpdate) {\n        try {\n          await env.DB.prepare(`\n            UPDATE customers \n            SET is_premium = 1, extension_activated = 1, premium_activated_at = datetime('now')\n            WHERE id = ?\n          `).bind(customer.id).run();\n          \n          results.customersFixed++;\n          console.log(`Fixed customer ${customer.email} (ID: ${customer.id})`);\n        } catch (error) {\n          results.errors.push(`Failed to fix customer ${customer.email}: ${error.message}`);\n        }\n      }\n    }\n\n    // Get all users with completed paid orders but missing premium flags\n    const usersWithOrders = await env.DB.prepare(`\n      SELECT DISTINCT u.id, u.email, u.name, u.is_premium, u.extension_activated,\n             COUNT(o.id) as orderCount, SUM(o.final_amount) as totalPaid\n      FROM users u\n      JOIN orders o ON u.email = o.customer_email\n      WHERE o.status = 'completed' AND o.final_amount > 0\n      GROUP BY u.id, u.email, u.name, u.is_premium, u.extension_activated\n    `).all();\n\n    console.log('Found users with completed orders:', usersWithOrders.results?.length);\n\n    for (const user of usersWithOrders.results || []) {\n      results.usersChecked++;\n      \n      // Check if user needs premium flags updated\n      const needsUpdate = user.is_premium !== 1 || user.extension_activated !== 1;\n      \n      if (needsUpdate) {\n        try {\n          await env.DB.prepare(`\n            UPDATE users \n            SET is_premium = 1, extension_activated = 1, premium_activated_at = datetime('now')\n            WHERE id = ?\n          `).bind(user.id).run();\n          \n          results.usersFixed++;\n          console.log(`Fixed user ${user.email} (ID: ${user.id})`);\n        } catch (error) {\n          results.errors.push(`Failed to fix user ${user.email}: ${error.message}`);\n        }\n      }\n    }\n\n    // Create activation codes for customers who don't have them\n    const customersNeedingCodes = await env.DB.prepare(`\n      SELECT c.id, c.email\n      FROM customers c\n      WHERE c.is_premium = 1 AND c.extension_activated = 1\n      AND NOT EXISTS (\n        SELECT 1 FROM activation_codes ac WHERE ac.customer_id = c.id\n      )\n    `).all();\n\n    let codesCreated = 0;\n    for (const customer of customersNeedingCodes.results || []) {\n      try {\n        const activationCode = `OCUS-${Date.now()}-${Math.random().toString(36).substr(2, 8).toUpperCase()}`;\n        \n        await env.DB.prepare(`\n          INSERT INTO activation_codes (customer_id, code, created_at)\n          VALUES (?, ?, datetime('now'))\n        `).bind(customer.id, activationCode).run();\n        \n        codesCreated++;\n        console.log(`Created activation code for customer ${customer.email}`);\n      } catch (error) {\n        results.errors.push(`Failed to create activation code for ${customer.email}: ${error.message}`);\n      }\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Premium activation fix completed',\n      results: {\n        ...results,\n        activationCodesCreated: codesCreated\n      }\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n\n  } catch (error: any) {\n    console.error('Error fixing premium users:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n", "// Cloudflare Pages Function: /api/admin/fix-purchased-users\n// Fix users who have purchased but don't have premium access\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const body = await request.json() as { emails: string[] };\n    const { emails } = body;\n\n    if (!emails || !Array.isArray(emails)) {\n      return json({ success: false, message: 'Array of emails required' }, 400);\n    }\n\n    if (!env.DB) {\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    const now = new Date().toISOString();\n    const results = [];\n\n    for (const email of emails) {\n      try {\n        // Check if user exists in users table\n        const user = await env.DB.prepare(`\n          SELECT id, email, name FROM users WHERE email = ?\n        `).bind(email).first();\n\n        if (user) {\n          // Update user premium status like heshmat@gmail.com\n          await env.DB.prepare(`\n            UPDATE users \n            SET is_premium = 1,\n                extension_activated = 1,\n                premium_activated_at = ?\n            WHERE email = ?\n          `).bind(now, email).run();\n\n          results.push({\n            email,\n            status: 'updated',\n            message: 'User premium status activated'\n          });\n        } else {\n          results.push({\n            email,\n            status: 'not_found',\n            message: 'User not found in users table'\n          });\n        }\n      } catch (error: any) {\n        results.push({\n          email,\n          status: 'error',\n          message: error.message\n        });\n      }\n    }\n\n    return json({\n      success: true,\n      message: 'Batch update completed',\n      results\n    });\n\n  } catch (error: any) {\n    console.error('Error fixing purchased users:', error);\n    return json({ \n      success: false, \n      message: error.message \n    }, 500);\n  }\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  try {\n    // Force update banner price to \u20AC1\n    const updateResult = await env.DB.prepare(`\n      UPDATE countdown_banners \n      SET targetPrice = '1.00'\n      WHERE id = 1\n    `).run();\n\n    // Verify the update worked\n    const banner = await env.DB.prepare(`\n      SELECT id, targetPrice, originalPrice FROM countdown_banners WHERE id = 1\n    `).first();\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Banner price force updated to \u20AC1.00',\n      updateResult: {\n        success: updateResult.success,\n        meta: updateResult.meta\n      },\n      currentBanner: banner\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to update banner price',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    // Fetch all invoices with user information for admin\n    const invoicesQuery = `\n      SELECT \n        i.id,\n        i.invoice_number,\n        i.order_id,\n        i.customer_id,\n        i.total_amount as amount,\n        i.currency,\n        i.tax_amount,\n        i.status,\n        i.invoice_date,\n        i.due_date,\n        i.paid_at,\n        i.created_at,\n        i.customer_name,\n        i.customer_email,\n        o.payment_method\n      FROM invoices i\n      LEFT JOIN orders o ON i.order_id = o.id\n      ORDER BY i.created_at DESC\n    `;\n\n    const invoicesResult = await context.env.DB.prepare(invoicesQuery).all();\n    \n    return new Response(JSON.stringify(invoicesResult.results || []), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching admin invoices:', error);\n    return new Response(JSON.stringify({ error: 'Failed to fetch invoices' }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "export const onRequestPost = async ({ request }: any) => {\n  try {\n    const { username, password, recaptchaToken } = await request.json();\n    \n    // Demo authentication - replace with real authentication logic\n    if (username === 'admin' && password === 'admin123') {\n      return new Response(JSON.stringify({\n        success: true,\n        user: {\n          id: 1,\n          username: 'admin',\n          role: 'admin'\n        },\n        token: 'demo-admin-jwt-token'\n      }), {\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n    \n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Invalid credentials'\n    }), {\n      status: 401,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Login failed'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  try {\n    let orders = [];\n    let stats = {\n      totalOrders: 0,\n      totalRevenue: 0,\n      completedOrders: 0,\n      pendingOrders: 0\n    };\n\n    try {\n      // Try to fetch from orders table first\n      const orderResults = await env.DB.prepare(`\n        SELECT \n          id, \n          customer_email as customerEmail, \n          customer_name as customerName, \n          product_id as productId,\n          original_amount as originalAmount, \n          final_amount as finalAmount, \n          currency, \n          status, \n          payment_method as paymentMethod,\n          download_token as downloadToken, \n          download_count as downloadCount, \n          max_downloads as maxDownloads, \n          activation_code as activationCode,\n          created_at as createdAt, \n          completed_at as completedAt\n        FROM orders \n        ORDER BY created_at DESC\n      `).all();\n      orders = orderResults.results || [];\n\n      // Get order statistics\n      const statsResult = await env.DB.prepare(`\n        SELECT \n          COUNT(*) as totalOrders,\n          SUM(CASE WHEN status = 'completed' THEN CAST(final_amount as REAL) ELSE 0 END) as totalRevenue,\n          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completedOrders,\n          COUNT(CASE WHEN status = 'pending' THEN 1 END) as pendingOrders\n        FROM orders\n      `).first();\n      if (statsResult) {\n        stats = {\n          totalOrders: Number(statsResult.totalOrders) || 0,\n          totalRevenue: Number(statsResult.totalRevenue) || 0,\n          completedOrders: Number(statsResult.completedOrders) || 0,\n          pendingOrders: Number(statsResult.pendingOrders) || 0\n        };\n      }\n    } catch (dbError) {\n      console.log('Orders table not found, checking fallback storage:', dbError);\n      \n      // Fallback: Get orders from settings table\n      const settingsResults = await env.DB.prepare(`\n        SELECT key, value FROM settings \n        WHERE key LIKE 'order_%'\n      `).all();\n      \n      const allOrders = [];\n      for (const setting of (settingsResults.results || [])) {\n        try {\n          const orderData = JSON.parse(setting.value as string);\n          allOrders.push(orderData);\n        } catch (parseError) {\n          console.log('Error parsing order data:', parseError);\n        }\n      }\n      \n      // Sort by completedAt or createdAt\n      orders = allOrders.sort((a, b) => {\n        const dateA = new Date(a.completedAt || a.createdAt);\n        const dateB = new Date(b.completedAt || b.createdAt);\n        return dateB.getTime() - dateA.getTime();\n      });\n      \n      // Calculate stats from fallback data\n      stats.totalOrders = orders.length;\n      stats.completedOrders = orders.filter(o => o.status === 'completed').length;\n      stats.pendingOrders = orders.filter(o => o.status === 'pending').length;\n      stats.totalRevenue = orders\n        .filter(o => o.status === 'completed')\n        .reduce((sum, o) => sum + (parseFloat(o.finalAmount) || 0), 0);\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      orders: orders,\n      stats: stats\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching admin orders:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to fetch orders',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\ninterface PaymentSettings {\n  stripeEnabled?: boolean;\n  paypalEnabled?: boolean;\n  stripePublicKey?: string;\n  stripeSecretKey?: string;\n  paypalClientId?: string;\n  paypalClientSecret?: string;\n  defaultPaymentMethod?: string;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  try {\n    // Get payment settings from database\n    const result = await env.DB.prepare(`\n      SELECT key, value FROM settings \n      WHERE key LIKE 'payment_%'\n    `).all();\n\n    // Convert database results to settings object\n    const settings: any = {\n      stripeEnabled: false,\n      paypalEnabled: false,\n      stripePublicKey: '',\n      stripeSecretKey: '',\n      paypalClientId: '',\n      paypalClientSecret: '',\n      defaultPaymentMethod: 'stripe'\n    };\n\n    // Map database values to settings\n    result.results?.forEach((row: any) => {\n      const key = row.key.replace('payment_', '');\n      let value = row.value;\n      \n      // Parse boolean values\n      if (value === 'true') value = true;\n      if (value === 'false') value = false;\n      \n      settings[key] = value;\n    });\n\n    return new Response(JSON.stringify(settings), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching payment settings:', error);\n    \n    // Return default settings on error\n    const defaultSettings = {\n      stripeEnabled: false,\n      paypalEnabled: false,\n      stripePublicKey: '',\n      stripeSecretKey: '',\n      paypalClientId: '',\n      paypalClientSecret: '',\n      defaultPaymentMethod: 'stripe'\n    };\n\n    return new Response(JSON.stringify(defaultSettings), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestPut: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const settings = await request.json() as PaymentSettings;\n    \n    // Prepare batch insert/update for all payment settings\n    const settingsToSave = [\n      { key: 'payment_stripeEnabled', value: String(settings.stripeEnabled || false) },\n      { key: 'payment_paypalEnabled', value: String(settings.paypalEnabled || false) },\n      { key: 'payment_stripePublicKey', value: settings.stripePublicKey || '' },\n      { key: 'payment_stripeSecretKey', value: settings.stripeSecretKey || '' },\n      { key: 'payment_paypalClientId', value: settings.paypalClientId || '' },\n      { key: 'payment_paypalClientSecret', value: settings.paypalClientSecret || '' },\n      { key: 'payment_defaultPaymentMethod', value: settings.defaultPaymentMethod || 'stripe' }\n    ];\n\n    // Use transaction to ensure all settings are saved atomically\n    await env.DB.batch([\n      // First, delete existing payment settings\n      env.DB.prepare(`DELETE FROM settings WHERE key LIKE 'payment_%'`),\n      // Then insert new settings\n      ...settingsToSave.map(setting => \n        env.DB.prepare(`INSERT INTO settings (key, value) VALUES (?, ?)`)\n          .bind(setting.key, setting.value)\n      )\n    ]);\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Payment settings saved successfully',\n      settings\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Error saving payment settings:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to save payment settings',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "export async function onRequestGet(context: any) {\n  const { env } = context;\n  \n  try {\n    // Check if database is available\n    if (!env.DB) {\n      console.error('Database not available, returning default pricing');\n      return new Response(JSON.stringify({\n        id: 1,\n        name: \"OCUS Job Hunter Extension\",\n        price: \"29.99\",\n        beforePrice: null\n      }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    // Fetch the current product pricing from D1 database\n    const selectQuery = `SELECT * FROM products WHERE id = 1 AND isActive = 1`;\n    const result = await env.DB.prepare(selectQuery).first();\n\n    if (!result) {\n      // Return default pricing if no product found\n      console.log('No product found in database, returning default pricing');\n      return new Response(JSON.stringify({\n        id: 1,\n        name: \"OCUS Job Hunter Extension\",\n        price: \"29.99\",\n        beforePrice: null\n      }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    // Return the product pricing\n    return new Response(JSON.stringify({\n      id: result.id,\n      name: result.name,\n      price: result.price.toString(),\n      beforePrice: result.beforePrice ? result.beforePrice.toString() : null\n    }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error fetching pricing:\", error);\n    return new Response(JSON.stringify({ \n      message: \"Error fetching pricing: \" + error.message \n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n      }\n    });\n  }\n}\n\nexport async function onRequestPut(context: any) {\n  const { request, env } = context;\n  \n  try {\n    const body = await request.json();\n    const { price, beforePrice } = body;\n\n    if (!price || price <= 0) {\n      return new Response(JSON.stringify({ message: \"Valid price is required\" }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    if (beforePrice && beforePrice <= price) {\n      return new Response(JSON.stringify({ message: \"Before price must be higher than current price\" }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    // Update or create product pricing in D1 database\n    const updateQuery = `\n      INSERT OR REPLACE INTO products (id, name, price, beforePrice, updatedAt)\n      VALUES (1, 'OCUS Job Hunter Extension', ?, ?, datetime('now'))\n    `;\n\n    await env.DB.prepare(updateQuery)\n      .bind(price, beforePrice || null)\n      .run();\n\n    // Fetch the updated product\n    const selectQuery = `SELECT * FROM products WHERE id = 1`;\n    const result = await env.DB.prepare(selectQuery).first();\n\n    return new Response(JSON.stringify({ \n      success: true, \n      product: result,\n      message: \"Pricing updated successfully\" \n    }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error updating pricing:\", error);\n    return new Response(JSON.stringify({ message: \"Error updating pricing: \" + error.message }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n      }\n    });\n  }\n}\n\nexport async function onRequestOptions(context: any) {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    }\n  });\n}\n", "// functions/api/admin/reset-db.ts\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nconst SCHEMA_SQL = `-- D1 Database Schema for OCUS Ticket System\n-- Run: wrangler d1 execute ocus-tickets --file=./functions/schema.sql\n\n-- Drop existing tables if they exist (for development)\nDROP TABLE IF EXISTS ticket_messages;\nDROP TABLE IF EXISTS tickets;\nDROP TABLE IF EXISTS countdown_banners;\nDROP TABLE IF EXISTS orders;\nDROP TABLE IF EXISTS products;\nDROP TABLE IF EXISTS auth_settings;\nDROP TABLE IF EXISTS settings;\nDROP TABLE IF EXISTS users;\nDROP TABLE IF EXISTS customers;\nDROP TABLE IF EXISTS invoices;\nDROP TABLE IF EXISTS activation_codes;\n\nCREATE TABLE IF NOT EXISTS tickets (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  title TEXT NOT NULL,\n  description TEXT NOT NULL,\n  category TEXT NOT NULL DEFAULT 'general',\n  priority TEXT NOT NULL DEFAULT 'medium',\n  status TEXT NOT NULL DEFAULT 'open',\n  customer_email TEXT NOT NULL,\n  customer_name TEXT NOT NULL,\n  assigned_to_user_id INTEGER,\n  created_at TEXT NOT NULL DEFAULT (datetime('now')),\n  updated_at TEXT NOT NULL DEFAULT (datetime('now')),\n  resolved_at TEXT,\n  archived_at TEXT\n);\n\nCREATE TABLE IF NOT EXISTS ticket_messages (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  ticket_id INTEGER NOT NULL,\n  message TEXT NOT NULL,\n  is_from_customer BOOLEAN NOT NULL DEFAULT 1,\n  sender_name TEXT NOT NULL,\n  sender_email TEXT,\n  created_at TEXT NOT NULL DEFAULT (datetime('now')),\n  FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE\n);\n\n-- Countdown Banners Table\nCREATE TABLE IF NOT EXISTS countdown_banners (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  title TEXT NOT NULL,\n  subtitle TEXT NOT NULL,\n  titleTranslations TEXT,\n  subtitleTranslations TEXT,\n  targetPrice REAL NOT NULL,\n  originalPrice REAL,\n  endDate TEXT NOT NULL,\n  priority INTEGER NOT NULL DEFAULT 0,\n  backgroundColor TEXT NOT NULL DEFAULT '#000000',\n  textColor TEXT NOT NULL DEFAULT '#ffffff',\n  isActive BOOLEAN NOT NULL DEFAULT 0,\n  createdAt TEXT NOT NULL DEFAULT (datetime('now')),\n  updatedAt TEXT NOT NULL DEFAULT (datetime('now'))\n);\n\n-- Products Table\nCREATE TABLE IF NOT EXISTS products (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  name TEXT NOT NULL DEFAULT 'OCUS Job Hunter Extension',\n  price REAL NOT NULL,\n  beforePrice REAL,\n  description TEXT,\n  isActive BOOLEAN NOT NULL DEFAULT 1,\n  createdAt TEXT NOT NULL DEFAULT (datetime('now')),\n  updatedAt TEXT NOT NULL DEFAULT (datetime('now'))\n);\n\n-- Insert default product if not exists\nINSERT OR IGNORE INTO products (id, name, price, beforePrice) \nVALUES (1, 'OCUS Job Hunter Extension', 250.00, NULL);\n\n-- Auth Settings Table\nCREATE TABLE IF NOT EXISTS auth_settings (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  google_enabled BOOLEAN DEFAULT 0,\n  google_client_id TEXT,\n  google_client_secret TEXT,\n  facebook_enabled BOOLEAN DEFAULT 0,\n  facebook_app_id TEXT,\n  facebook_app_secret TEXT,\n  github_enabled BOOLEAN DEFAULT 0,\n  github_client_id TEXT,\n  github_client_secret TEXT,\n  recaptcha_enabled BOOLEAN DEFAULT 0,\n  recaptcha_site_key TEXT,\n  recaptcha_secret_key TEXT,\n  recaptcha_mode TEXT DEFAULT 'v2',\n  recaptcha_customer_enabled BOOLEAN DEFAULT 0,\n  recaptcha_admin_enabled BOOLEAN DEFAULT 0,\n  jwt_secret TEXT DEFAULT 'demo-jwt-secret',\n  session_timeout INTEGER DEFAULT 3600,\n  stripe_enabled BOOLEAN DEFAULT 0,\n  stripe_public_key TEXT,\n  stripe_secret_key TEXT,\n  created_at TEXT NOT NULL DEFAULT (datetime('now')),\n  updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n);\n\n-- Insert default auth settings if not exists\nINSERT OR IGNORE INTO auth_settings (id) VALUES (1);\n\n-- Generic Settings Table for flexible key-value storage\nCREATE TABLE IF NOT EXISTS settings (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  key TEXT NOT NULL UNIQUE,\n  value TEXT,\n  created_at TEXT NOT NULL DEFAULT (datetime('now')),\n  updated_at TEXT NOT NULL DEFAULT (datetime('now'))\n);\n\n-- Orders/Purchases Table\nCREATE TABLE IF NOT EXISTS orders (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  customerId INTEGER,\n  customerEmail TEXT NOT NULL,\n  customerName TEXT NOT NULL,\n  productId INTEGER NOT NULL,\n  productName TEXT NOT NULL,\n  originalAmount REAL NOT NULL,\n  finalAmount REAL NOT NULL,\n  currency TEXT NOT NULL DEFAULT 'EUR',\n  status TEXT NOT NULL DEFAULT 'pending',\n  paymentMethod TEXT NOT NULL DEFAULT 'stripe',\n  paymentIntentId TEXT,\n  downloadToken TEXT UNIQUE,\n  downloadCount INTEGER DEFAULT 0,\n  maxDownloads INTEGER DEFAULT 5,\n  activationCode TEXT,\n  invoiceNumber TEXT UNIQUE,\n  createdAt TEXT NOT NULL DEFAULT (datetime('now')),\n  completedAt TEXT,\n  FOREIGN KEY (productId) REFERENCES products(id)\n);\n\n-- Customers Table (renamed from users for clarity)\nCREATE TABLE IF NOT EXISTS customers (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  email TEXT UNIQUE NOT NULL,\n  name TEXT NOT NULL,\n  hashedPassword TEXT,\n  isActive BOOLEAN DEFAULT 1,\n  isPremium BOOLEAN DEFAULT 0, -- Deprecated, use extension_activated\n  extension_activated BOOLEAN DEFAULT 0,\n  registrationDate TEXT NOT NULL DEFAULT (datetime('now')),\n  lastLoginAt TEXT,\n  activationToken TEXT,\n  passwordResetToken TEXT,\n  createdAt TEXT NOT NULL DEFAULT (datetime('now')),\n  updatedAt TEXT NOT NULL DEFAULT (datetime('now'))\n);\n\n-- Create a view for backward compatibility if 'users' is still used elsewhere\nCREATE VIEW IF NOT EXISTS users AS SELECT * FROM customers;\n\nCREATE TABLE IF NOT EXISTS activation_codes (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    order_id INTEGER NOT NULL,\n    code TEXT NOT NULL UNIQUE,\n    is_used BOOLEAN DEFAULT 0,\n    created_at TEXT DEFAULT (datetime('now')),\n    FOREIGN KEY (order_id) REFERENCES orders(id)\n);\n\n-- Invoices Table\nCREATE TABLE IF NOT EXISTS invoices (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  orderId INTEGER NOT NULL,\n  customerId INTEGER NOT NULL,\n  invoiceNumber TEXT NOT NULL UNIQUE,\n  amount REAL NOT NULL,\n  currency TEXT NOT NULL DEFAULT 'EUR',\n  taxAmount REAL DEFAULT 0,\n  status TEXT NOT NULL DEFAULT 'unpaid', -- unpaid, paid, void\n  invoiceDate TEXT NOT NULL DEFAULT (datetime('now')),\n  dueDate TEXT,\n  paidAt TEXT,\n  pdfUrl TEXT,\n  createdAt TEXT NOT NULL DEFAULT (datetime('now')),\n  updatedAt TEXT NOT NULL DEFAULT (datetime('now')),\n  FOREIGN KEY (orderId) REFERENCES orders(id),\n  FOREIGN KEY (customerId) REFERENCES customers(id)\n);\n\n\n-- Index for settings lookup\nCREATE INDEX IF NOT EXISTS idx_settings_key ON settings(key);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_tickets_customer_email ON tickets(customer_email);\nCREATE INDEX IF NOT EXISTS idx_tickets_status ON tickets(status);\nCREATE INDEX IF NOT EXISTS idx_tickets_created_at ON tickets(created_at);\nCREATE INDEX IF NOT EXISTS idx_ticket_messages_ticket_id ON ticket_messages(ticket_id);\nCREATE INDEX IF NOT EXISTS idx_ticket_messages_created_at ON ticket_messages(created_at);\nCREATE INDEX IF NOT EXISTS idx_countdown_banners_active ON countdown_banners(isActive);\nCREATE INDEX IF NOT EXISTS idx_countdown_banners_priority ON countdown_banners(priority);\nCREATE INDEX IF NOT EXISTS idx_products_active ON products(isActive);\nCREATE INDEX IF NOT EXISTS idx_orders_customer_email ON orders(customerEmail);\nCREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);\nCREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(createdAt);\nCREATE INDEX IF NOT EXISTS idx_customers_email ON customers(email);\nCREATE INDEX IF NOT EXISTS idx_customers_active ON customers(isActive);\nCREATE INDEX IF NOT EXISTS idx_invoices_customer_id ON invoices(customerId);\nCREATE INDEX IF NOT EXISTS idx_invoices_order_id ON invoices(orderId);\nCREATE INDEX IF NOT EXISTS idx_orders_customer_id ON orders(customerId);\n`;\n\nfunction toD1Batch(db: D1Database, sql: string): D1PreparedStatement[] {\n    return sql.split(';').filter(query => query.trim() !== '').map(query => db.prepare(query));\n}\n\nexport const onRequestPost: PagesFunction<Env> = async (context) => {\n    const { request, env } = context;\n\n    // Simple security check for development\n    const adminSecret = request.headers.get('X-Admin-Secret');\n    if (adminSecret !== 'ocus-power-secret') { // Use a more secure secret in production\n        return new Response('Unauthorized', { status: 401 });\n    }\n\n    try {\n        if (!env.DB) {\n            return new Response('Database not available', { status: 500 });\n        }\n        const statements = toD1Batch(env.DB, SCHEMA_SQL);\n        await env.DB.batch(statements);\n        \n        return new Response('Database reset and initialized successfully.', {\n            status: 200,\n            headers: { 'Content-Type': 'text/plain' },\n        });\n    } catch (error: any) {\n        console.error('Database reset failed:', error);\n        return new Response(`Database reset failed: ${error.message}`, {\n            status: 500,\n            headers: { 'Content-Type': 'text/plain' },\n        });\n    }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n    return new Response(null, {\n      status: 204,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, X-Admin-Secret',\n      },\n    });\n};\n", "import { SettingsStorage } from '../../lib/settings-storage';\n\nexport const onRequestGet = async ({ env }: any) => {\n  try {\n    if (!env.DB) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    const settingsStorage = new SettingsStorage(env.DB);\n    await settingsStorage.initializeSettings();\n    \n    // Get SEO settings from database\n    const title = await settingsStorage.getSetting('seo_title') || 'OCUS Job Hunter';\n    const description = await settingsStorage.getSetting('seo_description') || 'Automated job application Chrome extension';\n    const keywords = await settingsStorage.getSetting('seo_keywords') || 'job hunting, automation, chrome extension';\n    const coverImage = await settingsStorage.getSetting('seo_cover_image') || '';\n    const logo = await settingsStorage.getSetting('seo_logo') || '';\n    const favicon = await settingsStorage.getSetting('seo_favicon') || '';\n\n    console.log('GET SEO Settings - Retrieved from DB:', {\n      title,\n      description,\n      keywords,\n      coverImage: coverImage ? 'Has image data' : 'No image',\n      logo: logo ? 'Has logo data' : 'No logo',\n      favicon: favicon ? 'Has favicon data' : 'No favicon'\n    });\n\n    return new Response(JSON.stringify({\n      success: true,\n      title,\n      description,\n      keywords,\n      coverImage,\n      logo,\n      favicon\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Failed to get SEO settings:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to load SEO settings'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestPut = async ({ request, env }: any) => {\n  try {\n    if (!env.DB) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    const formData = await request.formData();\n    \n    const settingsStorage = new SettingsStorage(env.DB);\n    await settingsStorage.initializeSettings();\n    \n    console.log('FormData keys:', Array.from(formData.keys()));\n    console.log('FormData entries:');\n    for (const [key, value] of formData.entries()) {\n      console.log(`${key}:`, value instanceof File ? `File(${value.name}, ${value.size} bytes)` : value);\n    }\n\n    // Handle text fields\n    const title = formData.get('title')?.toString();\n    const description = formData.get('description')?.toString();\n    const keywords = formData.get('keywords')?.toString();\n    \n    if (title) {\n      await settingsStorage.setSetting('seo_title', title);\n    }\n    if (description) {\n      await settingsStorage.setSetting('seo_description', description);\n    }\n    if (keywords) {\n      await settingsStorage.setSetting('seo_keywords', keywords);\n    }\n    \n    // Handle file uploads\n    const coverImageFile = formData.get('coverImage') as File;\n    const logoFile = formData.get('logo') as File;\n    const faviconFile = formData.get('favicon') as File;\n    \n    console.log('File uploads check:', {\n      coverImage: coverImageFile ? `${coverImageFile.name} (${coverImageFile.size} bytes)` : 'null',\n      logo: logoFile ? `${logoFile.name} (${logoFile.size} bytes)` : 'null',\n      favicon: faviconFile ? `${faviconFile.name} (${faviconFile.size} bytes)` : 'null'\n    });\n    \n    if (coverImageFile && coverImageFile.size > 0) {\n      console.log('Processing cover image:', coverImageFile.name, coverImageFile.type, coverImageFile.size);\n      const arrayBuffer = await coverImageFile.arrayBuffer();\n      const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n      const dataUrl = `data:${coverImageFile.type};base64,${base64}`;\n      console.log('Saving cover image to DB, data URL length:', dataUrl.length);\n      await settingsStorage.setSetting('seo_cover_image', dataUrl);\n      console.log('Cover image saved successfully');\n    }\n    \n    if (logoFile && logoFile.size > 0) {\n      const arrayBuffer = await logoFile.arrayBuffer();\n      const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n      const dataUrl = `data:${logoFile.type};base64,${base64}`;\n      await settingsStorage.setSetting('seo_logo', dataUrl);\n    }\n    \n    if (faviconFile && faviconFile.size > 0) {\n      const arrayBuffer = await faviconFile.arrayBuffer();\n      const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n      const dataUrl = `data:${faviconFile.type};base64,${base64}`;\n      await settingsStorage.setSetting('seo_favicon', dataUrl);\n    }\n\n    console.log('SEO settings updated successfully');\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'SEO settings updated successfully'\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Failed to update SEO settings:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: `Failed to update SEO settings: ${error.message || error}`\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestPatch = async ({ request, env }: any) => {\n  try {\n    if (!env.DB) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    const data = await request.json();\n    \n    const settingsStorage = new SettingsStorage(env.DB);\n    await settingsStorage.initializeSettings();\n    \n    // Handle text fields only for PATCH\n    if (data.title) {\n      await settingsStorage.setSetting('seo_title', data.title);\n    }\n    if (data.description) {\n      await settingsStorage.setSetting('seo_description', data.description);\n    }\n    if (data.keywords) {\n      await settingsStorage.setSetting('seo_keywords', data.keywords);\n    }\n\n    console.log('SEO text settings updated successfully');\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'SEO settings updated successfully'\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Failed to update SEO text settings:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: `Failed to update SEO settings: ${error.message || error}`\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, PATCH, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n", "export const onRequestGet = async () => {\n  // Demo admin statistics\n  const stats = {\n    totalUsers: 1247,\n    activeUsers: 892,\n    newUsersToday: 23,\n    totalTickets: 156,\n    openTickets: 34,\n    resolvedTickets: 122,\n    revenue: {\n      monthly: 15420,\n      yearly: 184500,\n      growth: 12.5\n    },\n    userGrowth: [\n      { month: 'Jan', users: 1100 },\n      { month: 'Feb', users: 1180 },\n      { month: 'Mar', users: 1247 }\n    ],\n    ticketStats: [\n      { category: 'Technical', count: 45 },\n      { category: 'Billing', count: 32 },\n      { category: 'Feature Request', count: 28 },\n      { category: 'General', count: 51 }\n    ],\n    recentActivity: [\n      { time: '2 min ago', action: 'New user registration: john@example.com' },\n      { time: '5 min ago', action: 'Ticket #156 resolved by support team' },\n      { time: '12 min ago', action: 'Payment received: $49.99 from user #1234' }\n    ]\n  };\n\n  return new Response(JSON.stringify(stats), {\n    headers: { \n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\nimport { SettingsStorage } from '../../lib/settings-storage';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const requestData = await request.json() as { targetPrice: number };\n    const { targetPrice } = requestData;\n    \n    if (!targetPrice) {\n      return new Response(JSON.stringify({ error: 'targetPrice is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    const settingsStorage = new SettingsStorage(env.DB);\n    \n    // Update settings table (admin dashboard storage)\n    const bannersData = await settingsStorage.getSetting('countdown_banners');\n    let banners = bannersData ? JSON.parse(bannersData) : [];\n    \n    if (banners.length === 0) {\n      // Create default banner in settings\n      banners = [{\n        id: '1',\n        title: 'Limited Time Offer!',\n        subtitle: 'Get OCUS Job Hunter Extension at Special Price',\n        targetPrice: targetPrice,\n        originalPrice: 299.99,\n        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n        priority: 1,\n        backgroundColor: '#FF6B35',\n        textColor: '#FFFFFF',\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }];\n    } else {\n      // Update existing banner\n      banners[0].targetPrice = targetPrice;\n      banners[0].updatedAt = new Date().toISOString();\n    }\n    \n    await settingsStorage.setSetting('countdown_banners', JSON.stringify(banners));\n    \n    // Update products table\n    const updateProductResult = await env.DB.prepare(`\n      UPDATE products \n      SET price = ? \n      WHERE id = 1\n    `).bind(targetPrice.toString()).run();\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Banner price synced successfully',\n      targetPrice: targetPrice\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to sync banner price',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "import { TicketStorage, Env } from '../../lib/db';\n\nfunction mapStatus(status: string) {\n  // Admin UI expects: 'open' | 'in_progress' | 'closed'\n  if (status === 'in-progress') return 'in_progress';\n  if (status === 'resolved') return 'closed';\n  return status || 'open';\n}\n\nexport const onRequestGet = async ({ request, env }: { request: Request; env: Env }) => {\n  const expressBase: string | undefined = env?.EXPRESS_API_BASE;\n  if (expressBase) {\n    const base = expressBase.replace(/\\/$/, \"\");\n    const url = `${base}/api/admin/tickets`;\n    const headers: Record<string, string> = {};\n    const cookie = request.headers.get('cookie');\n    const auth = request.headers.get('authorization');\n    if (cookie) headers['cookie'] = cookie;\n    if (auth) headers['authorization'] = auth;\n    const proxied = await fetch(url, { headers, redirect: 'manual' });\n    // Clone headers to safely adjust Set-Cookie for the Pages host\n    const respHeaders = new Headers(proxied.headers);\n    const setCookie = respHeaders.get('set-cookie');\n    if (setCookie) {\n      // Remove Domain attribute so cookie is scoped to current host (Pages domain)\n      const rewritten = setCookie.replace(/;\\s*Domain=[^;]+/i, '');\n      respHeaders.delete('set-cookie');\n      respHeaders.append('set-cookie', rewritten);\n    }\n    return new Response(proxied.body, { status: proxied.status, headers: respHeaders });\n  }\n\n  const storage = new TicketStorage(env.DB);\n  const allTickets = await storage.getAllTickets();\n  const tickets = allTickets.map((t) => ({\n    id: t.id,\n    title: t.title,\n    description: t.description,\n    status: mapStatus(t.status),\n    priority: t.priority,\n    userId: t.assigned_to_user_id || 0,\n    userName: t.customer_name,\n    userEmail: t.customer_email,\n    createdAt: t.created_at,\n    updatedAt: t.updated_at,\n  }));\n\n  return new Response(JSON.stringify(tickets), {\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const { bannerId, targetPrice } = await request.json() as { bannerId: number; targetPrice: number };\n\n    // Update the banner price\n    const result = await env.DB.prepare(`\n      UPDATE countdown_banners \n      SET targetPrice = ? \n      WHERE id = ?\n    `).bind(targetPrice.toString(), bannerId).run();\n\n    if (result.changes === 0) {\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Banner not found'\n      }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Banner price updated successfully',\n      bannerId,\n      newPrice: targetPrice\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error updating banner price:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to update banner price'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\n// Handle CORS preflight requests\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  try {\n    // Update banner ID 1 to have price of 1.00\n    const result = await env.DB.prepare(`\n      UPDATE countdown_banners \n      SET targetPrice = '1.00' \n      WHERE id = 1\n    `).run();\n\n    // Verify the update\n    const banner = await env.DB.prepare(`\n      SELECT * FROM countdown_banners WHERE id = 1\n    `).first();\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Banner price updated to \u20AC1.00',\n      updated: result.changes > 0,\n      banner: banner\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error updating banner price:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to update banner price',\n      details: error.message\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n", "// Cloudflare Pages Function: /api/admin/update-premium-status\n// Updates existing purchase records to reflect premium status\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    if (!env.DB) {\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    const now = new Date().toISOString();\n    let updatedRecords = 0;\n\n    // Find all completed orders that should have premium status\n    const completedOrders = await env.DB.prepare(`\n      SELECT DISTINCT customer_id, customer_email, customer_name, final_amount\n      FROM orders \n      WHERE status = 'completed' AND final_amount > 0\n    `).all();\n\n    console.log('Found completed orders:', completedOrders.results?.length);\n\n    if (completedOrders.results && completedOrders.results.length > 0) {\n      for (const order of completedOrders.results) {\n        const orderData = order as any;\n        \n        // Update customers table\n        if (orderData.customer_id) {\n          const customerUpdate = await env.DB.prepare(`\n            UPDATE customers \n            SET is_premium = 1, \n                extension_activated = 1,\n                total_spent = COALESCE(total_spent, 0) + ?,\n                total_orders = COALESCE(total_orders, 0) + 1,\n                updated_at = ?\n            WHERE id = ? AND (is_premium != 1 OR extension_activated != 1)\n          `).bind(orderData.final_amount, now, orderData.customer_id).run();\n          \n          if (customerUpdate.meta?.changes && customerUpdate.meta.changes > 0) {\n            updatedRecords++;\n            console.log('Updated customer:', orderData.customer_id);\n          }\n        }\n\n        // Update users table by email\n        if (orderData.customer_email) {\n          const userUpdate = await env.DB.prepare(`\n            UPDATE users \n            SET is_premium = 1, \n                extension_activated = 1,\n                premium_activated_at = ?,\n                total_spent = COALESCE(total_spent, 0) + ?,\n                total_orders = COALESCE(total_orders, 0) + 1\n            WHERE email = ? AND (is_premium != 1 OR extension_activated != 1)\n          `).bind(now, orderData.final_amount, orderData.customer_email).run();\n          \n          if (userUpdate.meta?.changes && userUpdate.meta.changes > 0) {\n            updatedRecords++;\n            console.log('Updated user:', orderData.customer_email);\n          }\n        }\n      }\n    }\n\n    // Also check for any customers/users with orders but missing premium flags\n    const missingPremiumCustomers = await env.DB.prepare(`\n      SELECT c.id, c.email, c.name\n      FROM customers c\n      WHERE c.id IN (\n        SELECT DISTINCT customer_id \n        FROM orders \n        WHERE status = 'completed' AND final_amount > 0\n      ) AND (c.is_premium != 1 OR c.extension_activated != 1)\n    `).all();\n\n    if (missingPremiumCustomers.results && missingPremiumCustomers.results.length > 0) {\n      for (const customer of missingPremiumCustomers.results) {\n        const customerData = customer as any;\n        \n        await env.DB.prepare(`\n          UPDATE customers \n          SET is_premium = 1, extension_activated = 1, updated_at = ?\n          WHERE id = ?\n        `).bind(now, customerData.id).run();\n        \n        updatedRecords++;\n        console.log('Fixed missing premium status for customer:', customerData.id);\n      }\n    }\n\n    return json({\n      success: true,\n      message: `Updated ${updatedRecords} records with premium status`,\n      updatedRecords\n    });\n\n  } catch (error: any) {\n    console.error('Error fixing existing purchases:', error);\n    return json({\n      success: false,\n      message: 'Failed to fix existing purchases',\n      error: error.message\n    }, 500);\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "// Fix premium activation for all users who have completed purchases\nexport const onRequestPost = async ({ request, env }: any) => {\n  try {\n    const body = await request.json() as { email?: string; adminKey?: string };\n    const { email, adminKey } = body;\n    \n    // Simple admin check\n    if (adminKey !== 'fix-premium-2024') {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Invalid admin key'\n      }), {\n        status: 403,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n\n    if (!env.DB) {\n      return new Response(JSON.stringify({ success: false, message: 'Database not available' }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n\n    const results = {\n      usersFixed: 0,\n      customersFixed: 0,\n      errors: []\n    };\n\n    // Fix specific user if email provided, otherwise fix all\n    if (email) {\n      // Check if user exists in users table\n      const user = await env.DB.prepare(`\n        SELECT id, email, is_premium, extension_activated FROM users WHERE email = ?\n      `).bind(email).first();\n\n      if (user) {\n        // Check if user has completed orders\n        const userOrders = await env.DB.prepare(`\n          SELECT COUNT(*) as count FROM orders \n          WHERE customer_email = ? AND status = 'completed' AND final_amount > 0\n        `).bind(email).first();\n\n        if (userOrders && userOrders.count > 0) {\n          await env.DB.prepare(`\n            UPDATE users \n            SET is_premium = 1, extension_activated = 1, premium_activated_at = datetime('now')\n            WHERE id = ?\n          `).bind(user.id).run();\n          results.usersFixed++;\n        }\n      }\n\n      // Check if customer exists in customers table\n      const customer = await env.DB.prepare(`\n        SELECT id, email, is_premium, extension_activated FROM customers WHERE email = ?\n      `).bind(email).first();\n\n      if (customer) {\n        // Check if customer has completed orders\n        const customerOrders = await env.DB.prepare(`\n          SELECT COUNT(*) as count FROM orders \n          WHERE customer_id = ? AND status = 'completed' AND final_amount > 0\n        `).bind(customer.id).first();\n\n        if (customerOrders && customerOrders.count > 0) {\n          await env.DB.prepare(`\n            UPDATE customers \n            SET is_premium = 1, extension_activated = 1, premium_activated_at = datetime('now')\n            WHERE id = ?\n          `).bind(customer.id).run();\n          results.customersFixed++;\n        }\n      }\n    } else {\n      // Fix all users with completed orders\n      const usersToFix = await env.DB.prepare(`\n        SELECT DISTINCT u.id, u.email\n        FROM users u\n        JOIN orders o ON u.email = o.customer_email\n        WHERE o.status = 'completed' AND o.final_amount > 0\n        AND (u.is_premium != 1 OR u.extension_activated != 1)\n      `).all();\n\n      for (const user of usersToFix.results || []) {\n        await env.DB.prepare(`\n          UPDATE users \n          SET is_premium = 1, extension_activated = 1, premium_activated_at = datetime('now')\n          WHERE id = ?\n        `).bind(user.id).run();\n        results.usersFixed++;\n      }\n\n      const customersToFix = await env.DB.prepare(`\n        SELECT DISTINCT c.id, c.email\n        FROM customers c\n        JOIN orders o ON c.id = o.customer_id\n        WHERE o.status = 'completed' AND o.final_amount > 0\n        AND (c.is_premium != 1 OR c.extension_activated != 1)\n      `).all();\n\n      for (const customer of customersToFix.results || []) {\n        await env.DB.prepare(`\n          UPDATE customers \n          SET is_premium = 1, extension_activated = 1, premium_activated_at = datetime('now')\n          WHERE id = ?\n        `).bind(customer.id).run();\n        results.customersFixed++;\n      }\n    }\n\n    return new Response(JSON.stringify({ \n      success: true, \n      message: `Premium activation fix completed`,\n      results\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n\n  } catch (error: any) {\n    console.error('Error fixing premium activation:', error);\n    return new Response(JSON.stringify({ \n      success: false, \n      message: error.message \n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  try {\n    let users = [];\n    let stats = {\n      totalUsers: 0,\n      activeUsers: 0,\n      premiumUsers: 0\n    };\n\n    try {\n      // Fetch users with download and purchase information\n      const userResults = await env.DB.prepare(`\n        SELECT \n          u.id, \n          u.email, \n          u.name, \n          u.role,\n          u.created_at,\n          u.is_premium,\n          u.premium_activated_at,\n          u.total_spent,\n          u.total_orders,\n          u.extension_activated,\n          COUNT(DISTINCT d.id) as trial_downloads,\n          COUNT(DISTINCT o.id) as purchase_count,\n          MAX(d.created_at) as last_download,\n          MAX(o.created_at) as last_purchase\n        FROM users u\n        LEFT JOIN user_downloads d ON u.id = d.user_id\n        LEFT JOIN orders o ON u.id = o.customer_id AND o.status = 'completed'\n        GROUP BY u.id\n        ORDER BY u.created_at DESC\n      `).all();\n      users = userResults.results || [];\n\n      // Get user statistics\n      const statsResult = await env.DB.prepare(`\n        SELECT \n          COUNT(*) as totalUsers,\n          COUNT(CASE WHEN is_premium = 1 THEN 1 END) as premiumUsers,\n          COUNT(DISTINCT d.user_id) as trialUsers\n        FROM users u\n        LEFT JOIN user_downloads d ON u.id = d.user_id\n      `).first();\n      \n      if (statsResult) {\n        stats = {\n          totalUsers: Number(statsResult.totalUsers) || 0,\n          activeUsers: Number(statsResult.trialUsers) || 0,\n          premiumUsers: Number(statsResult.premiumUsers) || 0\n        };\n      }\n    } catch (dbError) {\n      console.log('Users table not found, checking fallback storage:', dbError);\n      \n      // Fallback: Get users from settings table\n      const settingsResults = await env.DB.prepare(`\n        SELECT key, value FROM settings \n        WHERE key LIKE 'user_%'\n      `).all();\n      \n      const allUsers = [];\n      for (const setting of (settingsResults.results || [])) {\n        try {\n          const userData = JSON.parse(setting.value as string);\n          // Add an ID based on email for consistency\n          userData.id = userData.email.replace('@', '_at_').replace('.', '_dot_');\n          userData.registrationDate = userData.updatedAt;\n          userData.createdAt = userData.updatedAt;\n          userData.isActive = true;\n          allUsers.push(userData);\n        } catch (parseError) {\n          console.log('Error parsing user data:', parseError);\n        }\n      }\n      \n      // Sort by updatedAt\n      users = allUsers.sort((a, b) => {\n        const dateA = new Date(a.updatedAt);\n        const dateB = new Date(b.updatedAt);\n        return dateB.getTime() - dateA.getTime();\n      });\n      \n      // Calculate stats from fallback data\n      stats.totalUsers = users.length;\n      stats.activeUsers = users.filter(u => u.isActive).length;\n      stats.premiumUsers = users.filter(u => u.isPremium).length;\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      users: users,\n      stats: stats\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error fetching admin users:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to fetch users',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "import { SettingsStorage } from '../../lib/settings-storage';\n\ninterface Env {\n  DB: D1Database;\n}\n\ndeclare global {\n  interface D1Database {}\n  interface PagesFunction<T = any> {\n    (context: { request: Request; env: T; params: any; waitUntil: (promise: Promise<any>) => void; }): Promise<Response> | Response;\n  }\n}\n\ninterface AnnouncementBadge {\n  id: string;\n  title: string;\n  subtitle: string;\n  backgroundColor: string;\n  textColor: string;\n  priority: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface FrontendBadgeData {\n  id: string;\n  isEnabled: boolean;\n  textEn: string;\n  textTranslations: Record<string, string>;\n  backgroundColor: string;\n  textColor: string;\n  priority: number;\n}\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const settingsStorage = new SettingsStorage(context.env.DB);\n    \n    // Get all announcement badges from storage\n    const badgesData = await settingsStorage.getSetting('announcement_badges');\n    const badges: AnnouncementBadge[] = badgesData ? JSON.parse(badgesData) : [];\n    \n    console.log('Retrieved announcement badges for active endpoint:', badges.length);\n    \n    // Find the highest priority active badge\n    const activeBadge = badges\n      .filter(badge => badge.isActive)\n      .sort((a, b) => b.priority - a.priority)[0];\n    \n    if (!activeBadge) {\n      return new Response(JSON.stringify(null), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n    \n    // Transform backend data structure to frontend expected format\n    const frontendBadge: FrontendBadgeData = {\n      id: activeBadge.id,\n      isEnabled: activeBadge.isActive,\n      textEn: activeBadge.title,\n      textTranslations: (activeBadge as any).textTranslations || {},\n      backgroundColor: activeBadge.backgroundColor,\n      textColor: activeBadge.textColor,\n      priority: activeBadge.priority,\n    };\n    \n    console.log('Returning active badge:', frontendBadge);\n    \n    return new Response(JSON.stringify(frontendBadge), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching active announcement badge:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to fetch active announcement badge',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n", "import { Env } from '../../lib/context';\n\n// Type definitions\ninterface AuthSettings {\n  facebook_enabled: number;\n  facebook_app_id: string;\n  facebook_app_secret: string;\n}\n\ninterface FacebookTokenResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n}\n\ninterface FacebookUserResponse {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  const url = new URL(request.url);\n  const code = url.searchParams.get('code');\n\n  try {\n    // 1. Fetch auth settings from the database\n    const authSettings = await env.DB.prepare(\n      'SELECT facebook_enabled, facebook_app_id, facebook_app_secret FROM auth_settings WHERE id = 1'\n    ).first<AuthSettings>();\n\n    if (!authSettings?.facebook_enabled) {\n      return new Response('Facebook login is not enabled.', { status: 400 });\n    }\n\n    const { facebook_app_id, facebook_app_secret } = authSettings;\n    const redirectUri = `${url.origin}/api/auth/facebook`;\n\n    // 2. If no code is present, redirect to Facebook for authentication\n    if (!code) {\n      const authUrl = new URL('https://www.facebook.com/v18.0/dialog/oauth');\n      authUrl.searchParams.set('client_id', facebook_app_id);\n      authUrl.searchParams.set('redirect_uri', redirectUri);\n      authUrl.searchParams.set('response_type', 'code');\n      authUrl.searchParams.set('scope', 'email,public_profile');\n      return Response.redirect(authUrl.toString(), 302);\n    }\n\n    // 3. Exchange the authorization code for an access token\n    const tokenResponse = await fetch('https://graph.facebook.com/v18.0/oauth/access_token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: new URLSearchParams({\n        client_id: facebook_app_id,\n        client_secret: facebook_app_secret,\n        redirect_uri: redirectUri,\n        code,\n      }),\n    });\n\n    if (!tokenResponse.ok) {\n      const errorText = await tokenResponse.text();\n      throw new Error(`Failed to get access token: ${errorText}`);\n    }\n\n    const tokenData = await tokenResponse.json() as FacebookTokenResponse;\n\n    // 4. Use the access token to fetch user details from Facebook\n    const userResponse = await fetch(`https://graph.facebook.com/me?fields=id,name,email&access_token=${tokenData.access_token}`);\n\n    if (!userResponse.ok) {\n      throw new Error('Failed to fetch user data from Facebook.');\n    }\n\n    const userData = await userResponse.json() as FacebookUserResponse;\n\n    if (!userData.email) {\n      return new Response('Email not provided by Facebook.', { status: 400 });\n    }\n\n    // 5. Check if the user exists in the database or create a new one\n    let user = await env.DB.prepare('SELECT id, name, email FROM users WHERE email = ?').bind(userData.email).first<User>();\n\n    if (!user) {\n      const now = new Date().toISOString();\n      await env.DB.prepare(\n        'INSERT INTO users (email, name, provider, provider_id, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)'\n      ).bind(userData.email, userData.name, 'facebook', userData.id, now, now).run();\n\n      user = await env.DB.prepare('SELECT id, name, email FROM users WHERE email = ?').bind(userData.email).first<User>();\n    }\n\n    if (!user) {\n      return new Response('Could not create or find user.', { status: 500 });\n    }\n\n    // 6. Redirect to the dashboard, passing user info in the URL\n    const redirectURL = new URL('/dashboard', url.origin);\n    redirectURL.searchParams.set('userId', user.id.toString());\n    redirectURL.searchParams.set('name', user.name);\n    redirectURL.searchParams.set('email', user.email);\n\n    return Response.redirect(redirectURL.toString(), 302);\n\n  } catch (error) {\n    console.error('Facebook OAuth Error:', error);\n    const errorUrl = new URL('/login', url.origin);\n    errorUrl.searchParams.set('error', 'oauth_failed');\n    errorUrl.searchParams.set('provider', 'facebook');\n    return Response.redirect(errorUrl.toString(), 302);\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\n// Type definitions for GitHub OAuth flow\ninterface GitHubTokenResponse {\n  access_token: string;\n  error?: string;\n  error_description?: string;\n}\n\ninterface GitHubUserResponse {\n  id: number;\n  login: string;\n  name: string | null;\n  email: string | null;\n}\n\ninterface GitHubEmailResponse {\n    email: string;\n    primary: boolean;\n    verified: boolean;\n    visibility: string | null;\n}\n\n// Type definition for database records\ninterface AuthSettings {\n  github_enabled: 0 | 1;\n  github_client_id: string;\n  github_client_secret: string;\n}\n\ninterface User {\n    id: number;\n    name: string;\n    email: string;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  const { request, env } = context;\n  const url = new URL(request.url);\n  const code = url.searchParams.get('code');\n  const state = url.searchParams.get('state');\n\n  try {\n    // 1. Fetch auth settings from the database\n    const authSettings = await env.DB.prepare('SELECT github_enabled, github_client_id, github_client_secret FROM auth_settings WHERE id = 1').first<AuthSettings>();\n\n    if (!authSettings?.github_enabled) {\n      return new Response('GitHub login is not enabled.', { status: 400 });\n    }\n\n    if (!authSettings.github_client_id || !authSettings.github_client_secret) {\n      return new Response('GitHub client ID or secret is not configured.', { status: 500 });\n    }\n\n    // 2. If no code is present, redirect to GitHub to authorize\n    if (!code) {\n      const authUrl = new URL('https://github.com/login/oauth/authorize');\n      authUrl.searchParams.set('client_id', authSettings.github_client_id);\n      authUrl.searchParams.set('redirect_uri', `${url.origin}/api/auth/github`);\n      authUrl.searchParams.set('scope', 'user:email');\n      authUrl.searchParams.set('state', state || crypto.randomUUID());\n      return Response.redirect(authUrl.toString(), 302);\n    }\n\n    // 3. Exchange the authorization code for an access token\n    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        client_id: authSettings.github_client_id,\n        client_secret: authSettings.github_client_secret,\n        code: code,\n      }),\n    });\n\n    const tokenData = await tokenResponse.json() as GitHubTokenResponse;\n    if (tokenData.error || !tokenData.access_token) {\n      throw new Error(`Failed to get access token: ${tokenData.error_description || 'No token returned'}`);\n    }\n\n    // 4. Use the access token to fetch user details from GitHub\n    const userResponse = await fetch('https://api.github.com/user', {\n      headers: {\n        'Authorization': `Bearer ${tokenData.access_token}`,\n        'User-Agent': 'OCUS-Job-Hunter',\n      },\n    });\n    const userData = await userResponse.json() as GitHubUserResponse;\n\n    // 5. Fetch user's primary email if not included in the main user response\n    let userEmail = userData.email;\n    if (!userEmail) {\n        const emailResponse = await fetch('https://api.github.com/user/emails', {\n            headers: {\n                'Authorization': `Bearer ${tokenData.access_token}`,\n                'User-Agent': 'OCUS-Job-Hunter',\n            },\n        });\n        const emails = await emailResponse.json() as GitHubEmailResponse[];\n        const primaryEmail = emails.find((e: GitHubEmailResponse) => e.primary && e.verified);\n        userEmail = primaryEmail?.email || null;\n    }\n\n    if (!userEmail) {\n        return new Response('Could not retrieve a verified primary email from GitHub.', { status: 400 });\n    }\n\n    // 6. Check if the user exists in the database\n    let user = await env.DB.prepare('SELECT id, name, email FROM users WHERE github_id = ?').bind(userData.id).first<User>();\n\n    // 7. If user does not exist, create a new user record\n    if (!user) {\n        const name = userData.name || userData.login;\n        const now = new Date().toISOString();\n        await env.DB.prepare(\n            'INSERT INTO users (email, name, provider, provider_id, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)'\n        ).bind(userEmail, name, 'github', userData.id, now, now).run();\n\n        // Retrieve the newly created user\n        user = await env.DB.prepare('SELECT id, name, email FROM users WHERE github_id = ?').bind(userData.id).first<User>();\n    }\n\n    if (!user) {\n        return new Response('Failed to create or find user.', { status: 500 });\n    }\n\n    // 8. User is now authenticated. Redirect to the dashboard.\n    // (In a real app, you would create a session/JWT here)\n    const redirectUrl = new URL(`${url.origin}/dashboard`);\n    redirectUrl.searchParams.set('status', 'loggedIn');\n    redirectUrl.searchParams.set('userId', user.id.toString());\n    redirectUrl.searchParams.set('name', user.name);\n    redirectUrl.searchParams.set('email', user.email);\n\n    return Response.redirect(redirectUrl.toString(), 302);\n\n  } catch (error) {\n    console.error('GitHub OAuth Error:', error);\n    const errorUrl = new URL(`${url.origin}/login`);\n    errorUrl.searchParams.set('error', 'github_oauth_failed');\n    return Response.redirect(errorUrl.toString(), 302);\n  }\n};\n", "import { Env } from '../../lib/context';\n\n// Type definitions\ninterface AuthSettings {\n  google_enabled: number;\n  google_client_id: string;\n  google_client_secret: string;\n}\n\ninterface GoogleTokenResponse {\n  access_token: string;\n  id_token: string;\n  expires_in: number;\n  token_type: string;\n  scope: string;\n}\n\ninterface GoogleUserResponse {\n  id: string;\n  email: string;\n  verified_email: boolean;\n  name: string;\n  given_name: string;\n  family_name: string;\n  picture: string;\n}\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  const url = new URL(request.url);\n  const code = url.searchParams.get('code');\n\n  try {\n    // 1. Fetch auth settings from the database\n    const authSettings = await env.DB.prepare(\n      'SELECT google_enabled, google_client_id, google_client_secret FROM auth_settings WHERE id = 1'\n    ).first<AuthSettings>();\n\n    if (!authSettings?.google_enabled) {\n      return new Response('Google login is not enabled.', { status: 400 });\n    }\n\n    const { google_client_id, google_client_secret } = authSettings;\n    const redirectUri = `${url.origin}/api/auth/google`;\n\n    // 2. If no code is present, redirect to Google for authentication\n    if (!code) {\n      const authUrl = new URL('https://accounts.google.com/o/oauth2/v2/auth');\n      authUrl.searchParams.set('client_id', google_client_id);\n      authUrl.searchParams.set('redirect_uri', redirectUri);\n      authUrl.searchParams.set('response_type', 'code');\n      authUrl.searchParams.set('scope', 'openid email profile');\n      return Response.redirect(authUrl.toString(), 302);\n    }\n\n    // 3. Exchange the authorization code for an access token\n    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: new URLSearchParams({\n        client_id: google_client_id,\n        client_secret: google_client_secret,\n        redirect_uri: redirectUri,\n        grant_type: 'authorization_code',\n        code,\n      }),\n    });\n\n    if (!tokenResponse.ok) {\n      const errorText = await tokenResponse.text();\n      throw new Error(`Failed to get access token: ${errorText}`);\n    }\n\n    const tokenData = await tokenResponse.json() as GoogleTokenResponse;\n\n    // 4. Use the access token to fetch user details from Google\n    const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {\n      headers: { 'Authorization': `Bearer ${tokenData.access_token}` },\n    });\n\n    if (!userResponse.ok) {\n      throw new Error('Failed to fetch user data from Google.');\n    }\n\n    const userData = await userResponse.json() as GoogleUserResponse;\n\n    if (!userData.email || !userData.verified_email) {\n      return new Response('A verified email is required from Google.', { status: 400 });\n    }\n\n    // 5. Check if the user exists in the database or create a new one\n    let user = await env.DB.prepare('SELECT id, name, email FROM users WHERE email = ?').bind(userData.email).first<User>();\n\n    if (!user) {\n      const now = new Date().toISOString();\n      await env.DB.prepare(\n        'INSERT INTO users (email, name, provider, provider_id, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)'\n      ).bind(userData.email, userData.name, 'google', userData.id, now, now).run();\n\n      user = await env.DB.prepare('SELECT id, name, email FROM users WHERE email = ?').bind(userData.email).first<User>();\n    }\n\n    if (!user) {\n      return new Response('Could not create or find user.', { status: 500 });\n    }\n\n    // 6. Redirect to the dashboard, passing user info in the URL\n    const redirectURL = new URL('/dashboard', url.origin);\n    redirectURL.searchParams.set('userId', user.id.toString());\n    redirectURL.searchParams.set('name', user.name);\n    redirectURL.searchParams.set('email', user.email);\n\n    return Response.redirect(redirectURL.toString(), 302);\n\n  } catch (error) {\n    console.error('Google OAuth Error:', error);\n    const errorUrl = new URL('/login', url.origin);\n    errorUrl.searchParams.set('error', 'oauth_failed');\n    errorUrl.searchParams.set('provider', 'google');\n    return Response.redirect(errorUrl.toString(), 302);\n  }\n};\n", "import { UserStorage } from '../../lib/user-storage';\nimport { Env } from '../../lib/context';\nimport type { PagesFunction, HeadersInit } from '@cloudflare/workers-types';\n\ninterface RegisterBody {\n  email?: string;\n  password?: string;\n  name?: string;\n}\n\nconst jsonResponse = (body: object, status: number) => {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n  };\n  return new Response(JSON.stringify(body), { status, headers });\n};\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const { email, password, name } = await request.json<RegisterBody>();\n\n    if (!email || !password || !name) {\n      return jsonResponse({ success: false, message: 'Missing required fields.' }, 400);\n    }\n\n    const userStorage = new UserStorage(env.DB);\n    await userStorage.initializeUsers();\n    const existingUser = await userStorage.getUserByEmail(email);\n\n    if (existingUser) {\n      return jsonResponse({ success: false, message: 'An account with this email already exists.' }, 409);\n    }\n\n    const newUser = await userStorage.createUser(email, password, name);\n    const { password: _, ...userResponse } = newUser;\n\n    return jsonResponse({ success: true, message: 'Registration successful.', user: userResponse }, 201);\n\n  } catch (error) {\n    console.error('Registration Error:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    \n    if (errorMessage.includes('UNIQUE constraint failed')) {\n      return jsonResponse({ success: false, message: 'An account with this email already exists.' }, 409);\n    }\n\n    return jsonResponse({ success: false, message: 'Registration failed.', error: errorMessage }, 500);\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    } as HeadersInit,\n  });\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\ninterface CountdownBanner {\n  id: string;\n  title: string;\n  subtitle: string;\n  titleTranslations?: string;\n  subtitleTranslations?: string;\n  targetPrice: number;\n  originalPrice?: number;\n  endDate: string;\n  priority: number;\n  backgroundColor: string;\n  textColor: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const { env } = context;\n\n    // First check if there are banners in the countdown_banners table\n    const banner = await env.DB.prepare(`\n      SELECT * FROM countdown_banners \n      WHERE isActive = 1 \n      ORDER BY priority DESC, id ASC \n      LIMIT 1\n    `).first();\n\n    // Always check settings table for admin dashboard changes\n    try {\n      const settingsStorage = new (await import('../../lib/settings-storage')).SettingsStorage(env.DB);\n      const bannersData = await settingsStorage.getSetting('countdown_banners');\n      if (bannersData) {\n        const banners = JSON.parse(bannersData);\n        const activeBanner = banners.find((b: any) => b.isActive);\n        if (activeBanner) {\n          // Use admin dashboard price if available\n          return new Response(JSON.stringify({\n            id: activeBanner.id || 1,\n            isEnabled: activeBanner.isActive ? 1 : 0,\n            titleEn: activeBanner.title || 'Limited Time Offer!',\n            subtitleEn: activeBanner.subtitle || 'Get OCUS Job Hunter Extension at Special Price',\n            titleTranslations: activeBanner.titleTranslations || {},\n            subtitleTranslations: activeBanner.subtitleTranslations || {},\n            targetPrice: String(activeBanner.targetPrice || '1.00'),\n            originalPrice: String(activeBanner.originalPrice || '299.99'),\n            endDateTime: activeBanner.endDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n            backgroundColor: activeBanner.backgroundColor || '#FF6B35',\n            textColor: activeBanner.textColor || '#FFFFFF',\n            priority: activeBanner.priority || 1\n          }), {\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*'\n            }\n          });\n        }\n      }\n    } catch (settingsError) {\n      console.warn('Failed to check settings table for banners:', settingsError);\n    }\n\n    // If no banner found in countdown_banners table, return 404\n    if (!banner) {\n      return new Response(JSON.stringify({ message: 'No active countdown banner found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type',\n        },\n      });\n    }\n\n    // Parse translations if they exist\n    let titleTranslations = {};\n    let subtitleTranslations = {};\n    \n    try {\n      if (banner.titleTranslations && typeof banner.titleTranslations === 'string') {\n        titleTranslations = JSON.parse(banner.titleTranslations);\n      }\n    } catch (e) {\n      console.warn('Failed to parse titleTranslations:', e);\n    }\n    \n    try {\n      if (banner.subtitleTranslations && typeof banner.subtitleTranslations === 'string') {\n        subtitleTranslations = JSON.parse(banner.subtitleTranslations);\n      }\n    } catch (e) {\n      console.warn('Failed to parse subtitleTranslations:', e);\n    }\n\n    // Transform the data to match frontend expectations\n    const transformedBanner = {\n      id: parseInt(String(banner.id)) || 0,\n      isEnabled: banner.isActive,\n      titleEn: banner.title,\n      subtitleEn: banner.subtitle,\n      titleTranslations,\n      subtitleTranslations,\n      targetPrice: String(banner.targetPrice || '1.00'),\n      originalPrice: banner.originalPrice ? String(banner.originalPrice) : undefined,\n      endDateTime: banner.endDate, // Frontend expects endDateTime\n      backgroundColor: banner.backgroundColor,\n      textColor: banner.textColor,\n      priority: banner.priority,\n    };\n\n    return new Response(JSON.stringify(transformedBanner), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      },\n    });\n\n  } catch (error) {\n    console.error('Error fetching active countdown banner:', error);\n    return new Response(JSON.stringify({ \n      error: 'Failed to fetch active countdown banner',\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type',\n      },\n    });\n  }\n};\n\n// Handle OPTIONS requests for CORS\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "export const onRequestPost = async ({ request, env }: any) => {\n  try {\n    const { email, password, recaptchaToken } = await request.json();\n    \n    console.log('Login attempt for email:', email);\n    \n    // Fallback to demo credentials first\n    if (email === 'demo@example.com' && password === 'demo123') {\n      return new Response(JSON.stringify({\n        success: true,\n        user: {\n          id: 1,\n          email: 'demo@example.com',\n          name: 'Demo User',\n          role: 'customer'\n        },\n        token: 'demo-jwt-token'\n      }), {\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n    \n    if (!env.DB) {\n      console.error('Database not available');\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n    \n    // Check for user in users table (for registered customers)\n    let user = null;\n    try {\n      console.log('Querying users table for email:', email);\n      \n      // First check if user exists with email only\n      const emailOnlyResult = await env.DB.prepare(`\n        SELECT id, email, name, role, created_at, password\n        FROM users WHERE email = ?\n      `).bind(email).first();\n      \n      if (emailOnlyResult) {\n        console.log('User found with email:', email);\n        console.log('Stored password starts with:', emailOnlyResult.password?.substring(0, 10));\n        console.log('Input password:', password);\n        \n        // Check if password is hashed (bcrypt starts with $2b$)\n        if (emailOnlyResult.password?.startsWith('$2b$')) {\n          console.log('Password is hashed, implementing bcrypt comparison');\n          try {\n            // Import bcrypt for password comparison\n            const bcrypt = await import('bcryptjs');\n            const isMatch = await bcrypt.compare(password, emailOnlyResult.password);\n            if (isMatch) {\n              user = emailOnlyResult as any;\n              console.log('Bcrypt password match for user:', user.email);\n            } else {\n              console.log('Bcrypt password mismatch');\n            }\n          } catch (bcryptError) {\n            console.log('Bcrypt comparison failed:', bcryptError);\n          }\n        } else {\n          // Plain text password comparison (for demo users)\n          if (emailOnlyResult.password === password) {\n            user = emailOnlyResult as any;\n            console.log('Plain text password match for user:', user.email);\n          } else {\n            console.log('Plain text password mismatch');\n          }\n        }\n      } else {\n        console.log('No user found with this email in users table');\n      }\n    } catch (e) {\n      console.log('Users table query failed:', e);\n    }\n    \n    if (user) {\n      return new Response(JSON.stringify({\n        success: true,\n        user,\n        token: `jwt-token-${user.email}-${Date.now()}`\n      }), {\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n    \n    // Add more detailed logging for debugging\n    console.log('User found:', user ? 'Yes' : 'No');\n    console.log('Email check:', email);\n    console.log('Password length:', password ? password.length : 0);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Invalid credentials'\n    }), {\n      status: 401,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Login failed'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import { UserStorage } from '../../lib/user-storage';\n\nexport const onRequestGet = async ({ request, env }: any) => {\n  try {\n    const url = new URL(request.url);\n    const userId = url.searchParams.get('userId');\n    \n    if (!userId) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'User ID is required'\n      }), {\n        status: 400,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    const userStorage = new UserStorage(env.DB);\n    await userStorage.initializeUsers();\n    \n    const user = await userStorage.getUserById(parseInt(userId));\n    \n    if (!user) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'User not found'\n      }), {\n        status: 404,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Get premium status and purchase info from database\n    const userQuery = `\n      SELECT \n        id, email, name, role, created_at,\n        is_premium, premium_activated_at, total_spent, \n        total_orders, extension_activated\n      FROM users \n      WHERE id = ?\n    `;\n    const userResult = await env.DB.prepare(userQuery).bind(user.id).first();\n    \n    const profile = {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n      isPremium: Boolean(userResult?.is_premium),\n      premiumActivatedAt: userResult?.premium_activated_at,\n      totalSpent: parseFloat(userResult?.total_spent || '0'),\n      totalOrders: parseInt(userResult?.total_orders || '0'),\n      extensionActivated: Boolean(userResult?.extension_activated),\n      subscriptionStatus: userResult?.is_premium ? 'premium' : 'free',\n      plan: userResult?.is_premium ? 'premium' : 'free',\n      joinedDate: user.created_at?.split('T')[0] || '2024-01-15',\n      lastLogin: new Date().toISOString(),\n      createdAt: user.created_at,\n      settings: {\n        notifications: true,\n        emailUpdates: true,\n        theme: 'light'\n      }\n    };\n\n    return new Response(JSON.stringify(profile), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Failed to get user profile:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to load profile'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestPut = async ({ request }: any) => {\n  try {\n    const updates = await request.json();\n    \n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Profile updated successfully',\n      profile: {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      }\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Failed to update profile'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\ninterface RegisterRequest {\n  email: string;\n  password: string;\n  name: string;\n  recaptchaToken?: string;\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const { email, password, name, recaptchaToken } = await request.json() as RegisterRequest;\n    \n    if (!email || !password || !name) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Missing required fields'\n      }), {\n        status: 400,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Check if D1 database is available\n    if (!env.DB) {\n      console.error('D1 database not available');\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Create users table if it doesn't exist\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        name TEXT NOT NULL,\n        role TEXT DEFAULT 'customer',\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `).run();\n\n    // Create customers table if it doesn't exist\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS customers (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        email TEXT UNIQUE NOT NULL,\n        name TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        is_premium BOOLEAN DEFAULT 0,\n        extension_activated BOOLEAN DEFAULT 0,\n        total_spent DECIMAL(10,2) DEFAULT 0,\n        total_orders INTEGER DEFAULT 0\n      )\n    `).run();\n\n    const now = new Date().toISOString();\n\n    console.log('Registering user:', email, 'with password length:', password.length);\n\n    // Check if user already exists\n    const existingUser = await env.DB.prepare(`\n      SELECT id FROM users WHERE email = ?\n    `).bind(email).first();\n\n    if (existingUser) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'User already exists'\n      }), {\n        status: 400,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Insert user into users table\n    const userResult = await env.DB.prepare(`\n      INSERT INTO users (email, password, name, role, created_at)\n      VALUES (?, ?, ?, 'customer', ?)\n    `).bind(email, password, name, now).run();\n\n    console.log('User inserted with ID:', userResult.meta.last_row_id);\n\n    // Insert customer into customers table\n    const customerResult = await env.DB.prepare(`\n      INSERT INTO customers (email, name, created_at)\n      VALUES (?, ?, ?)\n    `).bind(email, name, now).run();\n\n    console.log('Customer inserted with ID:', customerResult.meta.last_row_id);\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Registration successful',\n      user: {\n        id: userResult.meta.last_row_id,\n        email,\n        name,\n        role: 'customer'\n      }\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error: any) {\n    console.error('Registration error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Registration failed: ' + error.message\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "export const onRequestGet = async () => {\n  // Demo customer statistics\n  const stats = {\n    totalApplications: 47,\n    successfulApplications: 12,\n    pendingApplications: 8,\n    rejectedApplications: 27,\n    successRate: 25.5,\n    averageResponseTime: '3.2 days',\n    monthlyApplications: [\n      { month: 'Jan', applications: 15, success: 4 },\n      { month: 'Feb', applications: 12, success: 3 },\n      { month: 'Mar', applications: 20, success: 5 }\n    ],\n    recentActivity: [\n      { date: '2024-03-15', action: 'Applied to Software Engineer at TechCorp', status: 'pending' },\n      { date: '2024-03-14', action: 'Interview scheduled with StartupXYZ', status: 'success' },\n      { date: '2024-03-13', action: 'Application rejected by BigTech Inc', status: 'rejected' }\n    ]\n  };\n\n  return new Response(JSON.stringify(stats), {\n    headers: { \n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "// Cloudflare Pages Function: /api/download-extension/premium\n// Handles premium extension download\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Check if user has premium access\n        // Handle demo user separately\n    if (token === 'demo-jwt-token') {\n      // Return a mock ZIP file for demo purposes\n      const mockZipContent = new Uint8Array([\n        0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00\n      ]);\n      \n      return new Response(mockZipContent, {\n        headers: {\n          'Content-Type': 'application/zip',\n          'Content-Disposition': 'attachment; filename=\"ocus-job-hunter-premium-v2.1.8-STABLE.zip\"',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // For real users, verify premium access from the database\n    if (token.startsWith('jwt-token-')) {\n      const parts = token.split('-');\n      if (parts.length < 3) {\n        return new Response('Invalid token format', { status: 401 });\n      }\n\n      const userEmail = parts[2]; // Token format: jwt-token-{email}-{timestamp}\n\n      if (!env.DB) {\n        return new Response('Database not available', { status: 500 });\n      }\n\n      // Check both customer status AND actual completed orders\n      const customer = await env.DB.prepare(\n        'SELECT id, extension_activated, total_spent FROM customers WHERE email = ?'\n      ).bind(userEmail).first<{ id: number; extension_activated: number; total_spent: string }>();\n\n      if (!customer) {\n        return new Response('Customer not found', { status: 404 });\n      }\n\n      // Verify customer has completed orders with payment (orders keyed by customer_email)\n      const orderCheck = await env.DB.prepare(`\n        SELECT COUNT(*) as orderCount, SUM(final_amount) as totalPaid\n        FROM orders \n        WHERE customer_email = ? AND status = 'completed' AND final_amount > 0\n      `).bind(userEmail).first<{ orderCount: number; totalPaid: string }>();\n\n      const hasValidPurchase = Boolean(customer.extension_activated) && \n                              orderCheck !== null && \n                              Number(orderCheck.orderCount || 0) > 0 && \n                              parseFloat(String(orderCheck.totalPaid || '0')) > 0;\n\n      if (hasValidPurchase) {\n        // Log the download attempt for security tracking\n        try {\n          const downloadToken = `download_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          const now = new Date().toISOString();\n          \n          await env.DB.prepare(`\n            INSERT INTO extension_downloads (\n              customer_id, download_token, download_type, downloaded_at, \n              ip_address, user_agent, created_at\n            ) VALUES (?, ?, 'premium', ?, ?, ?, ?)\n          `).bind(\n            customer.id,\n            downloadToken,\n            now,\n            request.headers.get('CF-Connecting-IP') || 'unknown',\n            request.headers.get('User-Agent') || 'unknown',\n            now\n          ).run();\n        } catch (e) {\n          console.log('Failed to log download:', e);\n        }\n\n        // User has premium access, return the mock ZIP file\n        const mockZipContent = new Uint8Array([\n          0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,\n          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n          0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n          0x00, 0x00, 0x00, 0x00\n        ]);\n        \n        return new Response(mockZipContent, {\n          headers: {\n            'Content-Type': 'application/zip',\n            'Content-Disposition': 'attachment; filename=\"ocus-job-hunter-premium-v2.1.8-STABLE.zip\"',\n            'Access-Control-Allow-Origin': '*'\n          }\n        });\n      }\n    }\n    \n    return new Response('Premium access required', { status: 403 });\n    \n  } catch (error: any) {\n    return new Response('Download failed', { status: 500 });\n  }\n};\n\n", "// Cloudflare Pages Function: /api/download-extension/trial\n// Handles trial extension download\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    // Trial version is available to everyone\n    const mockZipContent = new Uint8Array([\n      0x50, 0x4B, 0x03, 0x04, // ZIP file signature\n      0x14, 0x00, 0x00, 0x00, 0x08, 0x00, // Version, flags, compression\n      0x00, 0x00, 0x00, 0x00, // Date/time\n      0x00, 0x00, 0x00, 0x00, // CRC-32\n      0x00, 0x00, 0x00, 0x00, // Compressed size\n      0x00, 0x00, 0x00, 0x00, // Uncompressed size\n      0x00, 0x00, // Filename length\n      0x00, 0x00, // Extra field length\n      0x50, 0x4B, 0x05, 0x06, // End of central directory signature\n      0x00, 0x00, 0x00, 0x00, // Number of entries\n      0x00, 0x00, 0x00, 0x00, // Size of central directory\n      0x00, 0x00, 0x00, 0x00, // Offset of central directory\n      0x00, 0x00 // Comment length\n    ]);\n    \n    return new Response(mockZipContent, {\n      headers: {\n        'Content-Type': 'application/zip',\n        'Content-Disposition': 'attachment; filename=\"ocus-job-hunter-trial-v2.1.8-STABLE.zip\"',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error: any) {\n    return new Response('Download failed', { status: 500 });\n  }\n};\n", "import { PagesFunction, HeadersInit } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const url = new URL(request.url);\n    const downloadToken = url.searchParams.get('token');\n\n    if (!downloadToken) {\n      return new Response(JSON.stringify({ error: 'Download token is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        } as HeadersInit\n      });\n    }\n\n    // Verify download token and get order\n    const order = await env.DB.prepare(`\n      SELECT * FROM orders \n      WHERE downloadToken = ? AND status = 'completed'\n    `).bind(downloadToken).first();\n\n    if (!order) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired download token' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        } as HeadersInit\n      });\n    }\n\n    // Check download limits\n    if (Number(order.downloadCount) >= Number(order.maxDownloads)) {\n      return new Response(JSON.stringify({ \n        error: 'Download limit exceeded',\n        maxDownloads: order.maxDownloads,\n        currentDownloads: order.downloadCount\n      }), {\n        status: 403,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        } as HeadersInit\n      });\n    }\n\n    // Update download count\n    await env.DB.prepare(`\n      UPDATE orders \n      SET downloadCount = downloadCount + 1 \n      WHERE downloadToken = ?\n    `).bind(downloadToken).run();\n\n    // Log the download\n    console.log(`Premium extension downloaded for order ${order.id}, download count: ${Number(order.downloadCount) + 1}`);\n\n    // Return the extension file (this would be the actual file in production)\n    // For now, return a success response with download info\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Premium extension download authorized',\n      orderId: order.id,\n      downloadCount: Number(order.downloadCount) + 1,\n      maxDownloads: Number(order.maxDownloads),\n      activationCode: order.activationCode\n    }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      } as HeadersInit\n    });\n\n  } catch (error) {\n    console.error('Error processing download:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to process download',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      } as HeadersInit\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    } as HeadersInit,\n  });\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\n// Helper to return JSON responses\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const customerId = searchParams.get('customerId');\n\n    if (!customerId) {\n      return json({ error: 'Customer ID is required' }, 400);\n    }\n\n    // Query the database for invoices matching the customerId\n    const { results } = await env.DB.prepare(\n      'SELECT * FROM invoices WHERE customerId = ? ORDER BY invoiceDate DESC'\n    ).bind(customerId).all();\n\n    if (!results) {\n      return json([]);\n    }\n\n    return json(results);\n\n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const url = new URL(request.url);\n    const orderId = url.searchParams.get('orderId');\n    const invoiceNumber = url.searchParams.get('invoiceNumber');\n\n    if (!orderId && !invoiceNumber) {\n      return new Response(JSON.stringify({ error: 'Order ID or Invoice Number is required' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    let order = null;\n\n    try {\n      // Try to fetch from orders table first\n      const orderQuery = orderId \n        ? `SELECT * FROM orders WHERE id = ?`\n        : `SELECT * FROM orders WHERE invoiceNumber = ?`;\n      \n      order = await env.DB.prepare(orderQuery)\n        .bind(orderId || invoiceNumber)\n        .first();\n    } catch (dbError) {\n      console.log('Orders table not found, checking fallback storage:', dbError);\n      \n      // Fallback: Get orders from settings table\n      const settingsResults = await env.DB.prepare(`\n        SELECT key, value FROM settings \n        WHERE key LIKE 'order_%'\n      `).all();\n      \n      for (const setting of (settingsResults.results || [])) {\n        try {\n          const orderData = JSON.parse(setting.value as string);\n          if ((orderId && orderData.id == orderId) || \n              (invoiceNumber && orderData.invoiceNumber === invoiceNumber)) {\n            order = orderData;\n            break;\n          }\n        } catch (parseError) {\n          console.log('Error parsing order data:', parseError);\n        }\n      }\n    }\n\n    if (!order) {\n      return new Response(JSON.stringify({ error: 'Order not found' }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Generate invoice data\n    const invoiceData = {\n      invoiceNumber: order.invoiceNumber || '',\n      orderId: order.id,\n      customerEmail: order.customerEmail,\n      customerName: order.customerName,\n      issueDate: order.completedAt || order.createdAt,\n      dueDate: order.completedAt || order.createdAt,\n      \n      // Company details\n      company: {\n        name: 'OCUS Job Hunter',\n        address: 'Digital Services Company',\n        email: 'support@jobhunter.one',\n        website: 'https://jobhunter.one'\n      },\n      \n      // Customer details\n      customer: {\n        name: order.customerName,\n        email: order.customerEmail\n      },\n      \n      // Items\n      items: [{\n        description: order.productName,\n        quantity: 1,\n        unitPrice: order.finalAmount,\n        total: order.finalAmount\n      }],\n      \n      // Totals\n      subtotal: order.finalAmount,\n      tax: 0,\n      total: order.finalAmount,\n      currency: order.currency,\n      \n      // Payment details\n      paymentMethod: order.paymentMethod,\n      paymentStatus: order.status,\n      activationCode: order.activationCode,\n      downloadToken: order.downloadToken\n    };\n\n    return new Response(JSON.stringify({\n      success: true,\n      invoice: invoiceData\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error generating invoice:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to generate invoice',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "// Cloudflare Pages Function: /api/me/invoices\n// Handles user invoice retrieval for authenticated customers\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    // Check authorization header for token\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return json({ error: 'Unauthorized' }, 401);\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Handle demo-jwt-token\n    if (token === 'demo-jwt-token') {\n      return json([\n        {\n          id: 1,\n          invoice_number: 'INV-2025-000001',\n          order_id: 1,\n          customer_name: 'Demo User',\n          customer_email: 'demo@example.com',\n          invoice_date: new Date().toISOString(),\n          due_date: new Date().toISOString(),\n          subtotal: '29.99',\n          tax_amount: '0.00',\n          discount_amount: '0.00',\n          total_amount: '29.99',\n          currency: 'USD',\n          status: 'paid',\n          paid_at: new Date().toISOString(),\n          notes: 'Premium extension purchase',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n          payment_method: 'stripe'\n        }\n      ]);\n    }\n    \n    // Handle jwt-token-{email}-{timestamp} format\n    if (token.startsWith('jwt-token-')) {\n      const parts = token.split('-');\n      if (parts.length < 3) {\n        return json({ error: 'Invalid token' }, 401);\n      }\n      const userEmail = parts[2];\n\n      // Check database for real user invoices\n      if (!env.DB) {\n        return json({ error: 'Database not available' }, 500);\n      }\n\n      try {\n        // Get invoices for this customer with order details\n        const query = `\n          SELECT \n            i.id AS id,\n            i.invoice_number AS invoice_number,\n            i.order_id AS order_id,\n            i.customer_name AS customer_name,\n            i.customer_email AS customer_email,\n            i.invoice_date AS invoice_date,\n            i.due_date AS due_date,\n            i.subtotal AS subtotal,\n            i.tax_amount AS tax_amount,\n            i.discount_amount AS discount_amount,\n            i.total_amount AS total_amount,\n            i.currency AS currency,\n            i.status AS status,\n            i.paid_at AS paid_at,\n            i.notes AS notes,\n            i.created_at AS created_at,\n            i.updated_at AS updated_at,\n            o.payment_method AS payment_method\n          FROM invoices i\n          LEFT JOIN orders o ON i.order_id = o.id\n          WHERE i.customer_email = ?\n          ORDER BY i.created_at DESC\n        `;\n\n        const invoices = await env.DB.prepare(query).bind(userEmail).all();\n        return json(invoices.results || []);\n\n      } catch (dbError) {\n        console.error('Database error in /api/me/invoices:', dbError);\n        return json({ error: 'Database error' }, 500);\n      }\n    }\n    \n    // For any other token, return unauthorized\n    return json({ error: 'Invalid token' }, 401);\n    \n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n", "// Cloudflare Pages Function: /api/me/orders\n// Handles user order/purchase history retrieval for authenticated customers\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    // Check authorization header for token\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return json({ error: 'Unauthorized' }, 401);\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Handle demo-jwt-token\n    if (token === 'demo-jwt-token') {\n      return json([\n        {\n          id: 1,\n          customerEmail: 'demo@example.com',\n          customerName: 'Demo User',\n          originalAmount: '29.99',\n          finalAmount: '29.99',\n          currency: 'eur',\n          status: 'completed',\n          paymentMethod: 'stripe',\n          downloadToken: 'demo-download-token',\n          downloadCount: 1,\n          maxDownloads: 5,\n          activationCode: 'DEMO-ACTIVATION-CODE',\n          createdAt: new Date().toISOString(),\n          completedAt: new Date().toISOString()\n        }\n      ]);\n    }\n    \n    // Handle jwt-token-{userId}-{timestamp} format\n    if (token.startsWith('jwt-token-')) {\n      const parts = token.split('-');\n      if (parts.length >= 3) {\n        const userId = parts[2];\n        \n        // Check database for real user orders\n        if (!env.DB) {\n          return json({ error: 'Database not available' }, 500);\n        }\n\n        try {\n          // Use D1 Sessions API for consistent reads after writes\n          const session = env.DB.withSession('first-primary');\n          \n          // Get customer info first\n          const customer = await session.prepare(`\n            SELECT id FROM customers WHERE email = ?\n          `).bind(userId).first<{ id: number }>();\n\n          if (!customer) {\n            return json([]);\n          }\n\n          // Get orders for this customer\n          const orders = await session.prepare(`\n            SELECT \n              id,\n              customer_email AS customerEmail,\n              customer_name AS customerName,\n              original_amount AS originalAmount,\n              final_amount AS finalAmount,\n              currency,\n              status,\n              payment_method AS paymentMethod,\n              payment_intent_id AS paymentIntentId,\n              download_token AS downloadToken,\n              download_count AS downloadCount,\n              max_downloads AS maxDownloads,\n              activation_code AS activationCode,\n              invoice_url AS invoiceUrl,\n              created_at AS createdAt,\n              completed_at AS completedAt\n            FROM orders \n            WHERE customer_email = ?\n            ORDER BY created_at DESC\n          `).bind(userId).all();\n\n          return json(orders.results || []);\n\n        } catch (dbError) {\n          console.error('Database error in /api/me/orders:', dbError);\n          return json({ error: 'Database error' }, 500);\n        }\n      }\n    }\n    \n    // For any other token, return unauthorized\n    return json({ error: 'Invalid token' }, 401);\n    \n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n", "import { PagesFunction } from '@cloudflare/workers-types';\n\ninterface Env {\n  DB: D1Database;\n}\n\ninterface CompletePurchaseRequest {\n  paymentIntentId: string;\n  customerEmail: string;\n  customerName: string;\n  amount: number;\n  currency: string;\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const body = await request.json() as CompletePurchaseRequest;\n    const { paymentIntentId, customerEmail, customerName, amount, currency } = body;\n\n    if (!paymentIntentId || !customerEmail || !customerName || !amount) {\n      return new Response(JSON.stringify({ error: 'Missing required fields' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Generate unique tokens\n    const downloadToken = crypto.randomUUID();\n    const activationCode = Math.random().toString(36).substring(2, 15).toUpperCase();\n    const invoiceNumber = `INV-${Date.now()}-${Math.random().toString(36).substring(2, 8).toUpperCase()}`;\n\n    let orderId = null;\n\n    try {\n      // Try to create order record if orders table exists\n      const orderResult = await env.DB.prepare(`\n        INSERT INTO orders (\n          customerEmail, customerName, productId, productName,\n          originalAmount, finalAmount, currency, status, paymentMethod,\n          paymentIntentId, downloadToken, activationCode, invoiceNumber,\n          completedAt\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'))\n      `).bind(\n        customerEmail,\n        customerName,\n        1, // Product ID for OCUS Extension\n        'OCUS Job Hunter Extension',\n        amount,\n        amount,\n        currency.toUpperCase(),\n        'completed',\n        'stripe',\n        paymentIntentId,\n        downloadToken,\n        activationCode,\n        invoiceNumber\n      ).run();\n      \n      orderId = orderResult.meta?.last_row_id;\n    } catch (dbError) {\n      console.log('Orders table not found, using fallback storage:', dbError);\n      // Fallback: Store in settings table as JSON\n      const orderData = {\n        id: Date.now(),\n        customerEmail,\n        customerName,\n        productId: 1,\n        productName: 'OCUS Job Hunter Extension',\n        originalAmount: amount,\n        finalAmount: amount,\n        currency: currency.toUpperCase(),\n        status: 'completed',\n        paymentMethod: 'stripe',\n        paymentIntentId,\n        downloadToken,\n        activationCode,\n        invoiceNumber,\n        completedAt: new Date().toISOString()\n      };\n      \n      // Store in settings table\n      const settingsKey = `order_${paymentIntentId}`;\n      await env.DB.prepare(`\n        INSERT OR REPLACE INTO settings (key, value, updated_at)\n        VALUES (?, ?, datetime('now'))\n      `).bind(settingsKey, JSON.stringify(orderData)).run();\n      \n      orderId = orderData.id;\n    }\n\n    try {\n      // Try to create or update user record if users table exists\n      await env.DB.prepare(`\n        INSERT OR REPLACE INTO users (\n          email, name, isPremium, lastLoginAt, updatedAt\n        ) VALUES (?, ?, 1, datetime('now'), datetime('now'))\n      `).bind(customerEmail, customerName).run();\n    } catch (userDbError) {\n      console.log('Users table not found, using fallback storage:', userDbError);\n      // Fallback: Store user in settings table\n      const userData = {\n        email: customerEmail,\n        name: customerName,\n        isPremium: true,\n        lastLoginAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      const userSettingsKey = `user_${customerEmail.replace('@', '_at_').replace('.', '_dot_')}`;\n      await env.DB.prepare(`\n        INSERT OR REPLACE INTO settings (key, value, updated_at)\n        VALUES (?, ?, datetime('now'))\n      `).bind(userSettingsKey, JSON.stringify(userData)).run();\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      orderId,\n      downloadToken,\n      activationCode,\n      invoiceNumber,\n      message: 'Purchase completed successfully'\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error completing purchase:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to complete purchase',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "export const entityKind = Symbol.for('drizzle:entityKind');\nexport const hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\n\nexport interface DrizzleEntity {\n\t[entityKind]: string;\n}\n\nexport type DrizzleEntityClass<T> =\n\t& ((abstract new(...args: any[]) => T) | (new(...args: any[]) => T))\n\t& DrizzleEntity;\n\nexport function is<T extends DrizzleEntityClass<any>>(value: any, type: T): value is InstanceType<T> {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n\t\treturn true;\n\t}\n\n\tif (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n\t\tthrow new Error(\n\t\t\t`Class \"${\n\t\t\t\ttype.name ?? '<unknown>'\n\t\t\t}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,\n\t\t);\n\t}\n\n\tlet cls = Object.getPrototypeOf(value).constructor;\n\tif (cls) {\n\t\t// Traverse the prototype chain to find the entityKind\n\t\twhile (cls) {\n\t\t\tif (entityKind in cls && cls[entityKind] === type[entityKind]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcls = Object.getPrototypeOf(cls);\n\t\t}\n\t}\n\n\treturn false;\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tGeneratedColumnConfig,\n\tGeneratedIdentityConfig,\n} from './column-builder.ts';\nimport { entityKind } from './entity.ts';\nimport type { DriverValueMapper, SQL, SQLWrapper } from './sql/sql.ts';\nimport type { Table } from './table.ts';\nimport type { Update } from './utils.ts';\n\nexport interface ColumnBaseConfig<\n\tTDataType extends ColumnDataType,\n\tTColumnType extends string,\n> extends ColumnBuilderBaseConfig<TDataType, TColumnType> {\n\ttableName: string;\n\tnotNull: boolean;\n\thasDefault: boolean;\n\tisPrimaryKey: boolean;\n\tisAutoincrement: boolean;\n\thasRuntimeDefault: boolean;\n}\n\nexport type ColumnTypeConfig<T extends ColumnBaseConfig<ColumnDataType, string>, TTypeConfig extends object> = T & {\n\tbrand: 'Column';\n\ttableName: T['tableName'];\n\tname: T['name'];\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T['notNull'];\n\thasDefault: T['hasDefault'];\n\tisPrimaryKey: T['isPrimaryKey'];\n\tisAutoincrement: T['isAutoincrement'];\n\thasRuntimeDefault: T['hasRuntimeDefault'];\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseColumn: infer U } ? U : unknown;\n\tgenerated: GeneratedColumnConfig<T['data']> | undefined;\n\tidentity: undefined | 'always' | 'byDefault';\n} & TTypeConfig;\n\nexport type ColumnRuntimeConfig<TData, TRuntimeConfig extends object> = ColumnBuilderRuntimeConfig<\n\tTData,\n\tTRuntimeConfig\n>;\n\nexport interface Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTRuntimeConfig extends object = object,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTTypeConfig extends object = object,\n> extends DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n/*\n\t`Column` only accepts a full `ColumnConfig` as its generic.\n\tTo infer parts of the config, use `AnyColumn` that accepts a partial config.\n\tSee `GetColumnData` for example usage of inferring.\n*/\nexport abstract class Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n> implements DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Column';\n\n\tdeclare readonly _: ColumnTypeConfig<T, TTypeConfig>;\n\n\treadonly name: string;\n\treadonly keyAsName: boolean;\n\treadonly primary: boolean;\n\treadonly notNull: boolean;\n\treadonly default: T['data'] | SQL | undefined;\n\treadonly defaultFn: (() => T['data'] | SQL) | undefined;\n\treadonly onUpdateFn: (() => T['data'] | SQL) | undefined;\n\treadonly hasDefault: boolean;\n\treadonly isUnique: boolean;\n\treadonly uniqueName: string | undefined;\n\treadonly uniqueType: string | undefined;\n\treadonly dataType: T['dataType'];\n\treadonly columnType: T['columnType'];\n\treadonly enumValues: T['enumValues'] = undefined;\n\treadonly generated: GeneratedColumnConfig<T['data']> | undefined = undefined;\n\treadonly generatedIdentity: GeneratedIdentityConfig | undefined = undefined;\n\n\tprotected config: ColumnRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(\n\t\treadonly table: Table,\n\t\tconfig: ColumnRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tthis.config = config;\n\t\tthis.name = config.name;\n\t\tthis.keyAsName = config.keyAsName;\n\t\tthis.notNull = config.notNull;\n\t\tthis.default = config.default;\n\t\tthis.defaultFn = config.defaultFn;\n\t\tthis.onUpdateFn = config.onUpdateFn;\n\t\tthis.hasDefault = config.hasDefault;\n\t\tthis.primary = config.primaryKey;\n\t\tthis.isUnique = config.isUnique;\n\t\tthis.uniqueName = config.uniqueName;\n\t\tthis.uniqueType = config.uniqueType;\n\t\tthis.dataType = config.dataType as T['dataType'];\n\t\tthis.columnType = config.columnType;\n\t\tthis.generated = config.generated;\n\t\tthis.generatedIdentity = config.generatedIdentity;\n\t}\n\n\tabstract getSQLType(): string;\n\n\tmapFromDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\tmapToDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\t// ** @internal */\n\tshouldDisableInsert(): boolean {\n\t\treturn this.config.generated !== undefined && this.config.generated.type !== 'byDefault';\n\t}\n}\n\nexport type UpdateColConfig<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTUpdate extends Partial<ColumnBaseConfig<ColumnDataType, string>>,\n> = Update<T, TUpdate>;\n\nexport type AnyColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = Column<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type GetColumnData<TColumn extends Column, TInferMode extends 'query' | 'raw' = 'query'> =\n\t// dprint-ignore\n\tTInferMode extends 'raw' // Raw mode\n\t\t? TColumn['_']['data'] // Just return the underlying type\n\t\t: TColumn['_']['notNull'] extends true // Query mode\n\t\t? TColumn['_']['data'] // Query mode, not null\n\t\t: TColumn['_']['data'] | null; // Query mode, nullable\n\nexport type InferColumnsDataTypes<TColumns extends Record<string, Column>> = {\n\t[Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;\n};\n", "import { entityKind } from '~/entity.ts';\nimport type { Column } from './column.ts';\nimport type { MySqlColumn } from './mysql-core/index.ts';\nimport type { ExtraConfigColumn, PgColumn, PgSequenceOptions } from './pg-core/index.ts';\nimport type { SingleStoreColumn } from './singlestore-core/index.ts';\nimport type { SQL } from './sql/sql.ts';\nimport type { SQLiteColumn } from './sqlite-core/index.ts';\nimport type { Assume, Simplify } from './utils.ts';\n\nexport type ColumnDataType =\n\t| 'string'\n\t| 'number'\n\t| 'boolean'\n\t| 'array'\n\t| 'json'\n\t| 'date'\n\t| 'bigint'\n\t| 'custom'\n\t| 'buffer';\n\nexport type Dialect = 'pg' | 'mysql' | 'sqlite' | 'singlestore' | 'common';\n\nexport type GeneratedStorageMode = 'virtual' | 'stored';\n\nexport type GeneratedType = 'always' | 'byDefault';\n\nexport type GeneratedColumnConfig<TDataType> = {\n\tas: TDataType | SQL | (() => SQL);\n\ttype?: GeneratedType;\n\tmode?: GeneratedStorageMode;\n};\n\nexport type GeneratedIdentityConfig = {\n\tsequenceName?: string;\n\tsequenceOptions?: PgSequenceOptions;\n\ttype: 'always' | 'byDefault';\n};\n\nexport interface ColumnBuilderBaseConfig<TDataType extends ColumnDataType, TColumnType extends string> {\n\tname: string;\n\tdataType: TDataType;\n\tcolumnType: TColumnType;\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: string[] | undefined;\n}\n\nexport type MakeColumnConfig<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTableName extends string,\n\tTData = T extends { $type: infer U } ? U : T['data'],\n> = {\n\tname: T['name'];\n\ttableName: TTableName;\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: TData;\n\tdriverParam: T['driverParam'];\n\tnotNull: T extends { notNull: true } ? true : false;\n\thasDefault: T extends { hasDefault: true } ? true : false;\n\tisPrimaryKey: T extends { isPrimaryKey: true } ? true : false;\n\tisAutoincrement: T extends { isAutoincrement: true } ? true : false;\n\thasRuntimeDefault: T extends { hasRuntimeDefault: true } ? true : false;\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseBuilder: infer U extends ColumnBuilderBase } ? BuildColumn<TTableName, U, 'common'>\n\t\t: never;\n\tidentity: T extends { identity: 'always' } ? 'always' : T extends { identity: 'byDefault' } ? 'byDefault' : undefined;\n\tgenerated: T extends { generated: infer G } ? unknown extends G ? undefined\n\t\t: G extends undefined ? undefined\n\t\t: G\n\t\t: undefined;\n} & {};\n\nexport type ColumnBuilderTypeConfig<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> = Simplify<\n\t& {\n\t\tbrand: 'ColumnBuilder';\n\t\tname: T['name'];\n\t\tdataType: T['dataType'];\n\t\tcolumnType: T['columnType'];\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverParam'];\n\t\tnotNull: T extends { notNull: infer U } ? U : boolean;\n\t\thasDefault: T extends { hasDefault: infer U } ? U : boolean;\n\t\tenumValues: T['enumValues'];\n\t\tidentity: T extends { identity: infer U } ? U : unknown;\n\t\tgenerated: T extends { generated: infer G } ? G extends undefined ? unknown : G : unknown;\n\t}\n\t& TTypeConfig\n>;\n\nexport type ColumnBuilderRuntimeConfig<TData, TRuntimeConfig extends object = object> = {\n\tname: string;\n\tkeyAsName: boolean;\n\tnotNull: boolean;\n\tdefault: TData | SQL | undefined;\n\tdefaultFn: (() => TData | SQL) | undefined;\n\tonUpdateFn: (() => TData | SQL) | undefined;\n\thasDefault: boolean;\n\tprimaryKey: boolean;\n\tisUnique: boolean;\n\tuniqueName: string | undefined;\n\tuniqueType: string | undefined;\n\tdataType: string;\n\tcolumnType: string;\n\tgenerated: GeneratedColumnConfig<TData> | undefined;\n\tgeneratedIdentity: GeneratedIdentityConfig | undefined;\n} & TRuntimeConfig;\n\nexport interface ColumnBuilderExtraConfig {\n\tprimaryKeyHasDefault?: boolean;\n}\n\nexport type NotNull<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tnotNull: true;\n\t};\n};\n\nexport type HasDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasDefault: true;\n\t};\n};\n\nexport type IsPrimaryKey<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisPrimaryKey: true;\n\t};\n};\n\nexport type IsAutoincrement<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisAutoincrement: true;\n\t};\n};\n\nexport type HasRuntimeDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasRuntimeDefault: true;\n\t};\n};\n\nexport type $Type<T extends ColumnBuilderBase, TType> = T & {\n\t_: {\n\t\t$type: TType;\n\t};\n};\n\nexport type HasGenerated<T extends ColumnBuilderBase, TGenerated extends {} = {}> = T & {\n\t_: {\n\t\thasDefault: true;\n\t\tgenerated: TGenerated;\n\t};\n};\n\nexport type IsIdentity<\n\tT extends ColumnBuilderBase,\n\tTType extends 'always' | 'byDefault',\n> = T & {\n\t_: {\n\t\tnotNull: true;\n\t\thasDefault: true;\n\t\tidentity: TType;\n\t};\n};\nexport interface ColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> {\n\t_: ColumnBuilderTypeConfig<T, TTypeConfig>;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nexport abstract class ColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> implements ColumnBuilderBase<T, TTypeConfig> {\n\tstatic readonly [entityKind]: string = 'ColumnBuilder';\n\n\tdeclare _: ColumnBuilderTypeConfig<T, TTypeConfig>;\n\n\tprotected config: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tkeyAsName: name === '',\n\t\t\tnotNull: false,\n\t\t\tdefault: undefined,\n\t\t\thasDefault: false,\n\t\t\tprimaryKey: false,\n\t\t\tisUnique: false,\n\t\t\tuniqueName: undefined,\n\t\t\tuniqueType: undefined,\n\t\t\tdataType,\n\t\t\tcolumnType,\n\t\t\tgenerated: undefined,\n\t\t} as ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\t}\n\n\t/**\n\t * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n\t *\n\t * @example\n\t * ```ts\n\t * const users = pgTable('users', {\n\t * \tid: integer('id').$type<UserId>().primaryKey(),\n\t * \tdetails: json('details').$type<UserDetails>().notNull(),\n\t * });\n\t * ```\n\t */\n\t$type<TType>(): $Type<this, TType> {\n\t\treturn this as $Type<this, TType>;\n\t}\n\n\t/**\n\t * Adds a `not null` clause to the column definition.\n\t *\n\t * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n\t */\n\tnotNull(): NotNull<this> {\n\t\tthis.config.notNull = true;\n\t\treturn this as NotNull<this>;\n\t}\n\n\t/**\n\t * Adds a `default <value>` clause to the column definition.\n\t *\n\t * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n\t *\n\t * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n\t */\n\tdefault(value: (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL): HasDefault<this> {\n\t\tthis.config.default = value;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Adds a dynamic default value to the column.\n\t * The function will be called when the row is inserted, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$defaultFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasRuntimeDefault<HasDefault<this>> {\n\t\tthis.config.defaultFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasRuntimeDefault<HasDefault<this>>;\n\t}\n\n\t/**\n\t * Alias for {@link $defaultFn}.\n\t */\n\t$default = this.$defaultFn;\n\n\t/**\n\t * Adds a dynamic update value to the column.\n\t * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n\t * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$onUpdateFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.onUpdateFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $onUpdateFn}.\n\t */\n\t$onUpdate = this.$onUpdateFn;\n\n\t/**\n\t * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n\t *\n\t * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n\t */\n\tprimaryKey(): TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t: IsPrimaryKey<NotNull<this>>\n\t{\n\t\tthis.config.primaryKey = true;\n\t\tthis.config.notNull = true;\n\t\treturn this as TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t\t: IsPrimaryKey<NotNull<this>>;\n\t}\n\n\tabstract generatedAlwaysAs(\n\t\tas: SQL | T['data'] | (() => SQL),\n\t\tconfig?: Partial<GeneratedColumnConfig<unknown>>,\n\t): HasGenerated<this, {\n\t\ttype: 'always';\n\t}>;\n\n\t/** @internal Sets the name of the column to the key within the table definition if a name was not given. */\n\tsetName(name: string) {\n\t\tif (this.config.name !== '') return;\n\t\tthis.config.name = name;\n\t}\n}\n\nexport type BuildColumn<\n\tTTableName extends string,\n\tTBuilder extends ColumnBuilderBase,\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? PgColumn<\n\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t{},\n\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t>\n\t: TDialect extends 'mysql' ? MySqlColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'mysqlColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: TDialect extends 'sqlite' ? SQLiteColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'common' ? Column<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<Omit<TBuilder['_'], keyof MakeColumnConfig<TBuilder['_'], TTableName> | 'brand' | 'dialect'>>\n\t\t>\n\t: TDialect extends 'singlestore' ? SingleStoreColumn<\n\t\t\tMakeColumnConfig<TBuilder['_'], TTableName>,\n\t\t\t{},\n\t\t\tSimplify<\n\t\t\t\tOmit<\n\t\t\t\t\tTBuilder['_'],\n\t\t\t\t\t| keyof MakeColumnConfig<TBuilder['_'], TTableName>\n\t\t\t\t\t| 'brand'\n\t\t\t\t\t| 'dialect'\n\t\t\t\t\t| 'primaryKeyHasDefault'\n\t\t\t\t\t| 'singlestoreColumnBuilderBrand'\n\t\t\t\t>\n\t\t\t>\n\t\t>\n\t: never;\n\nexport type BuildIndexColumn<\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? ExtraConfigColumn : never;\n\n// TODO\n// try to make sql as well + indexRaw\n\n// optional after everything will be working as expected\n// also try to leave only needed methods for extraConfig\n// make an error if I pass .asc() to fk and so on\n\nexport type BuildColumns<\n\tTTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildColumn<TTableName, {\n\t\t\t_:\n\t\t\t\t& Omit<TConfigMap[Key]['_'], 'name'>\n\t\t\t\t& { name: TConfigMap[Key]['_']['name'] extends '' ? Assume<Key, string> : TConfigMap[Key]['_']['name'] };\n\t\t}, TDialect>;\n\t}\n\t& {};\n\nexport type BuildExtraConfigColumns<\n\t_TTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildIndexColumn<TDialect>;\n\t}\n\t& {};\n\nexport type ChangeColumnTableName<TColumn extends Column, TAlias extends string, TDialect extends Dialect> =\n\tTDialect extends 'pg' ? PgColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'singlestore' ? SingleStoreColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: never;\n", "/** @internal */\nexport const TableName = Symbol.for('drizzle:Name');\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: PgColumn[];\n\treadonly foreignTable: PgTable;\n\treadonly foreignColumns: PgColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgForeignKeyBuilder';\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined = 'no action';\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined = 'no action';\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: PgColumn[];\n\t\t\tforeignColumns: PgColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as PgTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport type AnyForeignKeyBuilder = ForeignKeyBuilder;\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'PgForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: PgTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends PgColumn[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TTableName }> };\n\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnyPgColumn<{ tableName: TTableName }>, ...AnyPgColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tconst { name, columns, foreignColumns } = config;\n\t\treturn {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tforeignColumns,\n\t\t};\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "export function iife<T extends unknown[], U>(fn: (...args: T) => U, ...args: T): U {\n\treturn fn(...args);\n}\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport function uniqueKeyName(table: PgTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\t/** @internal */\n\tnullsNotDistinctConfig = false;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\tnullsNotDistinct() {\n\t\tthis.nullsNotDistinctConfig = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [PgColumn, ...PgColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraint';\n\n\treadonly columns: PgColumn[];\n\treadonly name?: string;\n\treadonly nullsNotDistinct: boolean = false;\n\n\tconstructor(readonly table: PgTable, columns: PgColumn[], nullsNotDistinct: boolean, name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t\tthis.nullsNotDistinct = nullsNotDistinct;\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "function parsePgArrayValue(arrayString: string, startFrom: number, inQuotes: boolean): [string, number] {\n\tfor (let i = startFrom; i < arrayString.length; i++) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === '\\\\') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i + 1];\n\t\t}\n\n\t\tif (inQuotes) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === ',' || char === '}') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i];\n\t\t}\n\t}\n\n\treturn [arrayString.slice(startFrom).replace(/\\\\/g, ''), arrayString.length];\n}\n\nexport function parsePgNestedArray(arrayString: string, startFrom = 0): [any[], number] {\n\tconst result: any[] = [];\n\tlet i = startFrom;\n\tlet lastCharIsComma = false;\n\n\twhile (i < arrayString.length) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === ',') {\n\t\t\tif (lastCharIsComma || i === startFrom) {\n\t\t\t\tresult.push('');\n\t\t\t}\n\t\t\tlastCharIsComma = true;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlastCharIsComma = false;\n\n\t\tif (char === '\\\\') {\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\tconst [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '}') {\n\t\t\treturn [result, i + 1];\n\t\t}\n\n\t\tif (char === '{') {\n\t\t\tconst [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n\t\tresult.push(value);\n\t\ti = newStartFrom;\n\t}\n\n\treturn [result, i];\n}\n\nexport function parsePgArray(arrayString: string): any[] {\n\tconst [result] = parsePgNestedArray(arrayString, 1);\n\treturn result;\n}\n\nexport function makePgArray(array: any[]): string {\n\treturn `{${\n\t\tarray.map((item) => {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturn makePgArray(item);\n\t\t\t}\n\n\t\t\tif (typeof item === 'string') {\n\t\t\t\treturn `\"${item.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`;\n\t\t\t}\n\n\t\t\treturn `${item}`;\n\t\t}).join(',')\n\t}}`;\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { Simplify, Update } from '~/utils.ts';\n\nimport type { ForeignKey, UpdateDeleteAction } from '~/pg-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/pg-core/foreign-keys.ts';\nimport type { AnyPgTable, PgTable } from '~/pg-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport { iife } from '~/tracing-utils.ts';\nimport type { PgIndexOpClass } from '../indexes.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\nimport { makePgArray, parsePgArray } from '../utils/array.ts';\n\nexport interface ReferenceConfig {\n\tref: () => PgColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface PgColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'pg' }> {}\n\nexport abstract class PgColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }, TExtraConfig>\n\timplements PgColumnBuilderBase<T, TTypeConfig>\n{\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\tstatic override readonly [entityKind]: string = 'PgColumnBuilder';\n\n\tarray<TSize extends number | undefined = undefined>(size?: TSize): PgArrayBuilder<\n\t\t& {\n\t\t\tname: T['name'];\n\t\t\tdataType: 'array';\n\t\t\tcolumnType: 'PgArray';\n\t\t\tdata: T['data'][];\n\t\t\tdriverParam: T['driverParam'][] | string;\n\t\t\tenumValues: T['enumValues'];\n\t\t\tsize: TSize;\n\t\t\tbaseBuilder: T;\n\t\t}\n\t\t& (T extends { notNull: true } ? { notNull: true } : {})\n\t\t& (T extends { hasDefault: true } ? { hasDefault: true } : {}),\n\t\tT\n\t> {\n\t\treturn new PgArrayBuilder(this.config.name, this as PgColumnBuilder<any, any>, size as any);\n\t}\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t\tconfig?: { nulls: 'distinct' | 'not distinct' },\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\tthis.config.uniqueType = config?.nulls;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL)): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: 'stored',\n\t\t};\n\t\treturn this as HasGenerated<this, {\n\t\t\ttype: 'always';\n\t\t}>;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: PgColumn, table: PgTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn iife(\n\t\t\t\t(ref, actions) => {\n\t\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t\t});\n\t\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t\t}\n\t\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t\t}\n\t\t\t\t\treturn builder.build(table);\n\t\t\t\t},\n\t\t\t\tref,\n\t\t\t\tactions,\n\t\t\t);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgColumn<MakeColumnConfig<T, TTableName>>;\n\n\t/** @internal */\n\tbuildExtraConfigColumn<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): ExtraConfigColumn {\n\t\treturn new ExtraConfigColumn(table, this.config);\n\t}\n}\n\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class PgColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }> {\n\tstatic override readonly [entityKind]: string = 'PgColumn';\n\n\tconstructor(\n\t\toverride readonly table: PgTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type IndexedExtraConfigType = { order?: 'asc' | 'desc'; nulls?: 'first' | 'last'; opClass?: string };\n\nexport class ExtraConfigColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, IndexedExtraConfigType> {\n\tstatic override readonly [entityKind]: string = 'ExtraConfigColumn';\n\n\toverride getSQLType(): string {\n\t\treturn this.getSQLType();\n\t}\n\n\tindexConfig: IndexedExtraConfigType = {\n\t\torder: this.config.order ?? 'asc',\n\t\tnulls: this.config.nulls ?? 'last',\n\t\topClass: this.config.opClass,\n\t};\n\tdefaultConfig: IndexedExtraConfigType = {\n\t\torder: 'asc',\n\t\tnulls: 'last',\n\t\topClass: undefined,\n\t};\n\n\tasc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'asc';\n\t\treturn this;\n\t}\n\n\tdesc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'desc';\n\t\treturn this;\n\t}\n\n\tnullsFirst(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'first';\n\t\treturn this;\n\t}\n\n\tnullsLast(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'last';\n\t\treturn this;\n\t}\n\n\t/**\n\t * ### PostgreSQL documentation quote\n\t *\n\t * > An operator class with optional parameters can be specified for each column of an index.\n\t * The operator class identifies the operators to be used by the index for that column.\n\t * For example, a B-tree index on four-byte integers would use the int4_ops class;\n\t * this operator class includes comparison functions for four-byte integers.\n\t * In practice the default operator class for the column's data type is usually sufficient.\n\t * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.\n\t * For example, we might want to sort a complex-number data type either by absolute value or by real part.\n\t * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.\n\t * More information about operator classes check:\n\t *\n\t * ### Useful links\n\t * https://www.postgresql.org/docs/current/sql-createindex.html\n\t *\n\t * https://www.postgresql.org/docs/current/indexes-opclass.html\n\t *\n\t * https://www.postgresql.org/docs/current/xindex.html\n\t *\n\t * ### Additional types\n\t * If you have the `pg_vector` extension installed in your database, you can use the\n\t * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.\n\t *\n\t * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**\n\t *\n\t * @param opClass\n\t * @returns\n\t */\n\top(opClass: PgIndexOpClass): Omit<this, 'op'> {\n\t\tthis.indexConfig.opClass = opClass;\n\t\treturn this;\n\t}\n}\n\nexport class IndexedColumn {\n\tstatic readonly [entityKind]: string = 'IndexedColumn';\n\tconstructor(\n\t\tname: string | undefined,\n\t\tkeyAsName: boolean,\n\t\ttype: string,\n\t\tindexConfig: IndexedExtraConfigType,\n\t) {\n\t\tthis.name = name;\n\t\tthis.keyAsName = keyAsName;\n\t\tthis.type = type;\n\t\tthis.indexConfig = indexConfig;\n\t}\n\n\tname: string | undefined;\n\tkeyAsName: boolean;\n\ttype: string;\n\tindexConfig: IndexedExtraConfigType;\n}\n\nexport type AnyPgColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = PgColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type PgArrayColumnBuilderBaseConfig = ColumnBuilderBaseConfig<'array', 'PgArray'> & {\n\tsize: number | undefined;\n\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n};\n\nexport class PgArrayBuilder<\n\tT extends PgArrayColumnBuilderBaseConfig,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string> | PgArrayColumnBuilderBaseConfig,\n> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t},\n\t{\n\t\tbaseBuilder: TBase extends PgArrayColumnBuilderBaseConfig ? PgArrayBuilder<\n\t\t\t\tTBase,\n\t\t\t\tTBase extends { baseBuilder: infer TBaseBuilder extends ColumnBuilderBaseConfig<any, any> } ? TBaseBuilder\n\t\t\t\t\t: never\n\t\t\t>\n\t\t\t: PgColumnBuilder<TBase, {}, Simplify<Omit<TBase, keyof ColumnBuilderBaseConfig<any, any>>>>;\n\t\tsize: T['size'];\n\t}\n> {\n\tstatic override readonly [entityKind] = 'PgArrayBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\tbaseBuilder: PgArrayBuilder<T, TBase>['config']['baseBuilder'],\n\t\tsize: T['size'],\n\t) {\n\t\tsuper(name, 'array', 'PgArray');\n\t\tthis.config.baseBuilder = baseBuilder;\n\t\tthis.config.size = size;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase> {\n\t\tconst baseColumn = this.config.baseBuilder.build(table);\n\t\treturn new PgArray<MakeColumnConfig<T, TTableName> & { size: T['size']; baseBuilder: T['baseBuilder'] }, TBase>(\n\t\t\ttable as AnyPgTable<{ name: MakeColumnConfig<T, TTableName>['tableName'] }>,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t\tbaseColumn,\n\t\t);\n\t}\n}\n\nexport class PgArray<\n\tT extends ColumnBaseConfig<'array', 'PgArray'> & {\n\t\tsize: number | undefined;\n\t\tbaseBuilder: ColumnBuilderBaseConfig<ColumnDataType, string>;\n\t},\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, {}, { size: T['size']; baseBuilder: T['baseBuilder'] }> {\n\treadonly size: T['size'];\n\n\tstatic override readonly [entityKind]: string = 'PgArray';\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgArrayBuilder<T, TBase>['config'],\n\t\treadonly baseColumn: PgColumn,\n\t\treadonly range?: [number | undefined, number | undefined],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.size = config.size;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `${this.baseColumn.getSQLType()}[${typeof this.size === 'number' ? this.size : ''}]`;\n\t}\n\n\toverride mapFromDriverValue(value: unknown[] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\t// Thank you node-postgres for not parsing enum arrays\n\t\t\tvalue = parsePgArray(value);\n\t\t}\n\t\treturn value.map((v) => this.baseColumn.mapFromDriverValue(v));\n\t}\n\n\toverride mapToDriverValue(value: unknown[], isNestedArray = false): unknown[] | string {\n\t\tconst a = value.map((v) =>\n\t\t\tv === null\n\t\t\t\t? null\n\t\t\t\t: is(this.baseColumn, PgArray)\n\t\t\t\t? this.baseColumn.mapToDriverValue(v as unknown[], true)\n\t\t\t\t: this.baseColumn.mapToDriverValue(v)\n\t\t);\n\t\tif (isNestedArray) return a;\n\t\treturn makePgArray(a);\n\t}\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgEnumColumnBuilderInitial<TName extends string, TValues extends [string, ...string[]]> =\n\tPgEnumColumnBuilder<{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'PgEnumColumn';\n\t\tdata: TValues[number];\n\t\tenumValues: TValues;\n\t\tdriverParam: string;\n\t}>;\n\nconst isPgEnumSym = Symbol.for('drizzle:isPgEnum');\nexport interface PgEnum<TValues extends [string, ...string[]]> {\n\t(): PgEnumColumnBuilderInitial<'', TValues>;\n\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: TValues;\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport function isPgEnum(obj: unknown): obj is PgEnum<[string, ...string[]]> {\n\treturn !!obj && typeof obj === 'function' && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\n\nexport class PgEnumColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] },\n> extends PgColumnBuilder<T, { enum: PgEnum<T['enumValues']> }> {\n\tstatic override readonly [entityKind]: string = 'PgEnumColumnBuilder';\n\n\tconstructor(name: T['name'], enumInstance: PgEnum<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgEnumColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumColumn<T extends ColumnBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] }>\n\textends PgColumn<T, { enum: PgEnum<T['enumValues']> }>\n{\n\tstatic override readonly [entityKind]: string = 'PgEnumColumn';\n\n\treadonly enum = this.config.enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\n// Gratitude to zod for the enum function types\nexport function pgEnum<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n): PgEnum<Writable<T>> {\n\treturn pgEnumWithSchema(enumName, values, undefined);\n}\n\n/** @internal */\nexport function pgEnumWithSchema<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n\tschema?: string,\n): PgEnum<Writable<T>> {\n\tconst enumInstance: PgEnum<Writable<T>> = Object.assign(\n\t\t<TName extends string>(name?: TName): PgEnumColumnBuilderInitial<TName, Writable<T>> =>\n\t\t\tnew PgEnumColumnBuilder(name ?? '' as TName, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: values,\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n", "import { entityKind } from './entity.ts';\nimport type { SQL, SQLWrapper } from './sql/sql.ts';\n\nexport interface Subquery<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTAlias extends string = string,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\nexport class Subquery<\n\tTAlias extends string = string,\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Subquery';\n\n\tdeclare _: {\n\t\tbrand: 'Subquery';\n\t\tsql: SQL;\n\t\tselectedFields: TSelectedFields;\n\t\talias: TAlias;\n\t\tisWith: boolean;\n\t};\n\n\tconstructor(sql: SQL, selection: Record<string, unknown>, alias: string, isWith = false) {\n\t\tthis._ = {\n\t\t\tbrand: 'Subquery',\n\t\t\tsql,\n\t\t\tselectedFields: selection as TSelectedFields,\n\t\t\talias: alias as TAlias,\n\t\t\tisWith,\n\t\t};\n\t}\n\n\t// getSQL(): SQL<unknown> {\n\t// \treturn new SQL([this]);\n\t// }\n}\n\nexport class WithSubquery<\n\tTAlias extends string = string,\n\tTSelection extends Record<string, unknown> = Record<string, unknown>,\n> extends Subquery<TAlias, TSelection> {\n\tstatic override readonly [entityKind]: string = 'WithSubquery';\n}\n\nexport type WithSubqueryWithoutSelection<TAlias extends string> = WithSubquery<TAlias, {}>;\n", "// package.json\nvar version = \"0.39.1\";\n\n// src/version.ts\nvar compatibilityVersion = 10;\nexport {\n  compatibilityVersion,\n  version as npmVersion\n};\n", "import type { Span, Tracer } from '@opentelemetry/api';\nimport { iife } from '~/tracing-utils.ts';\nimport { npmVersion } from '~/version.ts';\n\nlet otel: typeof import('@opentelemetry/api') | undefined;\nlet rawTracer: Tracer | undefined;\n// try {\n// \totel = await import('@opentelemetry/api');\n// } catch (err: any) {\n// \tif (err.code !== 'MODULE_NOT_FOUND' && err.code !== 'ERR_MODULE_NOT_FOUND') {\n// \t\tthrow err;\n// \t}\n// }\n\ntype SpanName =\n\t| 'drizzle.operation'\n\t| 'drizzle.prepareQuery'\n\t| 'drizzle.buildSQL'\n\t| 'drizzle.execute'\n\t| 'drizzle.driver.execute'\n\t| 'drizzle.mapResponse';\n\n/** @internal */\nexport const tracer = {\n\tstartActiveSpan<F extends (span?: Span) => unknown>(name: SpanName, fn: F): ReturnType<F> {\n\t\tif (!otel) {\n\t\t\treturn fn() as ReturnType<F>;\n\t\t}\n\n\t\tif (!rawTracer) {\n\t\t\trawTracer = otel.trace.getTracer('drizzle-orm', npmVersion);\n\t\t}\n\n\t\treturn iife(\n\t\t\t(otel, rawTracer) =>\n\t\t\t\trawTracer.startActiveSpan(\n\t\t\t\t\tname,\n\t\t\t\t\t((span: Span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn fn(span);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\tcode: otel.SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\tmessage: e instanceof Error ? e.message : 'Unknown error', // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as F,\n\t\t\t\t),\n\t\t\totel,\n\t\t\trawTracer,\n\t\t);\n\t},\n};\n", "export const ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\n", "import type { Column, GetColumnData } from './column.ts';\nimport { entityKind } from './entity.ts';\nimport type { OptionalKeyOnly, RequiredKeyOnly } from './operations.ts';\nimport type { ExtraConfigColumn } from './pg-core/index.ts';\nimport type { SQLWrapper } from './sql/sql.ts';\nimport { TableName } from './table.utils.ts';\nimport type { Simplify, Update } from './utils.ts';\n\nexport interface TableConfig<TColumn extends Column = Column<any>> {\n\tname: string;\n\tschema: string | undefined;\n\tcolumns: Record<string, TColumn>;\n\tdialect: string;\n}\n\nexport type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Required<\n\tUpdate<T, TUpdate>\n>;\n\n/** @internal */\nexport const Schema = Symbol.for('drizzle:Schema');\n\n/** @internal */\nexport const Columns = Symbol.for('drizzle:Columns');\n\n/** @internal */\nexport const ExtraConfigColumns = Symbol.for('drizzle:ExtraConfigColumns');\n\n/** @internal */\nexport const OriginalName = Symbol.for('drizzle:OriginalName');\n\n/** @internal */\nexport const BaseName = Symbol.for('drizzle:BaseName');\n\n/** @internal */\nexport const IsAlias = Symbol.for('drizzle:IsAlias');\n\n/** @internal */\nexport const ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\n\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\n\nexport interface Table<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends TableConfig = TableConfig,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n\nexport class Table<T extends TableConfig = TableConfig> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Table';\n\n\tdeclare readonly _: {\n\t\treadonly brand: 'Table';\n\t\treadonly config: T;\n\t\treadonly name: T['name'];\n\t\treadonly schema: T['schema'];\n\t\treadonly columns: T['columns'];\n\t\treadonly inferSelect: InferSelectModel<Table<T>>;\n\t\treadonly inferInsert: InferInsertModel<Table<T>>;\n\t};\n\n\tdeclare readonly $inferSelect: InferSelectModel<Table<T>>;\n\tdeclare readonly $inferInsert: InferInsertModel<Table<T>>;\n\n\t/** @internal */\n\tstatic readonly Symbol = {\n\t\tName: TableName as typeof TableName,\n\t\tSchema: Schema as typeof Schema,\n\t\tOriginalName: OriginalName as typeof OriginalName,\n\t\tColumns: Columns as typeof Columns,\n\t\tExtraConfigColumns: ExtraConfigColumns as typeof ExtraConfigColumns,\n\t\tBaseName: BaseName as typeof BaseName,\n\t\tIsAlias: IsAlias as typeof IsAlias,\n\t\tExtraConfigBuilder: ExtraConfigBuilder as typeof ExtraConfigBuilder,\n\t};\n\n\t/**\n\t * @internal\n\t * Can be changed if the table is aliased.\n\t */\n\t[TableName]: string;\n\n\t/**\n\t * @internal\n\t * Used to store the original name of the table, before any aliasing.\n\t */\n\t[OriginalName]: string;\n\n\t/** @internal */\n\t[Schema]: string | undefined;\n\n\t/** @internal */\n\t[Columns]!: T['columns'];\n\n\t/** @internal */\n\t[ExtraConfigColumns]!: Record<string, ExtraConfigColumn>;\n\n\t/**\n\t *  @internal\n\t * Used to store the table name before the transformation via the `tableCreator` functions.\n\t */\n\t[BaseName]: string;\n\n\t/** @internal */\n\t[IsAlias] = false;\n\n\t/** @internal */\n\t[IsDrizzleTable] = true;\n\n\t/** @internal */\n\t[ExtraConfigBuilder]: ((self: any) => Record<string, unknown> | unknown[]) | undefined = undefined;\n\n\tconstructor(name: string, schema: string | undefined, baseName: string) {\n\t\tthis[TableName] = this[OriginalName] = name;\n\t\tthis[Schema] = schema;\n\t\tthis[BaseName] = baseName;\n\t}\n}\n\nexport function isTable(table: unknown): table is Table {\n\treturn typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\n\n/**\n * Any table with a specified boundary.\n *\n * @example\n\t```ts\n\t// Any table with a specific name\n\ttype AnyUsersTable = AnyTable<{ name: 'users' }>;\n\t```\n *\n * To describe any table with any config, simply use `Table` without any type arguments, like this:\n *\n\t```ts\n\tfunction needsTable(table: Table) {\n\t\t...\n\t}\n\t```\n */\nexport type AnyTable<TPartial extends Partial<TableConfig>> = Table<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport function getTableName<T extends Table>(table: T): T['_']['name'] {\n\treturn table[TableName];\n}\n\nexport function getTableUniqueName<T extends Table>(table: T): `${T['_']['schema']}.${T['_']['name']}` {\n\treturn `${table[Schema] ?? 'public'}.${table[TableName]}`;\n}\n\nexport type MapColumnName<TName extends string, TColumn extends Column, TDBColumNames extends boolean> =\n\tTDBColumNames extends true ? TColumn['_']['name']\n\t\t: TName;\n\nexport type InferModelFromColumns<\n\tTColumns extends Record<string, Column>,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = Simplify<\n\tTInferMode extends 'insert' ?\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as RequiredKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as OptionalKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key],\n\t\t\t\t\t\tTConfig['override']\n\t\t\t\t\t>\n\t\t\t\t]?: GetColumnData<TColumns[Key], 'query'> | undefined;\n\t\t\t}\n\t\t: {\n\t\t\t[\n\t\t\t\tKey in keyof TColumns & string as MapColumnName<\n\t\t\t\t\tKey,\n\t\t\t\t\tTColumns[Key],\n\t\t\t\t\tTConfig['dbColumnNames']\n\t\t\t\t>\n\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t}\n>;\n\n/** @deprecated Use one of the alternatives: {@link InferSelectModel} / {@link InferInsertModel}, or `table.$inferSelect` / `table.$inferInsert`\n */\nexport type InferModel<\n\tTTable extends Table,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], TInferMode, TConfig>;\n\nexport type InferSelectModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'select', TConfig>;\n\nexport type InferInsertModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean; override?: boolean } = { dbColumnNames: false; override: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'insert', TConfig>;\n", "import type { CasingCache } from '~/casing.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { isPgEnum } from '~/pg-core/columns/enum.ts';\nimport type { SelectResult } from '~/query-builders/select.types.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { Assume, Equal } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { AnyColumn } from '../column.ts';\nimport { Column } from '../column.ts';\nimport { IsAlias, Table } from '../table.ts';\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nexport class FakePrimitiveParam {\n\tstatic readonly [entityKind]: string = 'FakePrimitiveParam';\n}\n\nexport type Chunk =\n\t| string\n\t| Table\n\t| View\n\t| AnyColumn\n\t| Name\n\t| Param\n\t| Placeholder\n\t| SQL;\n\nexport interface BuildQueryConfig {\n\tcasing: CasingCache;\n\tescapeName(name: string): string;\n\tescapeParam(num: number, value: unknown): string;\n\tescapeString(str: string): string;\n\tprepareTyping?: (encoder: DriverValueEncoder<unknown, unknown>) => QueryTypingsValue;\n\tparamStartIndex?: { value: number };\n\tinlineParams?: boolean;\n\tinvokeSource?: 'indexes' | undefined;\n}\n\nexport type QueryTypingsValue = 'json' | 'decimal' | 'time' | 'timestamp' | 'uuid' | 'date' | 'none';\n\nexport interface Query {\n\tsql: string;\n\tparams: unknown[];\n}\n\nexport interface QueryWithTypings extends Query {\n\ttypings?: QueryTypingsValue[];\n}\n\n/**\n * Any value that implements the `getSQL` method. The implementations include:\n * - `Table`\n * - `Column`\n * - `View`\n * - `Subquery`\n * - `SQL`\n * - `SQL.Aliased`\n * - `Placeholder`\n * - `Param`\n */\nexport interface SQLWrapper {\n\tgetSQL(): SQL;\n\tshouldOmitSQLParens?(): boolean;\n}\n\nexport function isSQLWrapper(value: unknown): value is SQLWrapper {\n\treturn value !== null && value !== undefined && typeof (value as any).getSQL === 'function';\n}\n\nfunction mergeQueries(queries: QueryWithTypings[]): QueryWithTypings {\n\tconst result: QueryWithTypings = { sql: '', params: [] };\n\tfor (const query of queries) {\n\t\tresult.sql += query.sql;\n\t\tresult.params.push(...query.params);\n\t\tif (query.typings?.length) {\n\t\t\tif (!result.typings) {\n\t\t\t\tresult.typings = [];\n\t\t\t}\n\t\t\tresult.typings.push(...query.typings);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class StringChunk implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'StringChunk';\n\n\treadonly value: string[];\n\n\tconstructor(value: string | string[]) {\n\t\tthis.value = Array.isArray(value) ? value : [value];\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport class SQL<T = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQL';\n\n\tdeclare _: {\n\t\tbrand: 'SQL';\n\t\ttype: T;\n\t};\n\n\t/** @internal */\n\tdecoder: DriverValueDecoder<T, any> = noopDecoder;\n\tprivate shouldInlineParams = false;\n\n\tconstructor(readonly queryChunks: SQLChunk[]) {}\n\n\tappend(query: SQL): this {\n\t\tthis.queryChunks.push(...query.queryChunks);\n\t\treturn this;\n\t}\n\n\ttoQuery(config: BuildQueryConfig): QueryWithTypings {\n\t\treturn tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n\t\t\tconst query = this.buildQueryFromSourceParams(this.queryChunks, config);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': query.sql,\n\t\t\t\t'drizzle.query.params': JSON.stringify(query.params),\n\t\t\t});\n\t\t\treturn query;\n\t\t});\n\t}\n\n\tbuildQueryFromSourceParams(chunks: SQLChunk[], _config: BuildQueryConfig): Query {\n\t\tconst config = Object.assign({}, _config, {\n\t\t\tinlineParams: _config.inlineParams || this.shouldInlineParams,\n\t\t\tparamStartIndex: _config.paramStartIndex || { value: 0 },\n\t\t});\n\n\t\tconst {\n\t\t\tcasing,\n\t\t\tescapeName,\n\t\t\tescapeParam,\n\t\t\tprepareTyping,\n\t\t\tinlineParams,\n\t\t\tparamStartIndex,\n\t\t} = config;\n\n\t\treturn mergeQueries(chunks.map((chunk): QueryWithTypings => {\n\t\t\tif (is(chunk, StringChunk)) {\n\t\t\t\treturn { sql: chunk.value.join(''), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Name)) {\n\t\t\t\treturn { sql: escapeName(chunk.value), params: [] };\n\t\t\t}\n\n\t\t\tif (chunk === undefined) {\n\t\t\t\treturn { sql: '', params: [] };\n\t\t\t}\n\n\t\t\tif (Array.isArray(chunk)) {\n\t\t\t\tconst result: SQLChunk[] = [new StringChunk('(')];\n\t\t\t\tfor (const [i, p] of chunk.entries()) {\n\t\t\t\t\tresult.push(p);\n\t\t\t\t\tif (i < chunk.length - 1) {\n\t\t\t\t\t\tresult.push(new StringChunk(', '));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(new StringChunk(')'));\n\t\t\t\treturn this.buildQueryFromSourceParams(result, config);\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL)) {\n\t\t\t\treturn this.buildQueryFromSourceParams(chunk.queryChunks, {\n\t\t\t\t\t...config,\n\t\t\t\t\tinlineParams: inlineParams || chunk.shouldInlineParams,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\t\t\t\tconst tableName = chunk[Table.Symbol.Name];\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[IsAlias]\n\t\t\t\t\t\t? escapeName(tableName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(tableName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Column)) {\n\t\t\t\tconst columnName = casing.getColumnCasing(chunk);\n\t\t\t\tif (_config.invokeSource === 'indexes') {\n\t\t\t\t\treturn { sql: escapeName(columnName), params: [] };\n\t\t\t\t}\n\n\t\t\t\tconst schemaName = chunk.table[Table.Symbol.Schema];\n\t\t\t\treturn {\n\t\t\t\t\tsql: chunk.table[IsAlias] || schemaName === undefined\n\t\t\t\t\t\t? escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(columnName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(chunk.table[Table.Symbol.Name]) + '.'\n\t\t\t\t\t\t\t+ escapeName(columnName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, View)) {\n\t\t\t\tconst schemaName = chunk[ViewBaseConfig].schema;\n\t\t\t\tconst viewName = chunk[ViewBaseConfig].name;\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined || chunk[ViewBaseConfig].isAlias\n\t\t\t\t\t\t? escapeName(viewName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(viewName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Param)) {\n\t\t\t\tif (is(chunk.value, Placeholder)) {\n\t\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t\t}\n\n\t\t\t\tconst mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n\n\t\t\t\tif (is(mappedValue, SQL)) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([mappedValue], config);\n\t\t\t\t}\n\n\t\t\t\tif (inlineParams) {\n\t\t\t\t\treturn { sql: this.mapInlineParam(mappedValue, config), params: [] };\n\t\t\t\t}\n\n\t\t\t\tlet typings: QueryTypingsValue[] = ['none'];\n\t\t\t\tif (prepareTyping) {\n\t\t\t\t\ttypings = [prepareTyping(chunk.encoder)];\n\t\t\t\t}\n\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n\t\t\t}\n\n\t\t\tif (is(chunk, Placeholder)) {\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n\t\t\t\treturn { sql: escapeName(chunk.fieldAlias), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Subquery)) {\n\t\t\t\tif (chunk._.isWith) {\n\t\t\t\t\treturn { sql: escapeName(chunk._.alias), params: [] };\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk._.sql,\n\t\t\t\t\tnew StringChunk(') '),\n\t\t\t\t\tnew Name(chunk._.alias),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (isPgEnum(chunk)) {\n\t\t\t\tif (chunk.schema) {\n\t\t\t\t\treturn { sql: escapeName(chunk.schema) + '.' + escapeName(chunk.enumName), params: [] };\n\t\t\t\t}\n\t\t\t\treturn { sql: escapeName(chunk.enumName), params: [] };\n\t\t\t}\n\n\t\t\tif (isSQLWrapper(chunk)) {\n\t\t\t\tif (chunk.shouldOmitSQLParens?.()) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([chunk.getSQL()], config);\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk.getSQL(),\n\t\t\t\t\tnew StringChunk(')'),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (inlineParams) {\n\t\t\t\treturn { sql: this.mapInlineParam(chunk, config), params: [] };\n\t\t\t}\n\n\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t}));\n\t}\n\n\tprivate mapInlineParam(\n\t\tchunk: unknown,\n\t\t{ escapeString }: BuildQueryConfig,\n\t): string {\n\t\tif (chunk === null) {\n\t\t\treturn 'null';\n\t\t}\n\t\tif (typeof chunk === 'number' || typeof chunk === 'boolean') {\n\t\t\treturn chunk.toString();\n\t\t}\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn escapeString(chunk);\n\t\t}\n\t\tif (typeof chunk === 'object') {\n\t\t\tconst mappedValueAsString = chunk.toString();\n\t\t\tif (mappedValueAsString === '[object Object]') {\n\t\t\t\treturn escapeString(JSON.stringify(chunk));\n\t\t\t}\n\t\t\treturn escapeString(mappedValueAsString);\n\t\t}\n\t\tthrow new Error('Unexpected param value: ' + chunk);\n\t}\n\n\tgetSQL(): SQL {\n\t\treturn this;\n\t}\n\n\tas(alias: string): SQL.Aliased<T>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(): SQL<TData>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(alias: string): SQL.Aliased<TData>;\n\tas(alias?: string): SQL<T> | SQL.Aliased<T> {\n\t\t// TODO: remove with deprecated overloads\n\t\tif (alias === undefined) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new SQL.Aliased(this, alias);\n\t}\n\n\tmapWith<\n\t\tTDecoder extends\n\t\t\t| DriverValueDecoder<any, any>\n\t\t\t| DriverValueDecoder<any, any>['mapFromDriverValue'],\n\t>(decoder: TDecoder): SQL<GetDecoderResult<TDecoder>> {\n\t\tthis.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n\t\treturn this as SQL<GetDecoderResult<TDecoder>>;\n\t}\n\n\tinlineParams(): this {\n\t\tthis.shouldInlineParams = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * This method is used to conditionally include a part of the query.\n\t *\n\t * @param condition - Condition to check\n\t * @returns itself if the condition is `true`, otherwise `undefined`\n\t */\n\tif(condition: any | undefined): this | undefined {\n\t\treturn condition ? this : undefined;\n\t}\n}\n\nexport type GetDecoderResult<T> = T extends Column ? T['_']['data'] : T extends\n\t| DriverValueDecoder<infer TData, any>\n\t| DriverValueDecoder<infer TData, any>['mapFromDriverValue'] ? TData\n: never;\n\n/**\n * Any DB name (table, column, index etc.)\n */\nexport class Name implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Name';\n\n\tprotected brand!: 'Name';\n\n\tconstructor(readonly value: string) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nexport function name(value: string): Name {\n\treturn new Name(value);\n}\n\nexport interface DriverValueDecoder<TData, TDriverParam> {\n\tmapFromDriverValue(value: TDriverParam): TData;\n}\n\nexport interface DriverValueEncoder<TData, TDriverParam> {\n\tmapToDriverValue(value: TData): TDriverParam | SQL;\n}\n\nexport function isDriverValueEncoder(value: unknown): value is DriverValueEncoder<any, any> {\n\treturn typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n\t\t&& typeof (value as any).mapToDriverValue === 'function';\n}\n\nexport const noopDecoder: DriverValueDecoder<any, any> = {\n\tmapFromDriverValue: (value) => value,\n};\n\nexport const noopEncoder: DriverValueEncoder<any, any> = {\n\tmapToDriverValue: (value) => value,\n};\n\nexport interface DriverValueMapper<TData, TDriverParam>\n\textends DriverValueDecoder<TData, TDriverParam>, DriverValueEncoder<TData, TDriverParam>\n{}\n\nexport const noopMapper: DriverValueMapper<any, any> = {\n\t...noopDecoder,\n\t...noopEncoder,\n};\n\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nexport class Param<TDataType = unknown, TDriverParamType = TDataType> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Param';\n\n\tprotected brand!: 'BoundParamValue';\n\n\t/**\n\t * @param value - Parameter value\n\t * @param encoder - Encoder to convert the value to a driver parameter\n\t */\n\tconstructor(\n\t\treadonly value: TDataType,\n\t\treadonly encoder: DriverValueEncoder<TDataType, TDriverParamType> = noopEncoder,\n\t) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.param` instead. */\nexport function param<TData, TDriver>(\n\tvalue: TData,\n\tencoder?: DriverValueEncoder<TData, TDriver>,\n): Param<TData, TDriver> {\n\treturn new Param(value, encoder);\n}\n\n/**\n * Anything that can be passed to the `` sql`...` `` tagged function.\n */\nexport type SQLChunk =\n\t| StringChunk\n\t| SQLChunk[]\n\t| SQLWrapper\n\t| SQL\n\t| Table\n\t| View\n\t| Subquery\n\t| AnyColumn\n\t| Param\n\t| Name\n\t| undefined\n\t| FakePrimitiveParam\n\t| Placeholder;\n\nexport function sql<T>(strings: TemplateStringsArray, ...params: any[]): SQL<T>;\n/*\n\tThe type of `params` is specified as `SQLChunk[]`, but that's slightly incorrect -\n\tin runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n\twhich will be wrapped in `Param`. That's why the overload specifies `params` as `any[]` and not as `SQLSourceParam[]`.\n\tThis type is used to make our lives easier and the type checker happy.\n*/\nexport function sql(strings: TemplateStringsArray, ...params: SQLChunk[]): SQL {\n\tconst queryChunks: SQLChunk[] = [];\n\tif (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n\t\tqueryChunks.push(new StringChunk(strings[0]!));\n\t}\n\tfor (const [paramIndex, param] of params.entries()) {\n\t\tqueryChunks.push(param, new StringChunk(strings[paramIndex + 1]!));\n\t}\n\n\treturn new SQL(queryChunks);\n}\n\nexport namespace sql {\n\texport function empty(): SQL {\n\t\treturn new SQL([]);\n\t}\n\n\t/** @deprecated - use `sql.join()` */\n\texport function fromList(list: SQLChunk[]): SQL {\n\t\treturn new SQL(list);\n\t}\n\n\t/**\n\t * Convenience function to create an SQL query from a raw string.\n\t * @param str The raw SQL query string.\n\t */\n\texport function raw(str: string): SQL {\n\t\treturn new SQL([new StringChunk(str)]);\n\t}\n\n\t/**\n\t * Join a list of SQL chunks with a separator.\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n\t * // sql`abc`\n\t * ```\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n\t * // sql`a, b, c`\n\t * ```\n\t */\n\texport function join(chunks: SQLChunk[], separator?: SQLChunk): SQL {\n\t\tconst result: SQLChunk[] = [];\n\t\tfor (const [i, chunk] of chunks.entries()) {\n\t\t\tif (i > 0 && separator !== undefined) {\n\t\t\t\tresult.push(separator);\n\t\t\t}\n\t\t\tresult.push(chunk);\n\t\t}\n\t\treturn new SQL(result);\n\t}\n\n\t/**\n\t * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n\t * When used in a query, the identifier will be escaped based on the DB engine.\n\t * For example, in PostgreSQL, identifiers are escaped with double quotes.\n\t *\n\t * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n\t *\n\t * @example ```ts\n\t * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n\t * // 'SELECT * FROM \"my-table\"'\n\t * ```\n\t */\n\texport function identifier(value: string): Name {\n\t\treturn new Name(value);\n\t}\n\n\texport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\t\treturn new Placeholder(name);\n\t}\n\n\texport function param<TData, TDriver>(\n\t\tvalue: TData,\n\t\tencoder?: DriverValueEncoder<TData, TDriver>,\n\t): Param<TData, TDriver> {\n\t\treturn new Param(value, encoder);\n\t}\n}\n\nexport namespace SQL {\n\texport class Aliased<T = unknown> implements SQLWrapper {\n\t\tstatic readonly [entityKind]: string = 'SQL.Aliased';\n\n\t\tdeclare _: {\n\t\t\tbrand: 'SQL.Aliased';\n\t\t\ttype: T;\n\t\t};\n\n\t\t/** @internal */\n\t\tisSelectionField = false;\n\n\t\tconstructor(\n\t\t\treadonly sql: SQL,\n\t\t\treadonly fieldAlias: string,\n\t\t) {}\n\n\t\tgetSQL(): SQL {\n\t\t\treturn this.sql;\n\t\t}\n\n\t\t/** @internal */\n\t\tclone() {\n\t\t\treturn new Aliased(this.sql, this.fieldAlias);\n\t\t}\n\t}\n}\n\nexport class Placeholder<TName extends string = string, TValue = any> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Placeholder';\n\n\tdeclare protected: TValue;\n\n\tconstructor(readonly name: TName) {}\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.placeholder` instead. */\nexport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\treturn new Placeholder(name);\n}\n\nexport function fillPlaceholders(params: unknown[], values: Record<string, unknown>): unknown[] {\n\treturn params.map((p) => {\n\t\tif (is(p, Placeholder)) {\n\t\t\tif (!(p.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn values[p.name];\n\t\t}\n\n\t\tif (is(p, Param) && is(p.value, Placeholder)) {\n\t\t\tif (!(p.value.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn p.encoder.mapToDriverValue(values[p.value.name]);\n\t\t}\n\n\t\treturn p;\n\t});\n}\n\nexport type ColumnsSelection = Record<string, unknown>;\n\nconst IsDrizzleView = Symbol.for('drizzle:IsDrizzleView');\n\nexport abstract class View<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'View';\n\n\tdeclare _: {\n\t\tbrand: 'View';\n\t\tviewBrand: string;\n\t\tname: TName;\n\t\texisting: TExisting;\n\t\tselectedFields: TSelection;\n\t};\n\n\t/** @internal */\n\t[ViewBaseConfig]: {\n\t\tname: TName;\n\t\toriginalName: TName;\n\t\tschema: string | undefined;\n\t\tselectedFields: ColumnsSelection;\n\t\tisExisting: TExisting;\n\t\tquery: TExisting extends true ? undefined : SQL;\n\t\tisAlias: boolean;\n\t};\n\n\t/** @internal */\n\t[IsDrizzleView] = true;\n\n\tdeclare readonly $inferSelect: InferSelectViewModel<View<Assume<TName, string>, TExisting, TSelection>>;\n\n\tconstructor(\n\t\t{ name, schema, selectedFields, query }: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t},\n\t) {\n\t\tthis[ViewBaseConfig] = {\n\t\t\tname,\n\t\t\toriginalName: name,\n\t\t\tschema,\n\t\t\tselectedFields,\n\t\t\tquery: query as (TExisting extends true ? undefined : SQL),\n\t\t\tisExisting: !query as TExisting,\n\t\t\tisAlias: false,\n\t\t};\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport function isView(view: unknown): view is View {\n\treturn typeof view === 'object' && view !== null && IsDrizzleView in view;\n}\n\nexport function getViewName<T extends View>(view: T): T['_']['name'] {\n\treturn view[ViewBaseConfig].name;\n}\n\nexport type InferSelectViewModel<TView extends View> =\n\tEqual<TView['_']['selectedFields'], { [x: string]: unknown }> extends true ? { [x: string]: unknown }\n\t\t: SelectResult<\n\t\t\tTView['_']['selectedFields'],\n\t\t\t'single',\n\t\t\tRecord<TView['_']['name'], 'not-null'>\n\t\t>;\n\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Table class to resolve circular dependency\nTable.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Column class to resolve circular dependency\nSubquery.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport type { Relation } from './relations.ts';\nimport type { View } from './sql/sql.ts';\nimport { SQL, sql } from './sql/sql.ts';\nimport { Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class ColumnAliasProxyHandler<TColumn extends Column> implements ProxyHandler<TColumn> {\n\tstatic readonly [entityKind]: string = 'ColumnAliasProxyHandler';\n\n\tconstructor(private table: Table | View) {}\n\n\tget(columnObj: TColumn, prop: string | symbol): any {\n\t\tif (prop === 'table') {\n\t\t\treturn this.table;\n\t\t}\n\n\t\treturn columnObj[prop as keyof TColumn];\n\t}\n}\n\nexport class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'TableAliasProxyHandler';\n\n\tconstructor(private alias: string, private replaceOriginalName: boolean) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === Table.Symbol.IsAlias) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (prop === Table.Symbol.Name) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...target[ViewBaseConfig as keyof typeof target],\n\t\t\t\tname: this.alias,\n\t\t\t\tisAlias: true,\n\t\t\t};\n\t\t}\n\n\t\tif (prop === Table.Symbol.Columns) {\n\t\t\tconst columns = (target as Table)[Table.Symbol.Columns];\n\t\t\tif (!columns) {\n\t\t\t\treturn columns;\n\t\t\t}\n\n\t\t\tconst proxiedColumns: { [key: string]: any } = {};\n\n\t\t\tObject.keys(columns).map((key) => {\n\t\t\t\tproxiedColumns[key] = new Proxy(\n\t\t\t\t\tcolumns[key]!,\n\t\t\t\t\tnew ColumnAliasProxyHandler(new Proxy(target, this)),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn proxiedColumns;\n\t\t}\n\n\t\tconst value = target[prop as keyof typeof target];\n\t\tif (is(value, Column)) {\n\t\t\treturn new Proxy(value as AnyColumn, new ColumnAliasProxyHandler(new Proxy(target, this)));\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\nexport class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'RelationTableAliasProxyHandler';\n\n\tconstructor(private alias: string) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === 'sourceTable') {\n\t\t\treturn aliasedTable(target.sourceTable, this.alias);\n\t\t}\n\n\t\treturn target[prop as keyof typeof target];\n\t}\n}\n\nexport function aliasedTable<T extends Table | View>(\n\ttable: T,\n\ttableAlias: string,\n): T {\n\treturn new Proxy(table, new TableAliasProxyHandler(tableAlias, false)) as any;\n}\n\nexport function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T {\n\treturn new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\n\nexport function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T {\n\treturn new Proxy(\n\t\tcolumn,\n\t\tnew ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))),\n\t);\n}\n\nexport function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased {\n\treturn new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\n\nexport function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL {\n\treturn sql.join(query.queryChunks.map((c) => {\n\t\tif (is(c, Column)) {\n\t\t\treturn aliasedTableColumn(c, alias);\n\t\t}\n\t\tif (is(c, SQL)) {\n\t\t\treturn mapColumnsInSQLToAlias(c, alias);\n\t\t}\n\t\tif (is(c, SQL.Aliased)) {\n\t\t\treturn mapColumnsInAliasedSQLToAlias(c, alias);\n\t\t}\n\t\treturn c;\n\t}));\n}\n", "import { TableAliasProxyHandler } from '~/alias.ts';\nimport type { BuildAliasTable } from './query-builders/select.types.ts';\n\nimport type { SQLiteTable } from './table.ts';\nimport type { SQLiteViewBase } from './view-base.ts';\n\nexport function alias<TTable extends SQLiteTable | SQLiteViewBase, TAlias extends string>(\n\ttable: TTable,\n\talias: TAlias,\n): BuildAliasTable<TTable, TAlias> {\n\treturn new Proxy(table, new TableAliasProxyHandler(alias, false)) as any;\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport class CheckBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteCheckBuilder';\n\n\tprotected brand!: 'SQLiteConstraintBuilder';\n\n\tconstructor(public name: string, public value: SQL) {}\n\n\tbuild(table: SQLiteTable): Check {\n\t\treturn new Check(table, this);\n\t}\n}\n\nexport class Check {\n\tstatic readonly [entityKind]: string = 'SQLiteCheck';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteCheck';\n\t};\n\n\treadonly name: string;\n\treadonly value: SQL;\n\n\tconstructor(public table: SQLiteTable, builder: CheckBuilder) {\n\t\tthis.name = builder.name;\n\t\tthis.value = builder.value;\n\t}\n}\n\nexport function check(name: string, value: SQL): CheckBuilder {\n\treturn new CheckBuilder(name, value);\n}\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { is } from './entity.ts';\nimport type { Logger } from './logger.ts';\nimport type { SelectedFieldsOrdered } from './operations.ts';\nimport type { TableLike } from './query-builders/select.types.ts';\nimport { Param, SQL, View } from './sql/sql.ts';\nimport type { DriverValueDecoder } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { getTableName, Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\n/** @internal */\nexport function mapResultRow<TResult>(\n\tcolumns: SelectedFieldsOrdered<AnyColumn>,\n\trow: unknown[],\n\tjoinsNotNullableMap: Record<string, boolean> | undefined,\n): TResult {\n\t// Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n\tconst nullifyMap: Record<string, string | false> = {};\n\n\tconst result = columns.reduce<Record<string, any>>(\n\t\t(result, { path, field }, columnIndex) => {\n\t\t\tlet decoder: DriverValueDecoder<unknown, unknown>;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tlet node = result;\n\t\t\tfor (const [pathChunkIndex, pathChunk] of path.entries()) {\n\t\t\t\tif (pathChunkIndex < path.length - 1) {\n\t\t\t\t\tif (!(pathChunk in node)) {\n\t\t\t\t\t\tnode[pathChunk] = {};\n\t\t\t\t\t}\n\t\t\t\t\tnode = node[pathChunk];\n\t\t\t\t} else {\n\t\t\t\t\tconst rawValue = row[columnIndex]!;\n\t\t\t\t\tconst value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n\n\t\t\t\t\tif (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n\t\t\t\t\t\tconst objectName = path[0]!;\n\t\t\t\t\t\tif (!(objectName in nullifyMap)) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\ttypeof nullifyMap[objectName] === 'string' && nullifyMap[objectName] !== getTableName(field.table)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t{},\n\t);\n\n\t// Nullify all nested objects from nullifyMap that are nullable\n\tif (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n\t\tfor (const [objectName, tableName] of Object.entries(nullifyMap)) {\n\t\t\tif (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n\t\t\t\tresult[objectName] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result as TResult;\n}\n\n/** @internal */\nexport function orderSelectedFields<TColumn extends AnyColumn>(\n\tfields: Record<string, unknown>,\n\tpathPrefix?: string[],\n): SelectedFieldsOrdered<TColumn> {\n\treturn Object.entries(fields).reduce<SelectedFieldsOrdered<AnyColumn>>((result, [name, field]) => {\n\t\tif (typeof name !== 'string') {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst newPath = pathPrefix ? [...pathPrefix, name] : [name];\n\t\tif (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n\t\t\tresult.push({ path: newPath, field });\n\t\t} else if (is(field, Table)) {\n\t\t\tresult.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n\t\t} else {\n\t\t\tresult.push(...orderSelectedFields(field as Record<string, unknown>, newPath));\n\t\t}\n\t\treturn result;\n\t}, []) as SelectedFieldsOrdered<TColumn>;\n}\n\nexport function haveSameKeys(left: Record<string, unknown>, right: Record<string, unknown>) {\n\tconst leftKeys = Object.keys(left);\n\tconst rightKeys = Object.keys(right);\n\n\tif (leftKeys.length !== rightKeys.length) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, key] of leftKeys.entries()) {\n\t\tif (key !== rightKeys[index]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/** @internal */\nexport function mapUpdateSet(table: Table, values: Record<string, unknown>): UpdateSet {\n\tconst entries: [string, UpdateSet[string]][] = Object.entries(values)\n\t\t.filter(([, value]) => value !== undefined)\n\t\t.map(([key, value]) => {\n\t\t\t// eslint-disable-next-line unicorn/prefer-ternary\n\t\t\tif (is(value, SQL) || is(value, Column)) {\n\t\t\t\treturn [key, value];\n\t\t\t} else {\n\t\t\t\treturn [key, new Param(value, table[Table.Symbol.Columns][key])];\n\t\t\t}\n\t\t});\n\n\tif (entries.length === 0) {\n\t\tthrow new Error('No values to set');\n\t}\n\n\treturn Object.fromEntries(entries);\n}\n\nexport type UpdateSet = Record<string, SQL | Param | AnyColumn | null | undefined>;\n\nexport type OneOrMany<T> = T | T[];\n\nexport type Update<T, TUpdate> =\n\t& {\n\t\t[K in Exclude<keyof T, keyof TUpdate>]: T[K];\n\t}\n\t& TUpdate;\n\nexport type Simplify<T> =\n\t& {\n\t\t// @ts-ignore - \"Type parameter 'K' has a circular constraint\", not sure why\n\t\t[K in keyof T]: T[K];\n\t}\n\t& {};\n\nexport type SimplifyMappedType<T> = [T] extends [unknown] ? T : never;\n\nexport type ShallowRecord<K extends keyof any, T> = SimplifyMappedType<{ [P in K]: T }>;\n\nexport type Assume<T, U> = T extends U ? T : U;\n\nexport type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;\n\nexport interface DrizzleTypeError<T extends string> {\n\t$drizzleTypeError: T;\n}\n\nexport type ValueOrArray<T> = T | T[];\n\n/** @internal */\nexport function applyMixins(baseClass: any, extendedClasses: any[]) {\n\tfor (const extendedClass of extendedClasses) {\n\t\tfor (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n\t\t\tif (name === 'constructor') continue;\n\n\t\t\tObject.defineProperty(\n\t\t\t\tbaseClass.prototype,\n\t\t\t\tname,\n\t\t\t\tObject.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport type Or<T1, T2> = T1 extends true ? true : T2 extends true ? true : false;\n\nexport type IfThenElse<If, Then, Else> = If extends true ? Then : Else;\n\nexport type PromiseOf<T> = T extends Promise<infer U> ? U : T;\n\nexport type Writable<T> = {\n\t-readonly [P in keyof T]: T[P];\n};\n\nexport function getTableColumns<T extends Table>(table: T): T['_']['columns'] {\n\treturn table[Table.Symbol.Columns];\n}\n\nexport function getViewSelectedFields<T extends View>(view: T): T['_']['selectedFields'] {\n\treturn view[ViewBaseConfig].selectedFields;\n}\n\n/** @internal */\nexport function getTableLikeName(table: TableLike): string | undefined {\n\treturn is(table, Subquery)\n\t\t? table._.alias\n\t\t: is(table, View)\n\t\t? table[ViewBaseConfig].name\n\t\t: is(table, SQL)\n\t\t? undefined\n\t\t: table[Table.Symbol.IsAlias]\n\t\t? table[Table.Symbol.Name]\n\t\t: table[Table.Symbol.BaseName];\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyColumn<{ tableName: TForeignTableName }> };\n\nexport type Casing = 'snake_case' | 'camelCase';\n\nexport interface DrizzleConfig<TSchema extends Record<string, unknown> = Record<string, never>> {\n\tlogger?: boolean | Logger;\n\tschema?: TSchema;\n\tcasing?: Casing;\n}\nexport type ValidateShape<T, ValidShape, TResult = T> = T extends ValidShape\n\t? Exclude<keyof T, keyof ValidShape> extends never ? TResult\n\t: DrizzleTypeError<\n\t\t`Invalid key(s): ${Exclude<(keyof T) & (string | number | bigint | boolean | null | undefined), keyof ValidShape>}`\n\t>\n\t: never;\n\nexport type KnownKeysOnly<T, U> = {\n\t[K in keyof T]: K extends keyof U ? T[K] : never;\n};\n\nexport type IsAny<T> = 0 extends (1 & T) ? true : false;\n\n/** @internal */\nexport function getColumnNameAndConfig<\n\tTConfig extends Record<string, any> | undefined,\n>(a: string | TConfig | undefined, b: TConfig | undefined) {\n\treturn {\n\t\tname: typeof a === 'string' && a.length > 0 ? a : '' as string,\n\t\tconfig: typeof a === 'object' ? a : b as TConfig,\n\t};\n}\n\nexport type IfNotImported<T, Y, N> = unknown extends T ? Y : N;\n\nexport type ImportTypeError<TPackageName extends string> =\n\t`Please install \\`${TPackageName}\\` to allow Drizzle ORM to connect to the database`;\n\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Keys extends any\n\t? Required<Pick<T, Keys>> & Partial<Omit<T, Keys>>\n\t: never;\n\ntype ExpectedConfigShape = {\n\tlogger?: boolean | {\n\t\tlogQuery(query: string, params: unknown[]): void;\n\t};\n\tschema?: Record<string, never>;\n\tcasing?: 'snake_case' | 'camelCase';\n};\n\n// If this errors, you must update config shape checker function with new config specs\nconst _: DrizzleConfig = {} as ExpectedConfigShape;\nconst __: ExpectedConfigShape = {} as DrizzleConfig;\n\nexport function isConfig(data: any): boolean {\n\tif (typeof data !== 'object' || data === null) return false;\n\n\tif (data.constructor.name !== 'Object') return false;\n\n\tif ('logger' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (\n\t\t\ttype !== 'boolean' && (type !== 'object' || typeof data['logger']['logQuery'] !== 'function')\n\t\t\t&& type !== 'undefined'\n\t\t) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('schema' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('casing' in data) {\n\t\tconst type = typeof data['logger'];\n\t\tif (type !== 'string' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('mode' in data) {\n\t\tif (data['mode'] !== 'default' || data['mode'] !== 'planetscale' || data['mode'] !== undefined) return false;\n\n\t\treturn true;\n\t}\n\n\tif ('connection' in data) {\n\t\tconst type = typeof data['connection'];\n\t\tif (type !== 'string' && type !== 'object' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif ('client' in data) {\n\t\tconst type = typeof data['client'];\n\t\tif (type !== 'object' && type !== 'function' && type !== 'undefined') return false;\n\n\t\treturn true;\n\t}\n\n\tif (Object.keys(data).length === 0) return true;\n\n\treturn false;\n}\n\nexport type NeonAuthToken = string | (() => string | Promise<string>);\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: SQLiteColumn[];\n\treadonly foreignTable: SQLiteTable;\n\treadonly foreignColumns: SQLiteColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteForeignKeyBuilder';\n\t\tforeignTableName: 'TForeignTableName';\n\t};\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined;\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: SQLiteColumn[];\n\t\t\tforeignColumns: SQLiteColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as SQLiteTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: SQLiteTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[TableName],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[TableName],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends SQLiteColumn[],\n> = { [Key in keyof TColumns]: AnySQLiteColumn<{ tableName: TTableName }> };\n\n/**\n * @deprecated please use `foreignKey({ columns: [], foreignColumns: [] })` syntax without callback\n * @param config\n * @returns\n */\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: () => {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey(\n\tconfig: any,\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tif (typeof config === 'function') {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\tcolumns,\n\t\t\t\tforeignColumns,\n\t\t\t};\n\t\t}\n\t\treturn config;\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "import { entityKind } from '~/entity.ts';\nimport { TableName } from '~/table.utils.ts';\nimport type { SQLiteColumn } from './columns/common.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport function uniqueKeyName(table: SQLiteTable, columns: string[]) {\n\treturn `${table[TableName]}_${columns.join('_')}_unique`;\n}\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [SQLiteColumn, ...SQLiteColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraint';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport { Column } from '~/column.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/sqlite-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/sqlite-core/foreign-keys.ts';\nimport type { AnySQLiteTable, SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Update } from '~/utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\n\nexport interface ReferenceConfig {\n\tref: () => SQLiteColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface SQLiteColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'sqlite' }> {}\n\nexport interface SQLiteGeneratedColumnConfig {\n\tmode?: 'virtual' | 'stored';\n}\n\nexport abstract class SQLiteColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = object,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }, TExtraConfig>\n\timplements SQLiteColumnBuilderBase<T, TTypeConfig>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteColumnBuilder';\n\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL), config?: SQLiteGeneratedColumnConfig): HasGenerated<this, {\n\t\ttype: 'always';\n\t}> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: config?.mode ?? 'virtual',\n\t\t};\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: SQLiteColumn, table: SQLiteTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn ((ref, actions) => {\n\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t});\n\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t}\n\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t}\n\t\t\t\treturn builder.build(table);\n\t\t\t})(ref, actions);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `SQLiteColumn` and `AnySQLiteColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class SQLiteColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteColumn';\n\n\tconstructor(\n\t\toverride readonly table: SQLiteTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnySQLiteColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = SQLiteColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\ntype BlobMode = 'buffer' | 'json' | 'bigint';\n\nexport type SQLiteBigIntBuilderInitial<TName extends string> = SQLiteBigIntBuilder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'SQLiteBigInt';\n\tdata: bigint;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBigIntBuilder<T extends ColumnBuilderBaseConfig<'bigint', 'SQLiteBigInt'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBigIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'SQLiteBigInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBigInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBigInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBigInt<T extends ColumnBaseConfig<'bigint', 'SQLiteBigInt'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBigInt';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array | ArrayBuffer): bigint {\n\t\tif (Buffer.isBuffer(value)) {\n\t\t\treturn BigInt(value.toString());\n\t\t}\n\n\t\t// for sqlite durable objects\n\t\t// eslint-disable-next-line no-instanceof/no-instanceof\n\t\tif (value instanceof ArrayBuffer) {\n\t\t\tconst decoder = new TextDecoder();\n\t\t\treturn BigInt(decoder.decode(value));\n\t\t}\n\n\t\treturn BigInt(String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: bigint): Buffer {\n\t\treturn Buffer.from(value.toString());\n\t}\n}\n\nexport type SQLiteBlobJsonBuilderInitial<TName extends string> = SQLiteBlobJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteBlobJson';\n\tdata: unknown;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteBlobJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteBlobJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBlobJson<T extends ColumnBaseConfig<'json', 'SQLiteBlobJson'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobJson';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer | Uint8Array | ArrayBuffer): T['data'] {\n\t\tif (Buffer.isBuffer(value)) {\n\t\t\treturn JSON.parse(value.toString());\n\t\t}\n\n\t\t// for sqlite durable objects\n\t\t// eslint-disable-next-line no-instanceof/no-instanceof\n\t\tif (value instanceof ArrayBuffer) {\n\t\t\tconst decoder = new TextDecoder();\n\t\t\treturn JSON.parse(decoder.decode(value));\n\t\t}\n\n\t\treturn JSON.parse(String.fromCodePoint(...value));\n\t}\n\n\toverride mapToDriverValue(value: T['data']): Buffer {\n\t\treturn Buffer.from(JSON.stringify(value));\n\t}\n}\n\nexport type SQLiteBlobBufferBuilderInitial<TName extends string> = SQLiteBlobBufferBuilder<{\n\tname: TName;\n\tdataType: 'buffer';\n\tcolumnType: 'SQLiteBlobBuffer';\n\tdata: Buffer;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBlobBufferBuilder<T extends ColumnBuilderBaseConfig<'buffer', 'SQLiteBlobBuffer'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBufferBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'buffer', 'SQLiteBlobBuffer');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBlobBuffer<T extends ColumnBaseConfig<'buffer', 'SQLiteBlobBuffer'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBlobBuffer';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n}\n\nexport interface BlobConfig<TMode extends BlobMode = BlobMode> {\n\tmode: TMode;\n}\n\n/**\n *  It's recommended to use `text('...', { mode: 'json' })` instead of `blob` in JSON mode, because it supports JSON functions:\n * >All JSON functions currently throw an error if any of their arguments are BLOBs because BLOBs are reserved for a future enhancement in which BLOBs will store the binary encoding for JSON.\n *\n * https://www.sqlite.org/json1.html\n */\nexport function blob(): SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TMode extends BlobMode = BlobMode>(\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<''>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<''>\n\t: SQLiteBlobJsonBuilderInitial<''>;\nexport function blob<TName extends string, TMode extends BlobMode = BlobMode>(\n\tname: TName,\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<TName>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<TName>\n\t: SQLiteBlobJsonBuilderInitial<TName>;\nexport function blob(a?: string | BlobConfig, b?: BlobConfig) {\n\tconst { name, config } = getColumnNameAndConfig<BlobConfig | undefined>(a, b);\n\tif (config?.mode === 'json') {\n\t\treturn new SQLiteBlobJsonBuilder(name);\n\t}\n\tif (config?.mode === 'bigint') {\n\t\treturn new SQLiteBigIntBuilder(name);\n\t}\n\treturn new SQLiteBlobBufferBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'SQLiteCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface SQLiteCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class SQLiteCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'SQLiteCustomColumn'>>\n\textends SQLiteColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tsqliteColumnBuilderBrand: 'SQLiteCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'SQLiteCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteCustomColumn<T extends ColumnBaseConfig<'custom', 'SQLiteCustomColumn'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: Record<string, any>;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom sqlite database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? {\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n\t: {\n\t\t(): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TConfig extends Record<string, any> & T['config']>(\n\t\t\tfieldConfig?: TConfig,\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<'', T>>;\n\t\t<TName extends string>(\n\t\t\tdbName: TName,\n\t\t\tfieldConfig?: T['config'],\n\t\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>;\n\t}\n{\n\treturn <TName extends string>(\n\t\ta?: TName | T['config'],\n\t\tb?: T['config'],\n\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\tconst { name, config } = getColumnNameAndConfig<T['config']>(a, b);\n\t\treturn new SQLiteCustomColumnBuilder(\n\t\t\tname as ConvertCustomConfig<TName, T>['name'],\n\t\t\tconfig,\n\t\t\tcustomTypeParams,\n\t\t);\n\t};\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasDefault,\n\tIsPrimaryKey,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport type { OnConflict } from '~/sqlite-core/utils.ts';\nimport { type Equal, getColumnNameAndConfig, type Or } from '~/utils.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport interface PrimaryKeyConfig {\n\tautoIncrement?: boolean;\n\tonConflict?: OnConflict;\n}\n\nexport abstract class SQLiteBaseIntegerBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumnBuilder<\n\tT,\n\tTRuntimeConfig & { autoIncrement: boolean },\n\t{},\n\t{ primaryKeyHasDefault: true }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseIntegerBuilder';\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tsuper(name, dataType, columnType);\n\t\tthis.config.autoIncrement = false;\n\t}\n\n\toverride primaryKey(config?: PrimaryKeyConfig): IsPrimaryKey<HasDefault<NotNull<this>>> {\n\t\tif (config?.autoIncrement) {\n\t\t\tthis.config.autoIncrement = true;\n\t\t}\n\t\tthis.config.hasDefault = true;\n\t\treturn super.primaryKey() as IsPrimaryKey<HasDefault<NotNull<this>>>;\n\t}\n\n\t/** @internal */\n\tabstract override build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBaseInteger<MakeColumnConfig<T, TTableName>>;\n}\n\nexport abstract class SQLiteBaseInteger<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumn<T, TRuntimeConfig & { autoIncrement: boolean }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteBaseInteger';\n\n\treadonly autoIncrement: boolean = this.config.autoIncrement;\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n}\n\nexport type SQLiteIntegerBuilderInitial<TName extends string> = SQLiteIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteInteger';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteInteger'>>\n\textends SQLiteBaseIntegerBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteInteger');\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteInteger<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteInteger<T extends ColumnBaseConfig<'number', 'SQLiteInteger'>> extends SQLiteBaseInteger<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteInteger';\n}\n\nexport type SQLiteTimestampBuilderInitial<TName extends string> = SQLiteTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'SQLiteTimestamp';\n\tdata: Date;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestampBuilder';\n\n\tconstructor(name: T['name'], mode: 'timestamp' | 'timestamp_ms') {\n\t\tsuper(name, 'date', 'SQLiteTimestamp');\n\t\tthis.config.mode = mode;\n\t}\n\n\t/**\n\t * @deprecated Use `default()` with your own expression instead.\n\t *\n\t * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n\t */\n\tdefaultNow(): HasDefault<this> {\n\t\treturn this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`) as any;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTimestamp<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTimestamp<T extends ColumnBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseInteger<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTimestamp';\n\n\treadonly mode: 'timestamp' | 'timestamp_ms' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): Date {\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn new Date(value * 1000);\n\t\t}\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): number {\n\t\tconst unix = value.getTime();\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn Math.floor(unix / 1000);\n\t\t}\n\t\treturn unix;\n\t}\n}\n\nexport type SQLiteBooleanBuilderInitial<TName extends string> = SQLiteBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'SQLiteBoolean';\n\tdata: boolean;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBooleanBuilder';\n\n\tconstructor(name: T['name'], mode: 'boolean') {\n\t\tsuper(name, 'boolean', 'SQLiteBoolean');\n\t\tthis.config.mode = mode;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBoolean<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBoolean<T extends ColumnBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseInteger<T, { mode: 'boolean' }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteBoolean';\n\n\treadonly mode: 'boolean' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): boolean {\n\t\treturn Number(value) === 1;\n\t}\n\n\toverride mapToDriverValue(value: boolean): number {\n\t\treturn value ? 1 : 0;\n\t}\n}\n\nexport interface IntegerConfig<\n\tTMode extends 'number' | 'timestamp' | 'timestamp_ms' | 'boolean' =\n\t\t| 'number'\n\t\t| 'timestamp'\n\t\t| 'timestamp_ms'\n\t\t| 'boolean',\n> {\n\tmode: TMode;\n}\n\nexport function integer(): SQLiteIntegerBuilderInitial<''>;\nexport function integer<TMode extends IntegerConfig['mode']>(\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<''>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<''>\n\t: SQLiteIntegerBuilderInitial<''>;\nexport function integer<TName extends string, TMode extends IntegerConfig['mode']>(\n\tname: TName,\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<TName>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<TName>\n\t: SQLiteIntegerBuilderInitial<TName>;\nexport function integer(a?: string | IntegerConfig, b?: IntegerConfig) {\n\tconst { name, config } = getColumnNameAndConfig<IntegerConfig | undefined>(a, b);\n\tif (config?.mode === 'timestamp' || config?.mode === 'timestamp_ms') {\n\t\treturn new SQLiteTimestampBuilder(name, config.mode);\n\t}\n\tif (config?.mode === 'boolean') {\n\t\treturn new SQLiteBooleanBuilder(name, config.mode);\n\t}\n\treturn new SQLiteIntegerBuilder(name);\n}\n\nexport const int = integer;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteNumericBuilderInitial<TName extends string> = SQLiteNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteNumeric'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteNumericBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'SQLiteNumeric');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteNumeric<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteNumeric<T extends ColumnBaseConfig<'string', 'SQLiteNumeric'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteNumeric';\n\n\tgetSQLType(): string {\n\t\treturn 'numeric';\n\t}\n}\n\nexport function numeric(): SQLiteNumericBuilderInitial<''>;\nexport function numeric<TName extends string>(name: TName): SQLiteNumericBuilderInitial<TName>;\nexport function numeric(name?: string) {\n\treturn new SQLiteNumericBuilder(name ?? '');\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteRealBuilderInitial<TName extends string> = SQLiteRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteReal';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n}>;\n\nexport class SQLiteRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteReal'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRealBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteReal');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteReal<T extends ColumnBaseConfig<'number', 'SQLiteReal'>> extends SQLiteColumn<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteReal';\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n}\n\nexport function real(): SQLiteRealBuilderInitial<''>;\nexport function real<TName extends string>(name: TName): SQLiteRealBuilderInitial<TName>;\nexport function real(name?: string) {\n\treturn new SQLiteRealBuilder(name ?? '');\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { type Equal, getColumnNameAndConfig, type Writable } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteTextBuilderInitial<\n\tTName extends string,\n\tTEnum extends [string, ...string[]],\n\tTLength extends number | undefined,\n> = SQLiteTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteText';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n\tlength: TLength;\n}>;\n\nexport class SQLiteTextBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'SQLiteText'> & { length?: number | undefined },\n> extends SQLiteColumnBuilder<\n\tT,\n\t{ length: T['length']; enumValues: T['enumValues'] },\n\t{ length: T['length'] }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTextBuilder';\n\n\tconstructor(name: T['name'], config: SQLiteTextConfig<'text', T['enumValues'], T['length']>) {\n\t\tsuper(name, 'string', 'SQLiteText');\n\t\tthis.config.enumValues = config.enum;\n\t\tthis.config.length = config.length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteText<MakeColumnConfig<T, TTableName> & { length: T['length'] }> {\n\t\treturn new SQLiteText<MakeColumnConfig<T, TTableName> & { length: T['length'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteText<T extends ColumnBaseConfig<'string', 'SQLiteText'> & { length?: number | undefined }>\n\textends SQLiteColumn<T, { length: T['length']; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\treadonly length: T['length'] = this.config.length;\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteTextBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `text${this.config.length ? `(${this.config.length})` : ''}`;\n\t}\n}\n\nexport type SQLiteTextJsonBuilderInitial<TName extends string> = SQLiteTextJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteTextJson';\n\tdata: unknown;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteTextJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteTextJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTextJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTextJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTextJson<T extends ColumnBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteTextJson';\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n\n\toverride mapFromDriverValue(value: string): T['data'] {\n\t\treturn JSON.parse(value);\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n}\n\nexport type SQLiteTextConfig<\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n\tTEnum extends readonly string[] | string[] | undefined = readonly string[] | string[] | undefined,\n\tTLength extends number | undefined = number | undefined,\n> = TMode extends 'text' ? {\n\t\tmode?: TMode;\n\t\tlength?: TLength;\n\t\tenum?: TEnum;\n\t}\n\t: {\n\t\tmode?: TMode;\n\t};\n\nexport function text(): SQLiteTextBuilderInitial<'', [string, ...string[]], undefined>;\nexport function text<\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>, L>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<''>\n\t: SQLiteTextBuilderInitial<'', Writable<T>, L>;\nexport function text<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tL extends number | undefined,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tname: TName,\n\tconfig?: SQLiteTextConfig<TMode, T | Writable<T>, L>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<TName>\n\t: SQLiteTextBuilderInitial<TName, Writable<T>, L>;\nexport function text(a?: string | SQLiteTextConfig, b: SQLiteTextConfig = {}): any {\n\tconst { name, config } = getColumnNameAndConfig<SQLiteTextConfig>(a, b);\n\tif (config.mode === 'json') {\n\t\treturn new SQLiteTextJsonBuilder(name);\n\t}\n\treturn new SQLiteTextBuilder(name, config as any);\n}\n", "export * from './blob.ts';\nexport * from './common.ts';\nexport * from './custom.ts';\nexport * from './integer.ts';\nexport * from './numeric.ts';\nexport * from './real.ts';\nexport * from './text.ts';\n", "import { ColumnAliasProxyHandler, TableAliasProxyHandler } from './alias.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { SQL, View } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class SelectionProxyHandler<T extends Subquery | Record<string, unknown> | View>\n\timplements ProxyHandler<Subquery | Record<string, unknown> | View>\n{\n\tstatic readonly [entityKind]: string = 'SelectionProxyHandler';\n\n\tprivate config: {\n\t\t/**\n\t\t * Table alias for the columns\n\t\t */\n\t\talias?: string;\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL.Aliased` and it's not a selection field (from a subquery)\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `alias` - return the field alias\n\t\t */\n\t\tsqlAliasedBehavior: 'sql' | 'alias';\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL` and it doesn't have an alias declared\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `error` - return a DrizzleTypeError on type level and throw an error on runtime\n\t\t */\n\t\tsqlBehavior: 'sql' | 'error';\n\n\t\t/**\n\t\t * Whether to replace the original name of the column with the alias\n\t\t * Should be set to `true` for views creation\n\t\t * @default false\n\t\t */\n\t\treplaceOriginalName?: boolean;\n\t};\n\n\tconstructor(config: SelectionProxyHandler<T>['config']) {\n\t\tthis.config = { ...config };\n\t}\n\n\tget(subquery: T, prop: string | symbol): any {\n\t\tif (prop === '_') {\n\t\t\treturn {\n\t\t\t\t...subquery['_' as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as Subquery)._.selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...subquery[ViewBaseConfig as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as View)[ViewBaseConfig].selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (typeof prop === 'symbol') {\n\t\t\treturn subquery[prop as keyof typeof subquery];\n\t\t}\n\n\t\tconst columns = is(subquery, Subquery)\n\t\t\t? subquery._.selectedFields\n\t\t\t: is(subquery, View)\n\t\t\t? subquery[ViewBaseConfig].selectedFields\n\t\t\t: subquery;\n\t\tconst value: unknown = columns[prop as keyof typeof columns];\n\n\t\tif (is(value, SQL.Aliased)) {\n\t\t\t// Never return the underlying SQL expression for a field previously selected in a subquery\n\t\t\tif (this.config.sqlAliasedBehavior === 'sql' && !value.isSelectionField) {\n\t\t\t\treturn value.sql;\n\t\t\t}\n\n\t\t\tconst newValue = value.clone();\n\t\t\tnewValue.isSelectionField = true;\n\t\t\treturn newValue;\n\t\t}\n\n\t\tif (is(value, SQL)) {\n\t\t\tif (this.config.sqlBehavior === 'sql') {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`,\n\t\t\t);\n\t\t}\n\n\t\tif (is(value, Column)) {\n\t\t\tif (this.config.alias) {\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tvalue,\n\t\t\t\t\tnew ColumnAliasProxyHandler(\n\t\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\t\tvalue.table,\n\t\t\t\t\t\t\tnew TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tif (typeof value !== 'object' || value === null) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn new Proxy(value, new SelectionProxyHandler(this.config));\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport abstract class QueryPromise<T> implements Promise<T> {\n\tstatic readonly [entityKind]: string = 'QueryPromise';\n\n\t[Symbol.toStringTag] = 'QueryPromise';\n\n\tcatch<TResult = never>(\n\t\tonRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined,\n\t): Promise<T | TResult> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<T> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n\t\tonRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.execute().then(onFulfilled, onRejected);\n\t}\n\n\tabstract execute(): Promise<T>;\n}\n", "import { blob } from './blob.ts';\nimport { customType } from './custom.ts';\nimport { integer } from './integer.ts';\nimport { numeric } from './numeric.ts';\nimport { real } from './real.ts';\nimport { text } from './text.ts';\n\nexport function getSQLiteColumnBuilders() {\n\treturn {\n\t\tblob,\n\t\tcustomType,\n\t\tinteger,\n\t\tnumeric,\n\t\treal,\n\t\ttext,\n\t};\n}\n\nexport type SQLiteColumnBuilders = ReturnType<typeof getSQLiteColumnBuilders>;\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getSQLiteColumnBuilders, type SQLiteColumnBuilders } from './columns/all.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilder, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type SQLiteTableExtraConfigValue =\n\t| IndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder;\n\nexport type SQLiteTableExtraConfig = Record<\n\tstring,\n\tSQLiteTableExtraConfigValue\n>;\n\nexport type TableConfig = TableConfigBase<SQLiteColumn<any>>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:SQLiteInlineForeignKeys');\n\nexport class SQLiteTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/** @internal */\n\toverride [Table.Symbol.Columns]!: NonNullable<T['columns']>;\n\n\t/** @internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]:\n\t\t| ((self: Record<string, SQLiteColumn>) => SQLiteTableExtraConfig)\n\t\t| undefined = undefined;\n}\n\nexport type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<\n\tUpdateTableConfig<TableConfig, TPartial>\n>;\n\nexport type SQLiteTableWithColumns<T extends TableConfig> =\n\t& SQLiteTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\nexport interface SQLiteTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (\n\t\t\tself: BuildColumns<TTableName, TColumnsMap, 'sqlite'>,\n\t\t) => SQLiteTableExtraConfigValue[],\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfigValue[],\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\t/**\n\t * @deprecated The third parameter of sqliteTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n\n\t/**\n\t * @deprecated The third parameter of sqliteTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = sqliteTable(\"users\", {\n\t * \tid: int(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n}\n\nfunction sqliteTableBase<\n\tTTableName extends string,\n\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\tTSchema extends string | undefined,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: SQLiteColumnBuilders) => TColumnsMap),\n\textraConfig:\n\t\t| ((\n\t\t\tself: BuildColumns<TTableName, TColumnsMap, 'sqlite'>,\n\t\t) => SQLiteTableExtraConfig | SQLiteTableExtraConfigValue[])\n\t\t| undefined,\n\tschema?: TSchema,\n\tbaseName = name,\n): SQLiteTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchema;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\tdialect: 'sqlite';\n}> {\n\tconst rawTable = new SQLiteTable<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getSQLiteColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as SQLiteColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumns as unknown as BuildExtraConfigColumns<\n\t\tTTableName,\n\t\tTColumnsMap,\n\t\t'sqlite'\n\t>;\n\n\tif (extraConfig) {\n\t\ttable[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig as (\n\t\t\tself: Record<string, SQLiteColumn>,\n\t\t) => SQLiteTableExtraConfig;\n\t}\n\n\treturn table;\n}\n\nexport const sqliteTable: SQLiteTableFn = (name, columns, extraConfig) => {\n\treturn sqliteTableBase(name, columns, extraConfig);\n};\n\nexport function sqliteTableCreator(customizeTableName: (name: string) => string): SQLiteTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn sqliteTableBase(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { type DrizzleTypeError, orderSelectedFields, type ValueOrArray } from '~/utils.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type SQLiteDeleteWithout<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tSQLiteDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['resultType'],\n\t\t\tT['_']['runResult'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type SQLiteDelete<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n> = SQLiteDeleteBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteDeleteConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteDeleteReturningAll<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteReturning<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteExecute<T extends AnySQLiteDeleteBase> = T['_']['returning'] extends undefined\n\t? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteDeletePrepare<T extends AnySQLiteDeleteBase> = SQLitePreparedQuery<{\n\ttype: T['_']['resultType'];\n\trun: T['_']['runResult'];\n\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t: T['_']['returning'][];\n\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t: T['_']['returning'] | undefined;\n\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t: any[][];\n\texecute: SQLiteDeleteExecute<T>;\n}>;\n\nexport type SQLiteDeleteDynamic<T extends AnySQLiteDeleteBase> = SQLiteDelete<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type AnySQLiteDeleteBase = SQLiteDeleteBase<any, any, any, any, any, any>;\n\nexport interface SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\tdialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteDelete';\n\n\t/** @internal */\n\tconfig: SQLiteDeleteConfig;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteDeleteWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(deleteTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteDeleteWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteDeleteWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteDeletePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteDeletePrepare<this>;\n\t}\n\n\tprepare(): SQLiteDeletePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(placeholderValues?: Record<string, unknown>): Promise<SQLiteDeleteExecute<this>> {\n\t\treturn this._prepare().execute(placeholderValues) as SQLiteDeleteExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import type { Column } from '~/column.ts';\nimport { entityKind } from './entity.ts';\nimport { Table } from './table.ts';\nimport type { Casing } from './utils.ts';\n\nexport function toSnakeCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.map((word) => word.toLowerCase()).join('_');\n}\n\nexport function toCamelCase(input: string) {\n\tconst words = input\n\t\t.replace(/['\\u2019]/g, '')\n\t\t.match(/[\\da-z]+|[A-Z]+(?![a-z])|[A-Z][\\da-z]+/g) ?? [];\n\n\treturn words.reduce((acc, word, i) => {\n\t\tconst formattedWord = i === 0 ? word.toLowerCase() : `${word[0]!.toUpperCase()}${word.slice(1)}`;\n\t\treturn acc + formattedWord;\n\t}, '');\n}\n\nfunction noopCase(input: string) {\n\treturn input;\n}\n\nexport class CasingCache {\n\tstatic readonly [entityKind]: string = 'CasingCache';\n\n\t/** @internal */\n\tcache: Record<string, string> = {};\n\tprivate cachedTables: Record<string, true> = {};\n\tprivate convert: (input: string) => string;\n\n\tconstructor(casing?: Casing) {\n\t\tthis.convert = casing === 'snake_case'\n\t\t\t? toSnakeCase\n\t\t\t: casing === 'camelCase'\n\t\t\t? toCamelCase\n\t\t\t: noopCase;\n\t}\n\n\tgetColumnCasing(column: Column): string {\n\t\tif (!column.keyAsName) return column.name;\n\n\t\tconst schema = column.table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = column.table[Table.Symbol.OriginalName];\n\t\tconst key = `${schema}.${tableName}.${column.name}`;\n\n\t\tif (!this.cache[key]) {\n\t\t\tthis.cacheTable(column.table);\n\t\t}\n\t\treturn this.cache[key]!;\n\t}\n\n\tprivate cacheTable(table: Table) {\n\t\tconst schema = table[Table.Symbol.Schema] ?? 'public';\n\t\tconst tableName = table[Table.Symbol.OriginalName];\n\t\tconst tableKey = `${schema}.${tableName}`;\n\n\t\tif (!this.cachedTables[tableKey]) {\n\t\t\tfor (const column of Object.values(table[Table.Symbol.Columns])) {\n\t\t\t\tconst columnKey = `${tableKey}.${column.name}`;\n\t\t\t\tthis.cache[columnKey] = this.convert(column.name);\n\t\t\t}\n\t\t\tthis.cachedTables[tableKey] = true;\n\t\t}\n\t}\n\n\tclearCache() {\n\t\tthis.cache = {};\n\t\tthis.cachedTables = {};\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport class DrizzleError extends Error {\n\tstatic readonly [entityKind]: string = 'DrizzleError';\n\n\tconstructor({ message, cause }: { message?: string; cause?: unknown }) {\n\t\tsuper(message);\n\t\tthis.name = 'DrizzleError';\n\t\tthis.cause = cause;\n\t}\n}\n\nexport class TransactionRollbackError extends DrizzleError {\n\tstatic override readonly [entityKind]: string = 'TransactionRollbackError';\n\n\tconstructor() {\n\t\tsuper({ message: 'Rollback' });\n\t}\n}\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport { getPgColumnBuilders, type PgColumnsBuilders } from './columns/all.ts';\nimport type { PgColumn, PgColumnBuilder, PgColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PgPolicy } from './policies.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type PgTableExtraConfigValue =\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n\t| PgPolicy;\n\nexport type PgTableExtraConfig = Record<\n\tstring,\n\tPgTableExtraConfigValue\n>;\n\nexport type TableConfig = TableConfigBase<PgColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\n/** @internal */\nexport const EnableRLS = Symbol.for('drizzle:EnableRLS');\n\nexport class PgTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic override readonly [entityKind]: string = 'PgTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t\tEnableRLS: EnableRLS as typeof EnableRLS,\n\t});\n\n\t/**@internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\t[EnableRLS]: boolean = false;\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]: ((self: Record<string, PgColumn>) => PgTableExtraConfig) | undefined =\n\t\tundefined;\n}\n\nexport type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport type PgTableWithColumns<T extends TableConfig> =\n\t& PgTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t}\n\t& {\n\t\tenableRLS: () => Omit<\n\t\t\tPgTableWithColumns<T>,\n\t\t\t'enableRLS'\n\t\t>;\n\t};\n\n/** @internal */\nexport function pgTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap | ((columnTypes: PgColumnsBuilders) => TColumnsMap),\n\textraConfig:\n\t\t| ((self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig | PgTableExtraConfigValue[])\n\t\t| undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): PgTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\tdialect: 'pg';\n}> {\n\tconst rawTable = new PgTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>(name, schema, baseName);\n\n\tconst parsedColumns: TColumnsMap = typeof columns === 'function' ? columns(getPgColumnBuilders()) : columns;\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst builtColumnsForExtraConfig = Object.fromEntries(\n\t\tObject.entries(parsedColumns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tcolBuilder.setName(name);\n\t\t\tconst column = colBuilder.buildExtraConfigColumn(rawTable);\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n\n\tif (extraConfig) {\n\t\ttable[PgTable.Symbol.ExtraConfigBuilder] = extraConfig as any;\n\t}\n\n\treturn Object.assign(table, {\n\t\tenableRLS: () => {\n\t\t\ttable[PgTable.Symbol.EnableRLS] = true;\n\t\t\treturn table as PgTableWithColumns<{\n\t\t\t\tname: TTableName;\n\t\t\t\tschema: TSchemaName;\n\t\t\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\t\t\tdialect: 'pg';\n\t\t\t}>;\n\t\t},\n\t});\n}\n\nexport interface PgTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig?: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfigValue[],\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig: (\n\t\t\tself: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>,\n\t\t) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n\n\t/**\n\t * @deprecated The third parameter of pgTable is changing and will only accept an array instead of an object\n\t *\n\t * @example\n\t * Deprecated version:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => ({\n\t * \tidx: index('custom_name').on(t.id)\n\t * }));\n\t * ```\n\t *\n\t * New API:\n\t * ```ts\n\t * export const users = pgTable(\"users\", {\n\t * \tid: integer(),\n\t * }, (t) => [\n\t * \tindex('custom_name').on(t.id)\n\t * ]);\n\t * ```\n\t */\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: (columnTypes: PgColumnsBuilders) => TColumnsMap,\n\t\textraConfig: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n}\n\nexport const pgTable: PgTableFn = (name, columns, extraConfig) => {\n\treturn pgTableWithSchema(name, columns, extraConfig, undefined);\n};\n\nexport function pgTableCreator(customizeTableName: (name: string) => string): PgTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnyPgColumn<{ tableName: TTableName }>,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\n\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKeyBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKey';\n\n\treadonly columns: AnyPgColumn<{}>[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: PgTable, columns: AnyPgColumn<{}>[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "import { type AnyColumn, Column, type GetColumnData } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tisDriverValueEncoder,\n\tisSQLWrapper,\n\tParam,\n\tPlaceholder,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n\ttype SQLWrapper,\n\tStringChunk,\n\tView,\n} from '../sql.ts';\n\nexport function bindIfParam(value: unknown, column: SQLWrapper): SQLChunk {\n\tif (\n\t\tisDriverValueEncoder(column)\n\t\t&& !isSQLWrapper(value)\n\t\t&& !is(value, Param)\n\t\t&& !is(value, Placeholder)\n\t\t&& !is(value, Column)\n\t\t&& !is(value, Table)\n\t\t&& !is(value, View)\n\t) {\n\t\treturn new Param(value, column);\n\t}\n\treturn value as SQLChunk;\n}\n\nexport interface BinaryOperator {\n\t<TColumn extends Column>(\n\t\tleft: TColumn,\n\t\tright: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\t): SQL;\n\t<T>(left: SQL.Aliased<T>, right: T | SQLWrapper): SQL;\n\t<T extends SQLWrapper>(\n\t\tleft: Exclude<T, SQL.Aliased | Column>,\n\t\tright: unknown,\n\t): SQL;\n}\n\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */\nexport const eq: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} = ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */\nexport const ne: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <> ${bindIfParam(right, left)}`;\n};\n\n/**\n * Combine a list of conditions with the `and` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     and(\n *       eq(cars.make, 'Volvo'),\n *       eq(cars.year, 1950),\n *     )\n *   )\n * ```\n */\nexport function and(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function and(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' and ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Combine a list of conditions with the `or` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     or(\n *       eq(cars.make, 'GM'),\n *       eq(cars.make, 'Ford'),\n *     )\n *   )\n * ```\n */\nexport function or(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function or(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' or ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */\nexport function not(condition: SQLWrapper): SQL {\n\treturn sql`not ${condition}`;\n}\n\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */\nexport const gt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} > ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */\nexport const gte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} >= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for less-than-or-equal\n */\nexport const lt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} < ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */\nexport const lte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value from a list passed as the second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford or GM.\n * db.select().from(cars)\n *   .where(inArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see notInArray for the inverse of this test\n */\nexport function inArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`false`;\n\t\t}\n\t\treturn sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value that is not present in a list passed as the\n * second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by any company except Ford or GM.\n * db.select().from(cars)\n *   .where(notInArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see inArray for the inverse of this test\n */\nexport function notInArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`true`;\n\t\t}\n\t\treturn sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} not in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */\nexport function isNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is null`;\n}\n\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */\nexport function isNotNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is not null`;\n}\n\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */\nexport function exists(subquery: SQLWrapper): SQL {\n\treturn sql`exists ${subquery}`;\n}\n\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */\nexport function notExists(subquery: SQLWrapper): SQL {\n\treturn sql`not exists ${subquery}`;\n}\n\n/**\n * Test whether an expression is between two values. This\n * is an easier way to express range tests, which would be\n * expressed mathematically as `x <= a <= y` but in SQL\n * would have to be like `a >= x AND a <= y`.\n *\n * Between is inclusive of the endpoints: if `column`\n * is equal to `min` or `max`, it will be TRUE.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made between 1990 and 2000\n * db.select().from(cars)\n *   .where(between(cars.year, 1990, 2000))\n * ```\n *\n * @see notBetween for the inverse of this test\n */\nexport function between<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function between<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function between<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function between(column: SQLWrapper, min: unknown, max: unknown): SQL {\n\treturn sql`${column} between ${bindIfParam(min, column)} and ${\n\t\tbindIfParam(\n\t\t\tmax,\n\t\t\tcolumn,\n\t\t)\n\t}`;\n}\n\n/**\n * Test whether an expression is not between two values.\n *\n * This, like `between`, includes its endpoints, so if\n * the `column` is equal to `min` or `max`, in this case\n * it will evaluate to FALSE.\n *\n * ## Examples\n *\n * ```ts\n * // Exclude cars made in the 1970s\n * db.select().from(cars)\n *   .where(notBetween(cars.year, 1970, 1979))\n * ```\n *\n * @see between for the inverse of this test\n */\nexport function notBetween<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function notBetween<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function notBetween<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function notBetween(\n\tcolumn: SQLWrapper,\n\tmin: unknown,\n\tmax: unknown,\n): SQL {\n\treturn sql`${column} not between ${\n\t\tbindIfParam(\n\t\t\tmin,\n\t\t\tcolumn,\n\t\t)\n\t} and ${bindIfParam(max, column)}`;\n}\n\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */\nexport function like(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} like ${value}`;\n}\n\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */\nexport function notLike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not like ${value}`;\n}\n\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */\nexport function ilike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} ilike ${value}`;\n}\n\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */\nexport function notIlike(column: Column | SQL.Aliased | SQL, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not ilike ${value}`;\n}\n\n/**\n * Test that a column or expression contains all elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\" and \"ORM\".\n * db.select().from(posts)\n *   .where(arrayContains(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContained to find if an array contains all elements of a column or expression\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContains<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContains(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContains requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} @> ${array}`;\n\t}\n\n\treturn sql`${column} @> ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that the list passed as the second argument contains\n * all elements of a column or expression.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both,\n * // but filtering posts that have additional tags.\n * db.select().from(posts)\n *   .where(arrayContained(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContained<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContained(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContained requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} <@ ${array}`;\n\t}\n\n\treturn sql`${column} <@ ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that a column or expression contains any elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both.\n * db.select().from(posts)\n *   .where(arrayOverlaps(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayContained to find if an array contains all elements of a column or expression\n */\nexport function arrayOverlaps<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayOverlaps(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayOverlaps requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} && ${array}`;\n\t}\n\n\treturn sql`${column} && ${bindIfParam(values, column)}`;\n}\n", "import type { AnyColumn } from '../../column.ts';\nimport type { SQL, SQLWrapper } from '../sql.ts';\nimport { sql } from '../sql.ts';\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */\nexport function asc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} asc`;\n}\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */\nexport function desc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} desc`;\n}\n", "export * from './conditions.ts';\nexport * from './select.ts';\n", "import { type AnyTable, getTableUniqueName, type InferModelFromColumns, Table } from '~/table.ts';\nimport { type AnyColumn, Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { PrimaryKeyBuilder } from './pg-core/primary-keys.ts';\nimport {\n\tand,\n\tasc,\n\tbetween,\n\tdesc,\n\teq,\n\texists,\n\tgt,\n\tgte,\n\tilike,\n\tinArray,\n\tisNotNull,\n\tisNull,\n\tlike,\n\tlt,\n\tlte,\n\tne,\n\tnot,\n\tnotBetween,\n\tnotExists,\n\tnotIlike,\n\tnotInArray,\n\tnotLike,\n\tor,\n} from './sql/expressions/index.ts';\nimport { type Placeholder, SQL, sql } from './sql/sql.ts';\nimport type { Assume, ColumnsWithTable, Equal, Simplify, ValueOrArray } from './utils.ts';\n\nexport abstract class Relation<TTableName extends string = string> {\n\tstatic readonly [entityKind]: string = 'Relation';\n\n\tdeclare readonly $brand: 'Relation';\n\treadonly referencedTableName: TTableName;\n\tfieldName!: string;\n\n\tconstructor(\n\t\treadonly sourceTable: Table,\n\t\treadonly referencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly relationName: string | undefined,\n\t) {\n\t\tthis.referencedTableName = referencedTable[Table.Symbol.Name] as TTableName;\n\t}\n\n\tabstract withFieldName(fieldName: string): Relation<TTableName>;\n}\n\nexport class Relations<\n\tTTableName extends string = string,\n\tTConfig extends Record<string, Relation> = Record<string, Relation>,\n> {\n\tstatic readonly [entityKind]: string = 'Relations';\n\n\tdeclare readonly $brand: 'Relations';\n\n\tconstructor(\n\t\treadonly table: AnyTable<{ name: TTableName }>,\n\t\treadonly config: (helpers: TableRelationsHelpers<TTableName>) => TConfig,\n\t) {}\n}\n\nexport class One<\n\tTTableName extends string = string,\n\tTIsNullable extends boolean = boolean,\n> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'One';\n\n\tdeclare protected $relationBrand: 'One';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config:\n\t\t\t| RelationConfig<\n\t\t\t\tTTableName,\n\t\t\t\tstring,\n\t\t\t\tAnyColumn<{ tableName: TTableName }>[]\n\t\t\t>\n\t\t\t| undefined,\n\t\treadonly isNullable: TIsNullable,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): One<TTableName> {\n\t\tconst relation = new One(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t\tthis.isNullable,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport class Many<TTableName extends string> extends Relation<TTableName> {\n\tstatic override readonly [entityKind]: string = 'Many';\n\n\tdeclare protected $relationBrand: 'Many';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config: { relationName: string } | undefined,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): Many<TTableName> {\n\t\tconst relation = new Many(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport type TableRelationsKeysOnly<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n\tK extends keyof TSchema,\n> = TSchema[K] extends Relations<TTableName> ? K : never;\n\nexport type ExtractTableRelationsFromSchema<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TableRelationsKeysOnly<\n\t\t\t\tTSchema,\n\t\t\t\tTTableName,\n\t\t\t\tK\n\t\t\t>\n\t\t]: TSchema[K] extends Relations<TTableName, infer TConfig> ? TConfig : never;\n\t}\n>;\n\nexport type ExtractObjectValues<T> = T[keyof T];\n\nexport type ExtractRelationsFromTableExtraConfigSchema<\n\tTConfig extends unknown[],\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TConfig as TConfig[K] extends Relations<any> ? K\n\t\t\t\t: never\n\t\t]: TConfig[K] extends Relations<infer TRelationConfig> ? TRelationConfig\n\t\t\t: never;\n\t}\n>;\n\nexport function getOperators() {\n\treturn {\n\t\tand,\n\t\tbetween,\n\t\teq,\n\t\texists,\n\t\tgt,\n\t\tgte,\n\t\tilike,\n\t\tinArray,\n\t\tisNull,\n\t\tisNotNull,\n\t\tlike,\n\t\tlt,\n\t\tlte,\n\t\tne,\n\t\tnot,\n\t\tnotBetween,\n\t\tnotExists,\n\t\tnotLike,\n\t\tnotIlike,\n\t\tnotInArray,\n\t\tor,\n\t\tsql,\n\t};\n}\n\nexport type Operators = ReturnType<typeof getOperators>;\n\nexport function getOrderByOperators() {\n\treturn {\n\t\tsql,\n\t\tasc,\n\t\tdesc,\n\t};\n}\n\nexport type OrderByOperators = ReturnType<typeof getOrderByOperators>;\n\nexport type FindTableByDBName<\n\tTSchema extends TablesRelationalConfig,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TSchema[K]['dbName'] extends TTableName ? K\n\t\t\t\t: never\n\t\t]: TSchema[K];\n\t}\n>;\n\nexport type DBQueryConfig<\n\tTRelationType extends 'one' | 'many' = 'one' | 'many',\n\tTIsRoot extends boolean = boolean,\n\tTSchema extends TablesRelationalConfig = TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig = TableRelationalConfig,\n> =\n\t& {\n\t\tcolumns?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['columns']]?: boolean;\n\t\t\t}\n\t\t\t| undefined;\n\t\twith?:\n\t\t\t| {\n\t\t\t\t[K in keyof TTableConfig['relations']]?:\n\t\t\t\t\t| true\n\t\t\t\t\t| DBQueryConfig<\n\t\t\t\t\t\tTTableConfig['relations'][K] extends One ? 'one' : 'many',\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\tFindTableByDBName<\n\t\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\t\tTTableConfig['relations'][K]['referencedTableName']\n\t\t\t\t\t\t>\n\t\t\t\t\t>\n\t\t\t\t\t| undefined;\n\t\t\t}\n\t\t\t| undefined;\n\t\textras?:\n\t\t\t| Record<string, SQL.Aliased>\n\t\t\t| ((\n\t\t\t\tfields: Simplify<\n\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t>,\n\t\t\t\toperators: { sql: Operators['sql'] },\n\t\t\t) => Record<string, SQL.Aliased>)\n\t\t\t| undefined;\n\t}\n\t& (TRelationType extends 'many' ?\n\t\t\t& {\n\t\t\t\twhere?:\n\t\t\t\t\t| SQL\n\t\t\t\t\t| undefined\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: Operators,\n\t\t\t\t\t) => SQL | undefined);\n\t\t\t\torderBy?:\n\t\t\t\t\t| ValueOrArray<AnyColumn | SQL>\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: OrderByOperators,\n\t\t\t\t\t) => ValueOrArray<AnyColumn | SQL>)\n\t\t\t\t\t| undefined;\n\t\t\t\tlimit?: number | Placeholder | undefined;\n\t\t\t}\n\t\t\t& (TIsRoot extends true ? {\n\t\t\t\t\toffset?: number | Placeholder | undefined;\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t: {});\n\nexport interface TableRelationalConfig {\n\ttsName: string;\n\tdbName: string;\n\tcolumns: Record<string, Column>;\n\trelations: Record<string, Relation>;\n\tprimaryKey: AnyColumn[];\n\tschema?: string;\n}\n\nexport type TablesRelationalConfig = Record<string, TableRelationalConfig>;\n\nexport interface RelationalSchemaConfig<\n\tTSchema extends TablesRelationalConfig,\n> {\n\tfullSchema: Record<string, unknown>;\n\tschema: TSchema;\n\ttableNamesMap: Record<string, string>;\n}\n\nexport type ExtractTablesWithRelations<\n\tTSchema extends Record<string, unknown>,\n> = {\n\t[\n\t\tK in keyof TSchema as TSchema[K] extends Table ? K\n\t\t\t: never\n\t]: TSchema[K] extends Table ? {\n\t\t\ttsName: K & string;\n\t\t\tdbName: TSchema[K]['_']['name'];\n\t\t\tcolumns: TSchema[K]['_']['columns'];\n\t\t\trelations: ExtractTableRelationsFromSchema<\n\t\t\t\tTSchema,\n\t\t\t\tTSchema[K]['_']['name']\n\t\t\t>;\n\t\t\tprimaryKey: AnyColumn[];\n\t\t}\n\t\t: never;\n};\n\nexport type ReturnTypeOrValue<T> = T extends (...args: any[]) => infer R ? R\n\t: T;\n\nexport type BuildRelationResult<\n\tTSchema extends TablesRelationalConfig,\n\tTInclude,\n\tTRelations extends Record<string, Relation>,\n> = {\n\t[\n\t\tK in\n\t\t\t& NonUndefinedKeysOnly<TInclude>\n\t\t\t& keyof TRelations\n\t]: TRelations[K] extends infer TRel extends Relation ? BuildQueryResult<\n\t\t\tTSchema,\n\t\t\tFindTableByDBName<TSchema, TRel['referencedTableName']>,\n\t\t\tAssume<TInclude[K], true | Record<string, unknown>>\n\t\t> extends infer TResult ? TRel extends One ?\n\t\t\t\t\t| TResult\n\t\t\t\t\t| (Equal<TRel['isNullable'], false> extends true ? null : never)\n\t\t\t: TResult[]\n\t\t: never\n\t\t: never;\n};\n\nexport type NonUndefinedKeysOnly<T> =\n\t& ExtractObjectValues<\n\t\t{\n\t\t\t[K in keyof T as T[K] extends undefined ? never : K]: K;\n\t\t}\n\t>\n\t& keyof T;\n\nexport type BuildQueryResult<\n\tTSchema extends TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig,\n\tTFullSelection extends true | Record<string, unknown>,\n> = Equal<TFullSelection, true> extends true ? InferModelFromColumns<TTableConfig['columns']>\n\t: TFullSelection extends Record<string, unknown> ? Simplify<\n\t\t\t& (TFullSelection['columns'] extends Record<string, unknown> ? InferModelFromColumns<\n\t\t\t\t\t{\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tK in Equal<\n\t\t\t\t\t\t\t\tExclude<\n\t\t\t\t\t\t\t\t\tTFullSelection['columns'][\n\t\t\t\t\t\t\t\t\t\t& keyof TFullSelection['columns']\n\t\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t> extends true ? Exclude<\n\t\t\t\t\t\t\t\t\tkeyof TTableConfig['columns'],\n\t\t\t\t\t\t\t\t\tNonUndefinedKeysOnly<TFullSelection['columns']>\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t& {\n\t\t\t\t\t\t\t\t\t\t[K in keyof TFullSelection['columns']]: Equal<\n\t\t\t\t\t\t\t\t\t\t\tTFullSelection['columns'][K],\n\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t> extends true ? K\n\t\t\t\t\t\t\t\t\t\t\t: never;\n\t\t\t\t\t\t\t\t\t}[keyof TFullSelection['columns']]\n\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t]: TTableConfig['columns'][K];\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t: InferModelFromColumns<TTableConfig['columns']>)\n\t\t\t& (TFullSelection['extras'] extends\n\t\t\t\t| Record<string, unknown>\n\t\t\t\t| ((...args: any[]) => Record<string, unknown>) ? {\n\t\t\t\t\t[\n\t\t\t\t\t\tK in NonUndefinedKeysOnly<\n\t\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>\n\t\t\t\t\t\t>\n\t\t\t\t\t]: Assume<\n\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>[K],\n\t\t\t\t\t\tSQL.Aliased\n\t\t\t\t\t>['_']['type'];\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t\t& (TFullSelection['with'] extends Record<string, unknown> ? BuildRelationResult<\n\t\t\t\t\tTSchema,\n\t\t\t\t\tTFullSelection['with'],\n\t\t\t\t\tTTableConfig['relations']\n\t\t\t\t>\n\t\t\t\t: {})\n\t\t>\n\t: never;\n\nexport interface RelationConfig<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> {\n\trelationName?: string;\n\tfields: TColumns;\n\treferences: ColumnsWithTable<TTableName, TForeignTableName, TColumns>;\n}\n\nexport function extractTablesRelationalConfig<\n\tTTables extends TablesRelationalConfig,\n>(\n\tschema: Record<string, unknown>,\n\tconfigHelpers: (table: Table) => any,\n): { tables: TTables; tableNamesMap: Record<string, string> } {\n\tif (\n\t\tObject.keys(schema).length === 1\n\t\t&& 'default' in schema\n\t\t&& !is(schema['default'], Table)\n\t) {\n\t\tschema = schema['default'] as Record<string, unknown>;\n\t}\n\n\t// table DB name -> schema table key\n\tconst tableNamesMap: Record<string, string> = {};\n\t// Table relations found before their tables - need to buffer them until we know the schema table key\n\tconst relationsBuffer: Record<\n\t\tstring,\n\t\t{ relations: Record<string, Relation>; primaryKey?: AnyColumn[] }\n\t> = {};\n\tconst tablesConfig: TablesRelationalConfig = {};\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tif (is(value, Table)) {\n\t\t\tconst dbName = getTableUniqueName(value);\n\t\t\tconst bufferedRelations = relationsBuffer[dbName];\n\t\t\ttableNamesMap[dbName] = key;\n\t\t\ttablesConfig[key] = {\n\t\t\t\ttsName: key,\n\t\t\t\tdbName: value[Table.Symbol.Name],\n\t\t\t\tschema: value[Table.Symbol.Schema],\n\t\t\t\tcolumns: value[Table.Symbol.Columns],\n\t\t\t\trelations: bufferedRelations?.relations ?? {},\n\t\t\t\tprimaryKey: bufferedRelations?.primaryKey ?? [],\n\t\t\t};\n\n\t\t\t// Fill in primary keys\n\t\t\tfor (\n\t\t\t\tconst column of Object.values(\n\t\t\t\t\t(value as Table)[Table.Symbol.Columns],\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (column.primary) {\n\t\t\t\t\ttablesConfig[key]!.primaryKey.push(column);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.((value as Table)[Table.Symbol.ExtraConfigColumns]);\n\t\t\tif (extraConfig) {\n\t\t\t\tfor (const configEntry of Object.values(extraConfig)) {\n\t\t\t\t\tif (is(configEntry, PrimaryKeyBuilder)) {\n\t\t\t\t\t\ttablesConfig[key]!.primaryKey.push(...configEntry.columns);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (is(value, Relations)) {\n\t\t\tconst dbName = getTableUniqueName(value.table);\n\t\t\tconst tableName = tableNamesMap[dbName];\n\t\t\tconst relations: Record<string, Relation> = value.config(\n\t\t\t\tconfigHelpers(value.table),\n\t\t\t);\n\t\t\tlet primaryKey: AnyColumn[] | undefined;\n\n\t\t\tfor (const [relationName, relation] of Object.entries(relations)) {\n\t\t\t\tif (tableName) {\n\t\t\t\t\tconst tableConfig = tablesConfig[tableName]!;\n\t\t\t\t\ttableConfig.relations[relationName] = relation;\n\t\t\t\t\tif (primaryKey) {\n\t\t\t\t\t\ttableConfig.primaryKey.push(...primaryKey);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!(dbName in relationsBuffer)) {\n\t\t\t\t\t\trelationsBuffer[dbName] = {\n\t\t\t\t\t\t\trelations: {},\n\t\t\t\t\t\t\tprimaryKey,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\trelationsBuffer[dbName]!.relations[relationName] = relation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { tables: tablesConfig as TTables, tableNamesMap };\n}\n\nexport function relations<\n\tTTableName extends string,\n\tTRelations extends Record<string, Relation<any>>,\n>(\n\ttable: AnyTable<{ name: TTableName }>,\n\trelations: (helpers: TableRelationsHelpers<TTableName>) => TRelations,\n): Relations<TTableName, TRelations> {\n\treturn new Relations<TTableName, TRelations>(\n\t\ttable,\n\t\t(helpers: TableRelationsHelpers<TTableName>) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries(relations(helpers)).map(([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue.withFieldName(key),\n\t\t\t\t]),\n\t\t\t) as TRelations,\n\t);\n}\n\nexport function createOne<TTableName extends string>(sourceTable: Table) {\n\treturn function one<\n\t\tTForeignTable extends Table,\n\t\tTColumns extends [\n\t\t\tAnyColumn<{ tableName: TTableName }>,\n\t\t\t...AnyColumn<{ tableName: TTableName }>[],\n\t\t],\n\t>(\n\t\ttable: TForeignTable,\n\t\tconfig?: RelationConfig<TTableName, TForeignTable['_']['name'], TColumns>,\n\t): One<\n\t\tTForeignTable['_']['name'],\n\t\tEqual<TColumns[number]['_']['notNull'], true>\n\t> {\n\t\treturn new One(\n\t\t\tsourceTable,\n\t\t\ttable,\n\t\t\tconfig,\n\t\t\t(config?.fields.reduce<boolean>((res, f) => res && f.notNull, true)\n\t\t\t\t?? false) as Equal<TColumns[number]['_']['notNull'], true>,\n\t\t);\n\t};\n}\n\nexport function createMany(sourceTable: Table) {\n\treturn function many<TForeignTable extends Table>(\n\t\treferencedTable: TForeignTable,\n\t\tconfig?: { relationName: string },\n\t): Many<TForeignTable['_']['name']> {\n\t\treturn new Many(sourceTable, referencedTable, config);\n\t};\n}\n\nexport interface NormalizedRelation {\n\tfields: AnyColumn[];\n\treferences: AnyColumn[];\n}\n\nexport function normalizeRelation(\n\tschema: TablesRelationalConfig,\n\ttableNamesMap: Record<string, string>,\n\trelation: Relation,\n): NormalizedRelation {\n\tif (is(relation, One) && relation.config) {\n\t\treturn {\n\t\t\tfields: relation.config.fields,\n\t\t\treferences: relation.config.references,\n\t\t};\n\t}\n\n\tconst referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n\tif (!referencedTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst referencedTableConfig = schema[referencedTableTsName];\n\tif (!referencedTableConfig) {\n\t\tthrow new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n\t}\n\n\tconst sourceTable = relation.sourceTable;\n\tconst sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n\tif (!sourceTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst reverseRelations: Relation[] = [];\n\tfor (\n\t\tconst referencedTableRelation of Object.values(\n\t\t\treferencedTableConfig.relations,\n\t\t)\n\t) {\n\t\tif (\n\t\t\t(relation.relationName\n\t\t\t\t&& relation !== referencedTableRelation\n\t\t\t\t&& referencedTableRelation.relationName === relation.relationName)\n\t\t\t|| (!relation.relationName\n\t\t\t\t&& referencedTableRelation.referencedTable === relation.sourceTable)\n\t\t) {\n\t\t\treverseRelations.push(referencedTableRelation);\n\t\t}\n\t}\n\n\tif (reverseRelations.length > 1) {\n\t\tthrow relation.relationName\n\t\t\t? new Error(\n\t\t\t\t`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`,\n\t\t\t)\n\t\t\t: new Error(\n\t\t\t\t`There are multiple relations between \"${referencedTableTsName}\" and \"${\n\t\t\t\t\trelation.sourceTable[Table.Symbol.Name]\n\t\t\t\t}\". Please specify relation name`,\n\t\t\t);\n\t}\n\n\tif (\n\t\treverseRelations[0]\n\t\t&& is(reverseRelations[0], One)\n\t\t&& reverseRelations[0].config\n\t) {\n\t\treturn {\n\t\t\tfields: reverseRelations[0].config.references,\n\t\t\treferences: reverseRelations[0].config.fields,\n\t\t};\n\t}\n\n\tthrow new Error(\n\t\t`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`,\n\t);\n}\n\nexport function createTableRelationsHelpers<TTableName extends string>(\n\tsourceTable: AnyTable<{ name: TTableName }>,\n) {\n\treturn {\n\t\tone: createOne<TTableName>(sourceTable),\n\t\tmany: createMany(sourceTable),\n\t};\n}\n\nexport type TableRelationsHelpers<TTableName extends string> = ReturnType<\n\ttypeof createTableRelationsHelpers<TTableName>\n>;\n\nexport interface BuildRelationalQueryResult<\n\tTTable extends Table = Table,\n\tTColumn extends Column = Column,\n> {\n\ttableTsKey: string;\n\tselection: {\n\t\tdbKey: string;\n\t\ttsKey: string;\n\t\tfield: TColumn | SQL | SQL.Aliased;\n\t\trelationTableTsKey: string | undefined;\n\t\tisJson: boolean;\n\t\tisExtra?: boolean;\n\t\tselection: BuildRelationalQueryResult<TTable>['selection'];\n\t}[];\n\tsql: TTable | SQL;\n}\n\nexport function mapRelationalRow(\n\ttablesConfig: TablesRelationalConfig,\n\ttableConfig: TableRelationalConfig,\n\trow: unknown[],\n\tbuildQueryResultSelection: BuildRelationalQueryResult['selection'],\n\tmapColumnValue: (value: unknown) => unknown = (value) => value,\n): Record<string, unknown> {\n\tconst result: Record<string, unknown> = {};\n\n\tfor (\n\t\tconst [\n\t\t\tselectionItemIndex,\n\t\t\tselectionItem,\n\t\t] of buildQueryResultSelection.entries()\n\t) {\n\t\tif (selectionItem.isJson) {\n\t\t\tconst relation = tableConfig.relations[selectionItem.tsKey]!;\n\t\t\tconst rawSubRows = row[selectionItemIndex] as\n\t\t\t\t| unknown[]\n\t\t\t\t| null\n\t\t\t\t| [null]\n\t\t\t\t| string;\n\t\t\tconst subRows = typeof rawSubRows === 'string'\n\t\t\t\t? (JSON.parse(rawSubRows) as unknown[])\n\t\t\t\t: rawSubRows;\n\t\t\tresult[selectionItem.tsKey] = is(relation, One)\n\t\t\t\t? subRows\n\t\t\t\t\t&& mapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRows,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t: (subRows as unknown[][]).map((subRow) =>\n\t\t\t\t\tmapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRow,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t} else {\n\t\t\tconst value = mapColumnValue(row[selectionItemIndex]);\n\t\t\tconst field = selectionItem.field!;\n\t\t\tlet decoder;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tresult[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n\t\t}\n\t}\n\n\treturn result;\n}\n", "import { type AnyColumn, Column } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { type SQL, sql, type SQLWrapper } from '../sql.ts';\n\n/**\n * Returns the number of values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Number employees with null values\n * db.select({ value: count() }).from(employees)\n * // Number of employees where `name` is not null\n * db.select({ value: count(employees.name) }).from(employees)\n * ```\n *\n * @see countDistinct to get the number of non-duplicate values in `expression`\n */\nexport function count(expression?: SQLWrapper): SQL<number> {\n\treturn sql`count(${expression || sql.raw('*')})`.mapWith(Number);\n}\n\n/**\n * Returns the number of non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Number of employees where `name` is distinct\n * db.select({ value: countDistinct(employees.name) }).from(employees)\n * ```\n *\n * @see count to get the number of values in `expression`, including duplicates\n */\nexport function countDistinct(expression: SQLWrapper): SQL<number> {\n\treturn sql`count(distinct ${expression})`.mapWith(Number);\n}\n\n/**\n * Returns the average (arithmetic mean) of all non-null values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Average salary of an employee\n * db.select({ value: avg(employees.salary) }).from(employees)\n * ```\n *\n * @see avgDistinct to get the average of all non-null and non-duplicate values in `expression`\n */\nexport function avg(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`avg(${expression})`.mapWith(String);\n}\n\n/**\n * Returns the average (arithmetic mean) of all non-null and non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Average salary of an employee where `salary` is distinct\n * db.select({ value: avgDistinct(employees.salary) }).from(employees)\n * ```\n *\n * @see avg to get the average of all non-null values in `expression`, including duplicates\n */\nexport function avgDistinct(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`avg(distinct ${expression})`.mapWith(String);\n}\n\n/**\n * Returns the sum of all non-null values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Sum of every employee's salary\n * db.select({ value: sum(employees.salary) }).from(employees)\n * ```\n *\n * @see sumDistinct to get the sum of all non-null and non-duplicate values in `expression`\n */\nexport function sum(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`sum(${expression})`.mapWith(String);\n}\n\n/**\n * Returns the sum of all non-null and non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Sum of every employee's salary where `salary` is distinct (no duplicates)\n * db.select({ value: sumDistinct(employees.salary) }).from(employees)\n * ```\n *\n * @see sum to get the sum of all non-null values in `expression`, including duplicates\n */\nexport function sumDistinct(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`sum(distinct ${expression})`.mapWith(String);\n}\n\n/**\n * Returns the maximum value in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // The employee with the highest salary\n * db.select({ value: max(employees.salary) }).from(employees)\n * ```\n */\nexport function max<T extends SQLWrapper>(expression: T): SQL<(T extends AnyColumn ? T['_']['data'] : string) | null> {\n\treturn sql`max(${expression})`.mapWith(is(expression, Column) ? expression : String) as any;\n}\n\n/**\n * Returns the minimum value in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // The employee with the lowest salary\n * db.select({ value: min(employees.salary) }).from(employees)\n * ```\n */\nexport function min<T extends SQLWrapper>(expression: T): SQL<(T extends AnyColumn ? T['_']['data'] : string) | null> {\n\treturn sql`min(${expression})`.mapWith(is(expression, Column) ? expression : String) as any;\n}\n", "import type { AnyColumn } from '~/column.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { type SQL, sql, type SQLWrapper } from '../sql.ts';\n\nfunction toSql(value: number[] | string[]): string {\n\treturn JSON.stringify(value);\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the L2 distance to the given value.\n * If used in querying, this specifies that it should return the L2 distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(l2Distance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: l2Distance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function l2Distance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <-> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <-> ${value}`;\n}\n\n/**\n * L1 distance is one of the possible distance measures between two probability distribution vectors and it is\n * calculated as the sum of the absolute differences.\n * The smaller the distance between the observed probability vectors, the higher the accuracy of the synthetic data\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(l1Distance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: l1Distance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function l1Distance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <+> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <+> ${value}`;\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the inner product distance to the given value.\n * If used in querying, this specifies that it should return the inner product distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(innerProduct(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({ distance: innerProduct(cars.embedding, embedding) }).from(cars)\n * ```\n */\nexport function innerProduct(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <#> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <#> ${value}`;\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the cosine distance to the given value.\n * If used in querying, this specifies that it should return the cosine distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(cosineDistance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: cosineDistance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function cosineDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <=> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <=> ${value}`;\n}\n\n/**\n * Hamming distance between two strings or vectors of equal length is the number of positions at which the\n * corresponding symbols are different. In other words, it measures the minimum number of\n * substitutions required to change one string into the other, or equivalently,\n * the minimum number of errors that could have transformed one string into the other\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(hammingDistance(cars.embedding, embedding));\n * ```\n */\nexport function hammingDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <~> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <~> ${value}`;\n}\n\n/**\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(jaccardDistance(cars.embedding, embedding));\n * ```\n */\nexport function jaccardDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <%> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <%> ${value}`;\n}\n", "export * from './aggregate.ts';\nexport * from './vector.ts';\n", "export * from './expressions/index.ts';\nexport * from './functions/index.ts';\nexport * from './sql.ts';\n", "import { entityKind } from '~/entity.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { View } from '~/sql/sql.ts';\n\nexport abstract class SQLiteViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelection> {\n\tstatic override readonly [entityKind]: string = 'SQLiteViewBase';\n\n\tdeclare _: View<TName, TExisting, TSelection>['_'] & {\n\t\tviewBrand: 'SQLiteView';\n\t};\n}\n", "import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { CasingCache } from '~/casing.ts';\nimport type { AnyColumn } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { Name, Placeholder } from '~/sql/index.ts';\nimport { and, eq } from '~/sql/index.ts';\nimport { Param, type QueryWithTypings, SQL, sql, type SQLChunk } from '~/sql/sql.ts';\nimport { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type {\n\tAnySQLiteSelectQueryBuilder,\n\tSQLiteDeleteConfig,\n\tSQLiteInsertConfig,\n\tSQLiteUpdateConfig,\n} from '~/sqlite-core/query-builders/index.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { type Casing, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tSelectedFieldsOrdered,\n\tSQLiteSelectConfig,\n\tSQLiteSelectJoinConfig,\n} from './query-builders/select.types.ts';\nimport type { SQLiteSession } from './session.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport interface SQLiteDialectConfig {\n\tcasing?: Casing;\n}\n\nexport abstract class SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteDialect';\n\n\t/** @internal */\n\treadonly casing: CasingCache;\n\n\tconstructor(config?: SQLiteDialectConfig) {\n\t\tthis.casing = new CasingCache(config?.casing);\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(_num: number): string {\n\t\treturn '?';\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList, limit, orderBy }: SQLiteDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\tbuildUpdateSet(table: SQLiteTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList, joins, from, limit, orderBy }: SQLiteUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst fromSql = from && sql.join([sql.raw(' from '), this.buildFromTable(from)]);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\treturn sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, Column)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(this.casing.getColumnCasing(c));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tconst tableName = field.table[Table.Symbol.Name];\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(this.casing.getColumnCasing(field)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tprivate buildJoins(joins: SQLiteSelectJoinConfig[] | undefined): SQL | undefined {\n\t\tif (!joins || joins.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\n\t\t\t\tif (is(table, SQLiteTable)) {\n\t\t\t\t\tconst tableName = table[SQLiteTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[SQLiteTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[SQLiteTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\t\t\t\t\tsql.identifier(origTableName)\n\t\t\t\t\t\t}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn sql.join(joinsArray);\n\t}\n\n\tprivate buildLimit(limit: number | Placeholder | undefined): SQL | undefined {\n\t\treturn typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\t}\n\n\tprivate buildOrderBy(orderBy: (SQLiteColumn | SQL | SQL.Aliased)[] | undefined): SQL | undefined {\n\t\tconst orderByList: (SQLiteColumn | SQL | SQL.Aliased)[] = [];\n\n\t\tif (orderBy) {\n\t\t\tfor (const [index, orderByValue] of orderBy.entries()) {\n\t\t\t\torderByList.push(orderByValue);\n\n\t\t\t\tif (index < orderBy.length - 1) {\n\t\t\t\t\torderByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : undefined;\n\t}\n\n\tprivate buildFromTable(\n\t\ttable: SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined,\n\t): SQL | Subquery | SQLiteViewBase | SQLiteTable | undefined {\n\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\treturn sql`${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t}\n\n\t\treturn table;\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: SQLiteSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<SQLiteColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst distinctSql = distinct ? sql` distinct` : undefined;\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = this.buildFromTable(table);\n\n\t\tconst joinsSql = this.buildJoins(joins);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tconst groupByList: (SQL | AnyColumn | SQL.Aliased)[] = [];\n\t\tif (groupBy) {\n\t\t\tfor (const [index, groupByValue] of groupBy.entries()) {\n\t\t\t\tgroupByList.push(groupByValue);\n\n\t\t\t\tif (index < groupBy.length - 1) {\n\t\t\t\t\tgroupByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : undefined;\n\n\t\tconst orderBySql = this.buildOrderBy(orderBy);\n\n\t\tconst limitSql = this.buildLimit(limit);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: SQLiteSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: SQLiteSelectConfig['setOperators'][number] }): SQL {\n\t\t// SQLite doesn't support parenthesis in set operations\n\t\tconst leftChunk = sql`${leftSelect.getSQL()} `;\n\t\tconst rightChunk = sql`${rightSelect.getSQL()}`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, SQLiteColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, SQLiteColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery(\n\t\t{ table, values: valuesOrSelect, onConflict, returning, withList, select }: SQLiteInsertConfig,\n\t): SQL {\n\t\t// const isSingleValue = values.length === 1;\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, SQLiteColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, SQLiteColumn][] = Object.entries(columns).filter(([_, col]) =>\n\t\t\t!col.shouldDisableInsert()\n\t\t);\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));\n\n\t\tif (select) {\n\t\t\tconst select = valuesOrSelect as AnySQLiteSelectQueryBuilder | SQL;\n\n\t\t\tif (is(select, SQL)) {\n\t\t\t\tvaluesSqlList.push(select);\n\t\t\t} else {\n\t\t\t\tvaluesSqlList.push(select.getSQL());\n\t\t\t}\n\t\t} else {\n\t\t\tconst values = valuesOrSelect as Record<string, Param | SQL>[];\n\t\t\tvaluesSqlList.push(sql.raw('values '));\n\n\t\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t\tlet defaultValue;\n\t\t\t\t\t\tif (col.default !== null && col.default !== undefined) {\n\t\t\t\t\t\t\tdefaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (col.defaultFn !== undefined) {\n\t\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\t\tdefaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\t\tdefaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdefaultValue = sql`null`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvaluesSqlList.push(valueList);\n\t\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict?.length\n\t\t\t? sql.join(onConflict)\n\t\t\t: undefined;\n\n\t\t// if (isSingleValue && valuesSqlList.length === 0){\n\t\t// \treturn sql`insert into ${table} default values ${onConflictSql}${returningSql}`;\n\t\t// }\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tcasing: this.casing,\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\tbuildRelationalQuery({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: SQLiteTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<SQLiteTable, SQLiteColumn> {\n\t\tlet selection: BuildRelationalQueryResult<SQLiteTable, SQLiteColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: SQLiteSelectConfig['orderBy'] = [], where;\n\t\tconst joins: SQLiteSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as SQLiteColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: SQLiteColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as SQLiteColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as SQLiteColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\t// const relationTable = schema[relationTableTsName]!;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQuery({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as SQLiteTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = (sql`(${builtRelation.sql})`).as(selectedRelationTsKey);\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({\n\t\t\t\tmessage:\n\t\t\t\t\t`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`,\n\t\t\t});\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field }) =>\n\t\t\t\t\t\tis(field, SQLiteColumn)\n\t\t\t\t\t\t\t? sql.identifier(this.casing.getColumnCasing(field))\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_group_array(${field}), json_array())`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n\nexport class SQLiteSyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncDialect';\n\n\tmigrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'sync', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tconfig?: string | MigrationConfig,\n\t): void {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tsession.run(migrationTableCreate);\n\n\t\tconst dbMigrations = session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\t\tsession.run(sql`BEGIN`);\n\n\t\ttry {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tsession.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tsession.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsession.run(sql`COMMIT`);\n\t\t} catch (e) {\n\t\t\tsession.run(sql`ROLLBACK`);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nexport class SQLiteAsyncDialect extends SQLiteDialect {\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncDialect';\n\n\tasync migrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'async', any, any, any>,\n\t\tconfig?: string | MigrationConfig,\n\t): Promise<void> {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tawait session.run(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/sql/index.ts';\n\nexport abstract class TypedQueryBuilder<TSelection, TResult = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'TypedQueryBuilder';\n\n\tdeclare _: {\n\t\tselectedFields: TSelection;\n\t\tresult: TResult;\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): TSelection {\n\t\treturn this._.selectedFields;\n\t}\n\n\tabstract getSQL(): SQL;\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLiteSession } from '~/sqlite-core/session.ts';\nimport type { SubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tapplyMixins,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\torderSelectedFields,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type {\n\tAnySQLiteSelect,\n\tCreateSQLiteSelectFromBuilderMode,\n\tGetSQLiteSetOperators,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tSQLiteCreateSetOperatorFn,\n\tSQLiteSelectConfig,\n\tSQLiteSelectDynamic,\n\tSQLiteSelectExecute,\n\tSQLiteSelectHKT,\n\tSQLiteSelectHKTBase,\n\tSQLiteSelectJoinFn,\n\tSQLiteSelectPrepare,\n\tSQLiteSelectWithout,\n\tSQLiteSetOperatorExcludedMethods,\n\tSQLiteSetOperatorWithResult,\n} from './select.types.ts';\n\nexport class SQLiteSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: SQLiteSession<any, any, any, any> | undefined;\n\tprivate dialect: SQLiteDialect;\n\tprivate withList: Subquery[] | undefined;\n\tprivate distinct: boolean | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean;\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tthis.withList = config.withList;\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreateSQLiteSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, SQLiteViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<SQLiteTable>(source);\n\t\t}\n\n\t\treturn new SQLiteSelectBase({\n\t\t\ttable: source,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}) as any;\n\t}\n}\n\nexport abstract class SQLiteSelectQueryBuilderBase<\n\tTHKT extends SQLiteSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: SQLiteSession<any, any, any, any> | undefined;\n\tprotected dialect: SQLiteDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: SQLiteSelectConfig['table'];\n\t\t\tfields: SQLiteSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList: Subquery[] | undefined;\n\t\t\tdistinct: boolean | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteSelectJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends SQLiteSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetSQLiteSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getSQLiteSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/** @internal */\n\taddSetOperators(setOperators: SQLiteSelectConfig['setOperators']): SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): SQLiteSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tSQLiteSelectQueryBuilderBase<\n\t\tSQLiteSelectHKT,\n\t\tTTableName,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>\n{}\n\nexport class SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends SQLiteSelectQueryBuilderBase<\n\tSQLiteSelectHKT,\n\tTTableName,\n\tTResultType,\n\tTRunResult,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'sqlite'>, SQLWrapper {\n\tstatic override readonly [entityKind]: string = 'SQLiteSelect';\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteSelectPrepare<this> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\tconst fieldsList = orderSelectedFields<SQLiteColumn>(this.config.fields);\n\t\tconst query = this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tfieldsList,\n\t\t\t'all',\n\t\t\ttrue,\n\t\t);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query as ReturnType<this['prepare']>;\n\t}\n\n\tprepare(): SQLiteSelectPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\tasync execute(): Promise<SQLiteSelectExecute<this>> {\n\t\treturn this.all() as SQLiteSelectExecute<this>;\n\t}\n}\n\napplyMixins(SQLiteSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): SQLiteCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnySQLiteSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnySQLiteSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getSQLiteSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\texcept,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/sqlite-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/sqlite-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/sqlite-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/sqlite-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n", "import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport type { SQLiteDialectConfig } from '~/sqlite-core/dialect.ts';\nimport { SQLiteDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { WithBuilder } from '~/sqlite-core/subquery.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport { SQLiteSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteQueryBuilder';\n\n\tprivate dialect: SQLiteDialect | undefined;\n\tprivate dialectConfig: SQLiteDialectConfig | undefined;\n\n\tconstructor(dialect?: SQLiteDialect | SQLiteDialectConfig) {\n\t\tthis.dialect = is(dialect, SQLiteDialect) ? dialect : undefined;\n\t\tthis.dialectConfig = is(dialect, SQLiteDialect) ? undefined : dialect;\n\t}\n\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst queryBuilder = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(queryBuilder);\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t) as any;\n\t\t};\n\t\treturn { as };\n\t};\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\tselect(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n\t}\n\n\tselectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new SQLiteSyncDialect(this.dialectConfig);\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { IndexColumn } from '~/sqlite-core/indexes.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Columns, Table } from '~/table.ts';\nimport { type DrizzleTypeError, haveSameKeys, mapUpdateSet, orderSelectedFields, type Simplify } from '~/utils.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from '../columns/common.ts';\nimport { QueryBuilder } from './query-builder.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteUpdateSetSource } from './update.ts';\n\nexport interface SQLiteInsertConfig<TTable extends SQLiteTable = SQLiteTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[] | SQLiteInsertSelectQueryBuilder<TTable> | SQL;\n\twithList?: Subquery[];\n\tonConflict?: SQL[];\n\treturning?: SelectedFieldsOrdered;\n\tselect?: boolean;\n}\n\nexport type SQLiteInsertValue<TTable extends SQLiteTable> = Simplify<\n\t{\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n>;\n\nexport type SQLiteInsertSelectQueryBuilder<TTable extends SQLiteTable> = TypedQueryBuilder<\n\t{ [K in keyof TTable['$inferInsert']]: AnySQLiteColumn | SQL | SQL.Aliased | TTable['$inferInsert'][K] }\n>;\n\nexport class SQLiteInsertBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteInsertBuilder';\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tvalues(value: SQLiteInsertValue<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(values: SQLiteInsertValue<TTable>[]): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(\n\t\tvalues: SQLiteInsertValue<TTable> | SQLiteInsertValue<TTable>[],\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\t// if (mappedValues.length > 1 && mappedValues.some((t) => Object.keys(t).length === 0)) {\n\t\t// \tthrow new Error(\n\t\t// \t\t`One of the values you want to insert is empty. In SQLite you can insert only one empty object per statement. For this case Drizzle with use \"INSERT INTO ... DEFAULT VALUES\" syntax`,\n\t\t// \t);\n\t\t// }\n\n\t\treturn new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n\t}\n\n\tselect(\n\t\tselectQuery: (qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable>,\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: (qb: QueryBuilder) => SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQL): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(selectQuery: SQLiteInsertSelectQueryBuilder<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tselect(\n\t\tselectQuery:\n\t\t\t| SQL\n\t\t\t| SQLiteInsertSelectQueryBuilder<TTable>\n\t\t\t| ((qb: QueryBuilder) => SQLiteInsertSelectQueryBuilder<TTable> | SQL),\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tconst select = typeof selectQuery === 'function' ? selectQuery(new QueryBuilder()) : selectQuery;\n\n\t\tif (\n\t\t\t!is(select, SQL)\n\t\t\t&& !haveSameKeys(this.table[Columns], select._.selectedFields)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Insert select error: selected fields are not the same or are in a different order compared to the table definition',\n\t\t\t);\n\t\t}\n\n\t\treturn new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);\n\t}\n}\n\nexport type SQLiteInsertWithout<T extends AnySQLiteInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tSQLiteInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['resultType'],\n\t\t\t\tT['_']['runResult'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type SQLiteInsertReturning<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertReturningAll<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertOnConflictDoUpdateConfig<T extends AnySQLiteInsert> = {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated - use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: SQLiteUpdateSetSource<T['_']['table']>;\n};\n\nexport type SQLiteInsertDynamic<T extends AnySQLiteInsert> = SQLiteInsert<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteInsertExecute<T extends AnySQLiteInsert> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteInsertPrepare<T extends AnySQLiteInsert> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteInsertExecute<T>;\n\t}\n>;\n\nexport type AnySQLiteInsert = SQLiteInsertBase<any, any, any, any, any, any>;\n\nexport type SQLiteInsert<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = any,\n> = SQLiteInsertBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tSQLWrapper,\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>\n{\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteInsert';\n\n\t/** @internal */\n\tconfig: SQLiteInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: SQLiteInsertConfig['values'],\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t\tselect?: boolean,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values: values as any, withList, select };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): SQLiteInsertReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteInsertReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteInsertWithout<AnySQLiteInsert, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(config: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {}): this {\n\t\tif (!this.config.onConflict) this.config.onConflict = [];\n\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict.push(sql` on conflict do nothing`);\n\t\t} else {\n\t\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : sql``;\n\t\t\tthis.config.onConflict.push(sql` on conflict ${targetSql} do nothing${whereSql}`);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(config: SQLiteInsertOnConflictDoUpdateConfig<this>): this {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\n\t\tif (!this.config.onConflict) this.config.onConflict = [];\n\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tthis.config.onConflict.push(\n\t\t\tsql` on conflict ${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`,\n\t\t);\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteInsertPrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteInsertPrepare<this>;\n\t}\n\n\tprepare(): SQLiteInsertPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteInsertExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteInsertExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "//# sourceMappingURL=select.types.js.map", "import type { GetColumnData } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { JoinType, SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { Placeholder, Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\ttype DrizzleTypeError,\n\tgetTableLikeName,\n\tmapUpdateSet,\n\torderSelectedFields,\n\ttype UpdateSet,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type { SelectedFields, SelectedFieldsOrdered, SQLiteSelectJoinConfig } from './select.types.ts';\n\nexport interface SQLiteUpdateConfig {\n\twhere?: SQL | undefined;\n\tlimit?: number | Placeholder;\n\torderBy?: (SQLiteColumn | SQL | SQL.Aliased)[];\n\tset: UpdateSet;\n\ttable: SQLiteTable;\n\tfrom?: SQLiteTable | Subquery | SQLiteViewBase | SQL;\n\tjoins: SQLiteSelectJoinConfig[];\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteUpdateSetSource<TTable extends SQLiteTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key], 'query'>\n\t\t\t| SQL\n\t\t\t| SQLiteColumn\n\t\t\t| undefined;\n\t}\n\t& {};\n\nexport class SQLiteUpdateBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tset(\n\t\tvalues: SQLiteUpdateSetSource<TTable>,\n\t): SQLiteUpdateWithout<\n\t\tSQLiteUpdateBase<TTable, TResultType, TRunResult>,\n\t\tfalse,\n\t\t'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'\n\t> {\n\t\treturn new SQLiteUpdateBase(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t) as any;\n\t}\n}\n\nexport type SQLiteUpdateWithout<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type SQLiteUpdateWithJoins<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tTFrom,\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n\t>,\n\tExclude<T['_']['excludedMethods'] | 'from', 'leftJoin' | 'rightJoin' | 'innerJoin' | 'fullJoin'>\n>;\n\nexport type SQLiteUpdateReturningAll<T extends AnySQLiteUpdate, TDynamic extends boolean> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateReturning<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['from'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateExecute<T extends AnySQLiteUpdate> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteUpdatePrepare<T extends AnySQLiteUpdate> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteUpdateExecute<T>;\n\t}\n>;\n\nexport type SQLiteUpdateJoinFn<\n\tT extends AnySQLiteUpdate,\n> = <\n\tTJoinedTable extends SQLiteTable | Subquery | SQLiteViewBase | SQL,\n>(\n\ttable: TJoinedTable,\n\ton:\n\t\t| (\n\t\t\t(\n\t\t\t\tupdateTable: T['_']['table']['_']['columns'],\n\t\t\t\tfrom: T['_']['from'] extends SQLiteTable ? T['_']['from']['_']['columns']\n\t\t\t\t\t: T['_']['from'] extends Subquery | SQLiteViewBase ? T['_']['from']['_']['selectedFields']\n\t\t\t\t\t: never,\n\t\t\t) => SQL | undefined\n\t\t)\n\t\t| SQL\n\t\t| undefined,\n) => T;\n\nexport type SQLiteUpdateDynamic<T extends AnySQLiteUpdate> = SQLiteUpdate<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteUpdate<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = any,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = SQLiteUpdateBase<TTable, TResultType, TRunResult, TFrom, TReturning, true, never>;\n\nexport type AnySQLiteUpdate = SQLiteUpdateBase<any, any, any, any, any, any, any>;\n\nexport interface SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends SQLWrapper, QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]> {\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly from: TFrom;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL | undefined = undefined,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteUpdate';\n\n\t/** @internal */\n\tconfig: SQLiteUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList, joins: [] };\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): SQLiteUpdateWithJoins<this, TDynamic, TFrom> {\n\t\tthis.config.from = source;\n\t\treturn this as any;\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteUpdateJoinFn<this> {\n\t\treturn ((\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((updateTable: TTable, from: TFrom) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\tconst from = this.config.from\n\t\t\t\t\t? is(table, SQLiteTable)\n\t\t\t\t\t\t? table[Table.Symbol.Columns]\n\t\t\t\t\t\t: is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: undefined\n\t\t\t\t\t: undefined;\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t\tfrom && new Proxy(\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as any,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\treturn this as any;\n\t\t}) as any;\n\t}\n\n\tleftJoin = this.createJoin('left');\n\n\trightJoin = this.createJoin('right');\n\n\tinnerJoin = this.createJoin('inner');\n\n\tfullJoin = this.createJoin('full');\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\torderBy(\n\t\tbuilder: (updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL | SQL.Aliased)[]): SQLiteUpdateWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(updateTable: TTable) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteUpdateWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.table[Table.Symbol.Columns],\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as any,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t\tthis.config.orderBy = orderByArray;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\tlimit(limit: number | Placeholder): SQLiteUpdateWithout<this, TDynamic, 'limit'> {\n\t\tthis.config.limit = limit;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): SQLiteUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFields = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteUpdateWithout<AnySQLiteUpdate, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteUpdatePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteUpdatePrepare<this>;\n\t}\n\n\tprepare(): SQLiteUpdatePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteUpdateExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteUpdateExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "export * from './delete.ts';\nexport * from './insert.ts';\nexport * from './query-builder.ts';\nexport * from './select.ts';\nexport * from './select.types.ts';\nexport * from './update.ts';\n", "import { entityKind } from '~/entity.ts';\nimport { SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\nimport type { SQLiteView } from '../view.ts';\n\nexport class SQLiteCountBuilder<\n\tTSession extends SQLiteSession<any, any, any, any>,\n> extends SQL<number> implements Promise<number>, SQLWrapper {\n\tprivate sql: SQL<number>;\n\n\tstatic override readonly [entityKind] = 'SQLiteCountBuilderAsync';\n\t[Symbol.toStringTag] = 'SQLiteCountBuilderAsync';\n\n\tprivate session: TSession;\n\n\tprivate static buildEmbeddedCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`(select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters})`;\n\t}\n\n\tprivate static buildCount(\n\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t): SQL<number> {\n\t\treturn sql<number>`select count(*) from ${source}${sql.raw(' where ').if(filters)}${filters}`;\n\t}\n\n\tconstructor(\n\t\treadonly params: {\n\t\t\tsource: SQLiteTable | SQLiteView | SQL | SQLWrapper;\n\t\t\tfilters?: SQL<unknown>;\n\t\t\tsession: TSession;\n\t\t},\n\t) {\n\t\tsuper(SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);\n\n\t\tthis.session = params.session;\n\n\t\tthis.sql = SQLiteCountBuilder.buildCount(\n\t\t\tparams.source,\n\t\t\tparams.filters,\n\t\t);\n\t}\n\n\tthen<TResult1 = number, TResult2 = never>(\n\t\tonfulfilled?: ((value: number) => TResult1 | PromiseLike<TResult1>) | null | undefined,\n\t\tonrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn Promise.resolve(this.session.count(this.sql)).then(\n\t\t\tonfulfilled,\n\t\t\tonrejected,\n\t\t);\n\t}\n\n\tcatch(\n\t\tonRejected?: ((reason: any) => never | PromiseLike<never>) | null | undefined,\n\t): Promise<number> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<number> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { SQLiteDialect } from '../dialect.ts';\nimport type { PreparedQueryConfig, SQLitePreparedQuery, SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\n\nexport type SQLiteRelationalQueryKind<TMode extends 'sync' | 'async', TResult> = TMode extends 'async'\n\t? SQLiteRelationalQuery<TMode, TResult>\n\t: SQLiteSyncRelationalQuery<TResult>;\n\nexport class RelationalQueryBuilder<\n\tTMode extends 'sync' | 'async',\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tTFields extends TableRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprotected mode: TMode,\n\t\tprotected fullSchema: Record<string, unknown>,\n\t\tprotected schema: TSchema,\n\t\tprotected tableNamesMap: Record<string, string>,\n\t\tprotected table: SQLiteTable,\n\t\tprotected tableConfig: TableRelationalConfig,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprotected session: SQLiteSession<'async', unknown, TFullSchema, TSchema>,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]>;\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined>;\n\t}\n}\n\nexport class SQLiteRelationalQuery<TType extends 'sync' | 'async', TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteAsyncRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly type: TType;\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tmode: 'many' | 'first';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\t/** @internal */\n\t\tpublic table: SQLiteTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: SQLiteDialect,\n\t\tprivate session: SQLiteSession<'sync' | 'async', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tmode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t\tthis.mode = mode;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t}).sql as SQL;\n\t}\n\n\t/** @internal */\n\t_prepare(\n\t\tisOneTimeQuery = false,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tthis.mode === 'first' ? 'get' : 'all',\n\t\t\ttrue,\n\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t);\n\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t}\n\t\t\t\treturn rows as TResult;\n\t\t\t},\n\t\t) as SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }>;\n\t}\n\n\tprepare(): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\treturn this._prepare(false);\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\t/** @internal */\n\texecuteRaw(): TResult {\n\t\tif (this.mode === 'first') {\n\t\t\treturn this._prepare(false).get() as TResult;\n\t\t}\n\t\treturn this._prepare(false).all() as TResult;\n\t}\n\n\toverride async execute(): Promise<TResult> {\n\t\treturn this.executeRaw();\n\t}\n}\n\nexport class SQLiteSyncRelationalQuery<TResult> extends SQLiteRelationalQuery<'sync', TResult> {\n\tstatic override readonly [entityKind]: string = 'SQLiteSyncRelationalQuery';\n\n\tsync(): TResult {\n\t\treturn this.executeRaw();\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '../dialect.ts';\n\ntype SQLiteRawAction = 'all' | 'get' | 'values' | 'run';\nexport interface SQLiteRawConfig {\n\taction: SQLiteRawAction;\n}\n\nexport interface SQLiteRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'sqlite'>, SQLWrapper {}\n\nexport class SQLiteRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper, PreparedQuery\n{\n\tstatic override readonly [entityKind]: string = 'SQLiteRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteRawConfig;\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\t/** @internal */\n\t\tpublic getSQL: () => SQL,\n\t\taction: SQLiteRawAction,\n\t\tprivate dialect: SQLiteAsyncDialect,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t\tthis.config = { action };\n\t}\n\n\tgetQuery() {\n\t\treturn { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn false;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { type ColumnsSelection, type SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport {\n\tQueryBuilder,\n\tSQLiteDeleteBase,\n\tSQLiteInsertBuilder,\n\tSQLiteSelectBuilder,\n\tSQLiteUpdateBuilder,\n} from '~/sqlite-core/query-builders/index.ts';\nimport type {\n\tDBResult,\n\tResult,\n\tSQLiteSession,\n\tSQLiteTransaction,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport { SQLiteCountBuilder } from './query-builders/count.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithBuilder } from './subquery.ts';\nimport type { SQLiteViewBase } from './view-base.ts';\n\nexport class BaseSQLiteDatabase<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'BaseSQLiteDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\tprivate resultKind: TResultKind,\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t\t/** @internal */\n\t\treadonly session: SQLiteSession<TResultKind, TRunResult, TFullSchema, TSchema>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tconst query = this.query as {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\tquery[tableName as keyof TSchema] = new RelationalQueryBuilder(\n\t\t\t\t\tresultKind,\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as SQLiteTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession as SQLiteSession<any, any, any, any> as any,\n\t\t\t\t) as typeof query[keyof TSchema];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with: WithBuilder = (alias: string, selection?: ColumnsSelection) => {\n\t\tconst self = this;\n\t\tconst as = (\n\t\t\tqb:\n\t\t\t\t| TypedQueryBuilder<ColumnsSelection | undefined>\n\t\t\t\t| SQL\n\t\t\t\t| ((qb: QueryBuilder) => TypedQueryBuilder<ColumnsSelection | undefined> | SQL),\n\t\t) => {\n\t\t\tif (typeof qb === 'function') {\n\t\t\t\tqb = qb(new QueryBuilder(self.dialect));\n\t\t\t}\n\n\t\t\treturn new Proxy(\n\t\t\t\tnew WithSubquery(\n\t\t\t\t\tqb.getSQL(),\n\t\t\t\t\tselection ?? ('getSelectedFields' in qb ? qb.getSelectedFields() ?? {} : {}) as SelectedFields,\n\t\t\t\t\talias,\n\t\t\t\t\ttrue,\n\t\t\t\t),\n\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t);\n\t\t};\n\t\treturn { as };\n\t};\n\n\t$count(\n\t\tsource: SQLiteTable | SQLiteViewBase | SQL | SQLWrapper,\n\t\tfilters?: SQL<unknown>,\n\t) {\n\t\treturn new SQLiteCountBuilder({ source, filters, session: this.session });\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction select(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction selectDistinct(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteInsertBuilder(into, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteDeleteBase(from, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselect(fields?: SelectedFields): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselectDistinct(\n\t\tfields?: SelectedFields,\n\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteInsertBuilder(into, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteDeleteBase(from, this.session, this.dialect);\n\t}\n\n\trun(query: SQLWrapper | string): DBResult<TResultKind, TRunResult> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.run(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'run',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawRunValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, TRunResult>;\n\t\t}\n\t\treturn this.session.run(sequel) as DBResult<TResultKind, TRunResult>;\n\t}\n\n\tall<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.all(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'all',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawAllValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.all(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\tget<T = unknown>(query: SQLWrapper | string): DBResult<TResultKind, T> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.get(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'get',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawGetValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, T>;\n\t\t}\n\t\treturn this.session.get(sequel) as DBResult<TResultKind, T>;\n\t}\n\n\tvalues<T extends unknown[] = unknown[]>(query: SQLWrapper | string): DBResult<TResultKind, T[]> {\n\t\tconst sequel = typeof query === 'string' ? sql.raw(query) : query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.values(sequel),\n\t\t\t\t() => sequel,\n\t\t\t\t'values',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawValuesValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.values(sequel) as DBResult<TResultKind, T[]>;\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type SQLiteWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends BaseSQLiteDatabase<\n\t\tTResultKind,\n\t\tTRunResult,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): SQLiteWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst $count: Q['$count'] = (...args: [any]) => getReplica(replicas).$count(...args);\n\tconst $with: Q['with'] = (...args: []) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst run: Q['run'] = (...args: [any]) => primary.run(...args);\n\tconst all: Q['all'] = (...args: [any]) => primary.all(...args);\n\tconst get: Q['get'] = (...args: [any]) => primary.get(...args);\n\tconst values: Q['values'] = (...args: [any]) => primary.values(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\trun,\n\t\tall,\n\t\tget,\n\t\tvalues,\n\t\ttransaction,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\t$count,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from './columns/index.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport interface IndexConfig {\n\tname: string;\n\tcolumns: IndexColumn[];\n\tunique: boolean;\n\twhere: SQL | undefined;\n}\n\nexport type IndexColumn = SQLiteColumn | SQL;\n\nexport class IndexBuilderOn {\n\tstatic readonly [entityKind]: string = 'SQLiteIndexBuilderOn';\n\n\tconstructor(private name: string, private unique: boolean) {}\n\n\ton(...columns: [IndexColumn, ...IndexColumn[]]): IndexBuilder {\n\t\treturn new IndexBuilder(this.name, columns, this.unique);\n\t}\n}\n\nexport class IndexBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteIndexBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteIndexBuilder';\n\t};\n\n\t/** @internal */\n\tconfig: IndexConfig;\n\n\tconstructor(name: string, columns: IndexColumn[], unique: boolean) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tunique,\n\t\t\twhere: undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Condition for partial index.\n\t */\n\twhere(condition: SQL): this {\n\t\tthis.config.where = condition;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): Index {\n\t\treturn new Index(this.config, table);\n\t}\n}\n\nexport class Index {\n\tstatic readonly [entityKind]: string = 'SQLiteIndex';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteIndex';\n\t};\n\n\treadonly config: IndexConfig & { table: SQLiteTable };\n\n\tconstructor(config: IndexConfig, table: SQLiteTable) {\n\t\tthis.config = { ...config, table };\n\t}\n}\n\nexport function index(name: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(name, false);\n}\n\nexport function uniqueIndex(name: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(name, true);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnySQLiteColumn<{ tableName: TTableName }>,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLitePrimaryKeyBuilder';\n\t};\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKey';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name\n\t\t\t?? `${this.table[SQLiteTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { DrizzleError, TransactionRollbackError } from '~/errors.ts';\nimport type { TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { Query, SQL } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\n// import { QueryPromise } from '../index.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport { BaseSQLiteDatabase } from './db.ts';\nimport type { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport interface PreparedQueryConfig {\n\ttype: 'sync' | 'async';\n\trun: unknown;\n\tall: unknown;\n\tget: unknown;\n\tvalues: unknown;\n\texecute: unknown;\n}\n\nexport class ExecuteResultSync<T> extends QueryPromise<T> {\n\tstatic override readonly [entityKind]: string = 'ExecuteResultSync';\n\n\tconstructor(private resultCb: () => T) {\n\t\tsuper();\n\t}\n\n\toverride async execute(): Promise<T> {\n\t\treturn this.resultCb();\n\t}\n\n\tsync(): T {\n\t\treturn this.resultCb();\n\t}\n}\n\nexport type ExecuteResult<TType extends 'sync' | 'async', TResult> = TType extends 'async' ? Promise<TResult>\n\t: ExecuteResultSync<TResult>;\n\nexport abstract class SQLitePreparedQuery<T extends PreparedQueryConfig> implements PreparedQuery {\n\tstatic readonly [entityKind]: string = 'PreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\tconstructor(\n\t\tprivate mode: 'sync' | 'async',\n\t\tprivate executeMethod: SQLiteExecuteMethod,\n\t\tprotected query: Query,\n\t) {}\n\n\tgetQuery(): Query {\n\t\treturn this.query;\n\t}\n\n\tabstract run(placeholderValues?: Record<string, unknown>): Result<T['type'], T['run']>;\n\n\tmapRunResult(result: unknown, _isFromBatch?: boolean): unknown {\n\t\treturn result;\n\t}\n\n\tabstract all(placeholderValues?: Record<string, unknown>): Result<T['type'], T['all']>;\n\n\tmapAllResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract get(placeholderValues?: Record<string, unknown>): Result<T['type'], T['get']>;\n\n\tmapGetResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract values(placeholderValues?: Record<string, unknown>): Result<T['type'], T['values']>;\n\n\texecute(placeholderValues?: Record<string, unknown>): ExecuteResult<T['type'], T['execute']> {\n\t\tif (this.mode === 'async') {\n\t\t\treturn this[this.executeMethod](placeholderValues) as ExecuteResult<T['type'], T['execute']>;\n\t\t}\n\t\treturn new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));\n\t}\n\n\tmapResult(response: unknown, isFromBatch?: boolean) {\n\t\tswitch (this.executeMethod) {\n\t\t\tcase 'run': {\n\t\t\t\treturn this.mapRunResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'all': {\n\t\t\t\treturn this.mapAllResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'get': {\n\t\t\t\treturn this.mapGetResult(response, isFromBatch);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @internal */\n\tabstract isResponseInArrayMode(): boolean;\n}\n\nexport interface SQLiteTransactionConfig {\n\tbehavior?: 'deferred' | 'immediate' | 'exclusive';\n}\n\nexport type SQLiteExecuteMethod = 'run' | 'all' | 'get';\n\nexport abstract class SQLiteSession<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSession';\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t) {}\n\n\tabstract prepareQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => unknown,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }>;\n\n\tprepareOneTimeQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }> {\n\t\treturn this.prepareQuery(query, fields, executeMethod, isResponseInArrayMode);\n\t}\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T>;\n\n\trun(query: SQL): Result<TResultKind, TRunResult> {\n\t\tconst staticQuery = this.dialect.sqlToQuery(query);\n\t\ttry {\n\t\t\treturn this.prepareOneTimeQuery(staticQuery, undefined, 'run', false).run() as Result<TResultKind, TRunResult>;\n\t\t} catch (err) {\n\t\t\tthrow new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });\n\t\t}\n\t}\n\n\t/** @internal */\n\textractRawRunValueFromBatchResult(result: unknown) {\n\t\treturn result;\n\t}\n\n\tall<T = unknown>(query: SQL): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).all() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawAllValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tget<T = unknown>(query: SQL): Result<TResultKind, T> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).get() as Result<\n\t\t\tTResultKind,\n\t\t\tT\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawGetValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tvalues<T extends any[] = unknown[]>(\n\t\tquery: SQL,\n\t): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).values() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\tasync count(sql: SQL) {\n\t\tconst result = await this.values(sql) as [[number]];\n\n\t\treturn result[0][0];\n\t}\n\n\t/** @internal */\n\textractRawValuesValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n}\n\nexport type Result<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: Promise<TResult> }[TKind];\n\nexport type DBResult<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: SQLiteRaw<TResult> }[TKind];\n\nexport abstract class SQLiteTransaction<\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends BaseSQLiteDatabase<TResultType, TRunResult, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'SQLiteTransaction';\n\n\tconstructor(\n\t\tresultType: TResultType,\n\t\tdialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultType],\n\t\tsession: SQLiteSession<TResultType, TRunResult, TFullSchema, TSchema>,\n\t\tprotected schema: {\n\t\t\tfullSchema: Record<string, unknown>;\n\t\t\tschema: TSchema;\n\t\t\ttableNamesMap: Record<string, string>;\n\t\t} | undefined,\n\t\tprotected readonly nestedIndex = 0,\n\t) {\n\t\tsuper(resultType, dialect, session, schema);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n}\n", "//# sourceMappingURL=subquery.js.map", "import { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { Check } from './checks.ts';\nimport { CheckBuilder } from './checks.ts';\nimport type { ForeignKey } from './foreign-keys.ts';\nimport { ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { Index } from './indexes.ts';\nimport { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKey } from './primary-keys.ts';\nimport { PrimaryKeyBuilder } from './primary-keys.ts';\nimport { SQLiteTable } from './table.ts';\nimport { type UniqueConstraint, UniqueConstraintBuilder } from './unique-constraint.ts';\nimport type { SQLiteView } from './view.ts';\n\nexport function getTableConfig<TTable extends SQLiteTable>(table: TTable) {\n\tconst columns = Object.values(table[SQLiteTable.Symbol.Columns]);\n\tconst indexes: Index[] = [];\n\tconst checks: Check[] = [];\n\tconst primaryKeys: PrimaryKey[] = [];\n\tconst uniqueConstraints: UniqueConstraint[] = [];\n\tconst foreignKeys: ForeignKey[] = Object.values(table[SQLiteTable.Symbol.InlineForeignKeys]);\n\tconst name = table[Table.Symbol.Name];\n\n\tconst extraConfigBuilder = table[SQLiteTable.Symbol.ExtraConfigBuilder];\n\n\tif (extraConfigBuilder !== undefined) {\n\t\tconst extraConfig = extraConfigBuilder(table[SQLiteTable.Symbol.Columns]);\n\t\tconst extraValues = Array.isArray(extraConfig) ? extraConfig.flat(1) as any[] : Object.values(extraConfig);\n\t\tfor (const builder of Object.values(extraValues)) {\n\t\t\tif (is(builder, IndexBuilder)) {\n\t\t\t\tindexes.push(builder.build(table));\n\t\t\t} else if (is(builder, CheckBuilder)) {\n\t\t\t\tchecks.push(builder.build(table));\n\t\t\t} else if (is(builder, UniqueConstraintBuilder)) {\n\t\t\t\tuniqueConstraints.push(builder.build(table));\n\t\t\t} else if (is(builder, PrimaryKeyBuilder)) {\n\t\t\t\tprimaryKeys.push(builder.build(table));\n\t\t\t} else if (is(builder, ForeignKeyBuilder)) {\n\t\t\t\tforeignKeys.push(builder.build(table));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tcolumns,\n\t\tindexes,\n\t\tforeignKeys,\n\t\tchecks,\n\t\tprimaryKeys,\n\t\tuniqueConstraints,\n\t\tname,\n\t};\n}\n\nexport type OnConflict = 'rollback' | 'abort' | 'fail' | 'ignore' | 'replace';\n\nexport function getViewConfig<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n>(view: SQLiteView<TName, TExisting>) {\n\treturn {\n\t\t...view[ViewBaseConfig],\n\t\t// ...view[SQLiteViewConfig],\n\t};\n}\n", "import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { AddAliasToSelection } from '~/query-builders/select.types.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport { getTableColumns } from '~/utils.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport { QueryBuilder } from './query-builders/query-builder.ts';\nimport { sqliteTable } from './table.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport interface ViewBuilderConfig {\n\talgorithm?: 'undefined' | 'merge' | 'temptable';\n\tdefiner?: string;\n\tsqlSecurity?: 'definer' | 'invoker';\n\twithCheckOption?: 'cascaded' | 'local';\n}\n\nexport class ViewBuilderCore<\n\tTConfig extends { name: string; columns?: unknown },\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteViewBuilderCore';\n\n\tdeclare readonly _: {\n\t\treadonly name: TConfig['name'];\n\t\treadonly columns: TConfig['columns'];\n\t};\n\n\tconstructor(\n\t\tprotected name: TConfig['name'],\n\t) {}\n\n\tprotected config: ViewBuilderConfig = {};\n}\n\nexport class ViewBuilder<TName extends string = string> extends ViewBuilderCore<{ name: TName }> {\n\tstatic override readonly [entityKind]: string = 'SQLiteViewBuilder';\n\n\tas<TSelection extends ColumnsSelection>(\n\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t): SQLiteViewWithSelection<TName, false, AddAliasToSelection<TSelection, TName, 'sqlite'>> {\n\t\tif (typeof qb === 'function') {\n\t\t\tqb = qb(new QueryBuilder());\n\t\t}\n\t\tconst selectionProxy = new SelectionProxyHandler<TSelection>({\n\t\t\talias: this.name,\n\t\t\tsqlBehavior: 'error',\n\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\treplaceOriginalName: true,\n\t\t});\n\t\t// const aliasedSelectedFields = new Proxy(qb.getSelectedFields(), selectionProxy);\n\t\tconst aliasedSelectedFields = qb.getSelectedFields();\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\t// sqliteConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: aliasedSelectedFields,\n\t\t\t\t\tquery: qb.getSQL().inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tselectionProxy as any,\n\t\t) as SQLiteViewWithSelection<TName, false, AddAliasToSelection<TSelection, TName, 'sqlite'>>;\n\t}\n}\n\nexport class ManualViewBuilder<\n\tTName extends string = string,\n\tTColumns extends Record<string, SQLiteColumnBuilderBase> = Record<string, SQLiteColumnBuilderBase>,\n> extends ViewBuilderCore<\n\t{ name: TName; columns: TColumns }\n> {\n\tstatic override readonly [entityKind]: string = 'SQLiteManualViewBuilder';\n\n\tprivate columns: Record<string, SQLiteColumn>;\n\n\tconstructor(\n\t\tname: TName,\n\t\tcolumns: TColumns,\n\t) {\n\t\tsuper(name);\n\t\tthis.columns = getTableColumns(sqliteTable(name, columns)) as BuildColumns<TName, TColumns, 'sqlite'>;\n\t}\n\n\texisting(): SQLiteViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'sqlite'>> {\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as SQLiteViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'sqlite'>>;\n\t}\n\n\tas(query: SQL): SQLiteViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'sqlite'>> {\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: query.inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as SQLiteViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'sqlite'>>;\n\t}\n}\n\nexport class SQLiteView<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends SQLiteViewBase<TName, TExisting, TSelection> {\n\tstatic override readonly [entityKind]: string = 'SQLiteView';\n\n\tconstructor({ config }: {\n\t\tconfig: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: ColumnsSelection;\n\t\t\tquery: SQL | undefined;\n\t\t};\n\t}) {\n\t\tsuper(config);\n\t}\n}\n\nexport type SQLiteViewWithSelection<\n\tTName extends string,\n\tTExisting extends boolean,\n\tTSelection extends ColumnsSelection,\n> = SQLiteView<TName, TExisting, TSelection> & TSelection;\n\nexport function sqliteView<TName extends string>(name: TName): ViewBuilder<TName>;\nexport function sqliteView<TName extends string, TColumns extends Record<string, SQLiteColumnBuilderBase>>(\n\tname: TName,\n\tcolumns: TColumns,\n): ManualViewBuilder<TName, TColumns>;\nexport function sqliteView(\n\tname: string,\n\tselection?: Record<string, SQLiteColumnBuilderBase>,\n): ViewBuilder | ManualViewBuilder {\n\tif (selection) {\n\t\treturn new ManualViewBuilder(name, selection);\n\t}\n\treturn new ViewBuilder(name);\n}\n\nexport const view = sqliteView;\n", "export * from './alias.ts';\nexport * from './checks.ts';\nexport * from './columns/index.ts';\nexport * from './db.ts';\nexport * from './dialect.ts';\nexport * from './foreign-keys.ts';\nexport * from './indexes.ts';\nexport * from './primary-keys.ts';\nexport * from './query-builders/index.ts';\nexport * from './session.ts';\nexport * from './subquery.ts';\nexport * from './table.ts';\nexport * from './unique-constraint.ts';\nexport * from './utils.ts';\nexport * from './view.ts';\n", "export * from './sql/expressions/index.ts';\n", "import { entityKind } from '~/entity.ts';\n\nexport interface Logger {\n\tlogQuery(query: string, params: unknown[]): void;\n}\n\nexport interface LogWriter {\n\twrite(message: string): void;\n}\n\nexport class ConsoleLogWriter implements LogWriter {\n\tstatic readonly [entityKind]: string = 'ConsoleLogWriter';\n\n\twrite(message: string) {\n\t\tconsole.log(message);\n\t}\n}\n\nexport class DefaultLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'DefaultLogger';\n\n\treadonly writer: LogWriter;\n\n\tconstructor(config?: { writer: LogWriter }) {\n\t\tthis.writer = config?.writer ?? new ConsoleLogWriter();\n\t}\n\n\tlogQuery(query: string, params: unknown[]): void {\n\t\tconst stringifiedParams = params.map((p) => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(p);\n\t\t\t} catch {\n\t\t\t\treturn String(p);\n\t\t\t}\n\t\t});\n\t\tconst paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';\n\t\tthis.writer.write(`Query: ${query}${paramsStr}`);\n\t}\n}\n\nexport class NoopLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'NoopLogger';\n\n\tlogQuery(): void {\n\t\t// noop\n\t}\n}\n", "//# sourceMappingURL=operations.js.map", "export * from './alias.ts';\nexport * from './column-builder.ts';\nexport * from './column.ts';\nexport * from './entity.ts';\nexport * from './errors.ts';\nexport * from './expressions.ts';\nexport * from './logger.ts';\nexport * from './operations.ts';\nexport * from './query-promise.ts';\nexport * from './relations.ts';\nexport * from './sql/index.ts';\nexport * from './subquery.ts';\nexport * from './table.ts';\nexport * from './utils.ts';\nexport * from './view-common.ts';\n", "var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n", null, null, null, null, "import { sqliteTable, text, integer, blob, real } from 'drizzle-orm/sqlite-core';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations, sql } from \"drizzle-orm\";\n\nexport const users = sqliteTable(\"users\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull(),\n  isAdmin: integer(\"is_admin\", { mode: 'boolean' }).default(false),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  isPremium: integer(\"is_premium\", { mode: 'boolean' }).default(false),\n  extensionActivated: integer(\"extension_activated\", { mode: 'boolean' }).default(false),\n  premiumActivatedAt: text(\"premium_activated_at\"),\n  totalSpent: text(\"total_spent\").default(\"0\"),\n  totalOrders: integer(\"total_orders\").default(0),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const orders = sqliteTable(\"orders\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  userId: integer(\"user_id\").references(() => users.id), // Link to authenticated users\n  customerEmail: text(\"customer_email\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  originalAmount: text(\"original_amount\").notNull(),\n  finalAmount: text(\"final_amount\").notNull(),\n  discountAmount: text(\"discount_amount\").default(\"0\"),\n  couponCode: text(\"coupon_code\"),\n  referralCode: text(\"referral_code\"), // Added for affiliate tracking\n  currency: text(\"currency\").default(\"usd\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed, refunded\n  paymentMethod: text(\"payment_method\").notNull(), // stripe, paypal\n  paymentIntentId: text(\"payment_intent_id\"),\n  paypalOrderId: text(\"paypal_order_id\"),\n  downloadToken: text(\"download_token\").notNull(),\n  downloadCount: integer(\"download_count\").default(0),\n  maxDownloads: integer(\"max_downloads\").default(3),\n  activationCode: text(\"activation_code\"), // Generated activation code for the extension\n  invoiceUrl: text(\"invoice_url\"), // Path to generated invoice PDF\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  completedAt: integer(\"completed_at\"),\n});\n\nexport const products = sqliteTable(\"products\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: text(\"price\").notNull(),\n  beforePrice: text(\"before_price\"),\n  currency: text(\"currency\").default(\"eur\"),\n  fileName: text(\"file_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const coupons = sqliteTable(\"coupons\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  code: text(\"code\").notNull().unique(),\n  discountType: text(\"discount_type\").notNull(), // \"percentage\" or \"fixed\"\n  discountValue: text(\"discount_value\").notNull(),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true),\n  usageLimit: integer(\"usage_limit\"), // null for unlimited\n  usageCount: integer(\"usage_count\").default(0),\n  expiresAt: integer(\"expires_at\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const settings = sqliteTable(\"settings\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n\n\n// Dashboard features control\nexport const dashboardFeatures = sqliteTable(\"dashboard_features\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  featureName: text(\"feature_name\").notNull().unique(),\n  isEnabled: integer(\"is_enabled\", { mode: 'boolean' }).default(true),\n  description: text(\"description\"),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Mission tracking for extension usage\nexport const missions = sqliteTable(\"missions\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  missionId: text(\"mission_id\").notNull().unique(), // OCUS mission ID\n  userId: text(\"user_id\").notNull(), // Extension user ID\n  customerId: integer(\"customer_id\"), // References users table if logged in\n  missionName: text(\"mission_name\").notNull(),\n  compensationAmount: text(\"compensation_amount\"),\n  status: text(\"status\").notNull().default(\"assignment_accepted\"), // assignment_accepted, appointment_confirmation, media_upload, billing_payment, assignment_complete\n  assignmentAcceptedAt: integer(\"assignment_accepted_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  appointmentConfirmedAt: integer(\"appointment_confirmed_at\"),\n  mediaUploadedAt: integer(\"media_uploaded_at\"),\n  billingCompletedAt: integer(\"billing_completed_at\"),\n  assignmentCompletedAt: integer(\"assignment_completed_at\"),\n  trialUsed: integer(\"trial_used\", { mode: 'boolean' }).default(false), // Whether this mission used a trial attempt\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// User trial usage tracking\nexport const userTrials = sqliteTable(\"user_trials\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  userId: text(\"user_id\").notNull().unique(), // Extension user ID\n  customerId: integer(\"customer_id\"), // References users table if logged in\n  trialsUsed: integer(\"trials_used\").default(0),\n  maxTrials: integer(\"max_trials\").default(3),\n  isActivated: integer(\"is_activated\", { mode: 'boolean' }).default(false),\n  activationKey: text(\"activation_key\"),\n  activatedAt: integer(\"activated_at\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Cross-browser trial tracking\nexport const trialUsage = sqliteTable(\"trial_usage\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  trialKey: text(\"trial_key\").notNull().unique(), // Combination of extensionId + userFingerprint\n  extensionId: text(\"extension_id\").notNull(),\n  userFingerprint: text(\"user_fingerprint\").notNull(),\n  usageCount: integer(\"usage_count\").default(0),\n  lastUsed: integer(\"last_used\").default(sql`(CURRENT_TIMESTAMP)`),\n  isExpired: integer(\"is_expired\", { mode: 'boolean' }).default(false),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const authSettings = sqliteTable(\"auth_settings\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  // Google OAuth\n  googleClientId: text(\"google_client_id\"),\n  googleClientSecret: text(\"google_client_secret\"),\n  googleRedirectUri: text(\"google_redirect_uri\"),\n  googleEnabled: integer(\"google_enabled\", { mode: 'boolean' }).default(false),\n  \n  // Facebook OAuth\n  facebookAppId: text(\"facebook_app_id\"),\n  facebookAppSecret: text(\"facebook_app_secret\"),\n  facebookEnabled: integer(\"facebook_enabled\", { mode: 'boolean' }).default(false),\n  \n  // GitHub OAuth\n  githubClientId: text(\"github_client_id\"),\n  githubClientSecret: text(\"github_client_secret\"),\n  githubEnabled: integer(\"github_enabled\", { mode: 'boolean' }).default(false),\n  \n  // reCAPTCHA settings\n  recaptchaSiteKey: text(\"recaptcha_site_key\"),\n  recaptchaSecretKey: text(\"recaptcha_secret_key\"),\n  recaptchaEnabled: integer(\"recaptcha_enabled\", { mode: 'boolean' }).default(false),\n  recaptchaMode: text(\"recaptcha_mode\").default(\"v2\"), // v2 or v3\n  recaptchaCustomerEnabled: integer(\"recaptcha_customer_enabled\", { mode: 'boolean' }).default(false),\n  recaptchaAdminEnabled: integer(\"recaptcha_admin_enabled\", { mode: 'boolean' }).default(true),\n  \n  // Payment Gateway Settings\n  stripePublicKey: text(\"stripe_public_key\"),\n  stripeSecretKey: text(\"stripe_secret_key\"),\n  stripeEnabled: integer(\"stripe_enabled\", { mode: 'boolean' }).default(false),\n  paypalClientId: text(\"paypal_client_id\"),\n  paypalClientSecret: text(\"paypal_client_secret\"),\n  paypalEnabled: integer(\"paypal_enabled\", { mode: 'boolean' }).default(false),\n  defaultPaymentMethod: text(\"default_payment_method\").default(\"stripe\"), // stripe or paypal\n  \n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const downloads = sqliteTable(\"downloads\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  orderId: integer(\"order_id\").references(() => orders.id).notNull(),\n  downloadedAt: integer(\"downloaded_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n});\n\nexport const tickets = sqliteTable(\"tickets\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // \"technical\", \"billing\", \"feature-request\", \"bug-report\", \"general\"\n  priority: text(\"priority\").notNull().default(\"medium\"), // \"low\", \"medium\", \"high\", \"urgent\"\n  status: text(\"status\").notNull().default(\"open\"), // \"open\", \"in-progress\", \"resolved\", \"closed\"\n  customerEmail: text(\"customer_email\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  assignedToUserId: integer(\"assigned_to_user_id\").references(() => users.id),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  resolvedAt: integer(\"resolved_at\"),\n});\n\nexport const ticketMessages = sqliteTable(\"ticket_messages\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  ticketId: integer(\"ticket_id\").references(() => tickets.id).notNull(),\n  message: text(\"message\").notNull(),\n  isFromCustomer: integer(\"is_from_customer\", { mode: 'boolean' }).notNull().default(true),\n  senderName: text(\"sender_name\").notNull(),\n  senderEmail: text(\"sender_email\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const activationKeys = sqliteTable(\"activation_keys\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  activationKey: text(\"activation_key\").notNull().unique(),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true),\n  orderId: integer(\"order_id\").references(() => orders.id),\n  userId: integer(\"user_id\").references(() => users.id), // Link to authenticated user\n  installationId: text(\"installation_id\", { length: 36 }), // Bind to specific installation\n  usedAt: integer(\"used_at\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const demoUsers = sqliteTable(\"demo_users\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  userId: text(\"user_id\").notNull().unique(), // UUID from extension\n  demoCount: integer(\"demo_count\").default(0),\n  maxDemoUses: integer(\"max_demo_uses\").default(3),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  lastUsedAt: integer(\"last_used_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const customers = sqliteTable(\"customers\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  email: text(\"email\", { length: 255 }).notNull().unique(),\n  password: text(\"password\", { length: 255 }), // Optional for social logins\n  name: text(\"name\", { length: 255 }).notNull(),\n  \n  // Extension activation and usage\n  activationKey: text(\"activation_key\", { length: 100 }).unique(),\n  activationKeyRevealed: integer(\"activation_key_revealed\", { mode: 'boolean' }).default(false).notNull(),\n  activationKeyGeneratedAt: integer(\"activation_key_generated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  isActivated: integer(\"is_activated\", { mode: 'boolean' }).default(false).notNull(),\n  extensionActivated: integer(\"extension_activated\", { mode: 'boolean' }).default(false).notNull(),\n  extensionLastUsed: integer(\"extension_last_used\"),\n  extensionUsageCount: integer(\"extension_usage_count\").default(0).notNull(),\n  extensionSuccessfulJobs: integer(\"extension_successful_jobs\").default(0).notNull(),\n  extensionTrialJobsUsed: integer(\"extension_trial_jobs_used\").default(0).notNull(),\n  extensionTrialLimit: integer(\"extension_trial_limit\").default(3).notNull(),\n  isBlocked: integer(\"is_blocked\", { mode: 'boolean' }).default(false).notNull(),\n  blockedReason: text(\"blocked_reason\"),\n  blockedAt: integer(\"blocked_at\"),\n  \n  // Account status\n  isAdmin: integer(\"is_admin\", { mode: 'boolean' }).default(false).notNull(),\n  subscriptionStatus: text(\"subscription_status\", { length: 20 }).default(\"inactive\").notNull(), // inactive, active, cancelled, expired\n  subscriptionExpiresAt: integer(\"subscription_expires_at\"),\n  \n  // Payment integration\n  stripeCustomerId: text(\"stripe_customer_id\", { length: 255 }),\n  stripeSubscriptionId: text(\"stripe_subscription_id\", { length: 255 }),\n  paypalCustomerId: text(\"paypal_customer_id\", { length: 255 }),\n  totalSpent: text(\"total_spent\").default(\"0\").notNull(),\n  totalOrders: integer(\"total_orders\").default(0).notNull(),\n  lastOrderDate: integer(\"last_order_date\"),\n  \n  // Social login fields\n  googleId: text(\"google_id\", { length: 255 }),\n  facebookId: text(\"facebook_id\", { length: 255 }),\n  githubId: text(\"github_id\", { length: 255 }),\n  avatar: text(\"avatar\", { length: 500 }),\n  \n  // Affiliate program\n  referralCode: text(\"referral_code\", { length: 20 }).unique(),\n  referredBy: text(\"referred_by\", { length: 255 }),\n  totalEarnings: text(\"total_earnings\").default(\"0\"),\n  commissionRate: text(\"commission_rate\").default(\"10.00\"), // 10% default\n  \n  // Profile\n  phone: text(\"phone\", { length: 50 }),\n  address: text(\"address\"),\n  dateOfBirth: text(\"date_of_birth\", { length: 10 }),\n  preferredLanguage: text(\"preferred_language\", { length: 10 }).default(\"en\").notNull(),\n  marketingOptIn: integer(\"marketing_opt_in\", { mode: 'boolean' }).default(false).notNull(),\n  \n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\nexport const affiliateTransactions = sqliteTable(\"affiliate_transactions\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  affiliateId: integer(\"affiliate_id\").notNull().references(() => customers.id),\n  orderId: integer(\"order_id\").notNull().references(() => orders.id),\n  commission: text(\"commission\").notNull(),\n  status: text(\"status\", { length: 20 }).default(\"pending\").notNull(), // pending, paid, cancelled\n  paidAt: integer(\"paid_at\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Extension usage statistics table\nexport const extensionUsageStats = sqliteTable(\"extension_usage_stats\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  customerId: integer(\"customer_id\").notNull().references(() => customers.id),\n  sessionId: text(\"session_id\", { length: 100 }).notNull(),\n  usageDate: integer(\"usage_date\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  jobsFound: integer(\"jobs_found\").default(0).notNull(),\n  jobsApplied: integer(\"jobs_applied\").default(0).notNull(),\n  successfulJobs: integer(\"successful_jobs\").default(0).notNull(),\n  sessionDuration: integer(\"session_duration_minutes\").default(0).notNull(), // in minutes\n  platform: text(\"platform\", { length: 50 }).default(\"ocus\").notNull(), // ocus, ubereats, foodora\n  location: text(\"location\", { length: 100 }),\n  userAgent: text(\"user_agent\"),\n  extensionVersion: text(\"extension_version\", { length: 20 }),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Customer payments tracking table\nexport const customerPayments = sqliteTable(\"customer_payments\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  customerId: integer(\"customer_id\").notNull().references(() => customers.id),\n  orderId: integer(\"order_id\").notNull().references(() => orders.id),\n  paymentMethod: text(\"payment_method\", { length: 20 }).notNull(), // stripe, paypal\n  paymentIntentId: text(\"payment_intent_id\", { length: 255 }),\n  paypalOrderId: text(\"paypal_order_id\", { length: 255 }),\n  amount: text(\"amount\").notNull(),\n  currency: text(\"currency\", { length: 3 }).default(\"usd\").notNull(),\n  status: text(\"status\", { length: 20 }).default(\"pending\").notNull(), // pending, completed, failed, refunded\n  failureReason: text(\"failure_reason\"),\n  refundAmount: text(\"refund_amount\").default(\"0\"),\n  refundReason: text(\"refund_reason\"),\n  processedAt: integer(\"processed_at\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Global extension usage statistics\nexport const globalUsageStats = sqliteTable(\"global_usage_stats\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  statDate: text(\"stat_date\", { length: 10 }).notNull(), // YYYY-MM-DD format\n  totalUsers: integer(\"total_users\").default(0).notNull(),\n  activeUsers: integer(\"active_users\").default(0).notNull(),\n  totalSessions: integer(\"total_sessions\").default(0).notNull(),\n  totalJobsFound: integer(\"total_jobs_found\").default(0).notNull(),\n  totalJobsApplied: integer(\"total_jobs_applied\").default(0).notNull(),\n  totalSuccessfulJobs: integer(\"total_successful_jobs\").default(0).notNull(),\n  avgSessionDuration: text(\"avg_session_duration\").default(\"0\").notNull(),\n  topPlatform: text(\"top_platform\", { length: 50 }),\n  topLocation: text(\"top_location\", { length: 100 }),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Premium device registration for single-device restriction\nexport const premiumDevices = sqliteTable(\"premium_devices\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  userId: text(\"user_id\", { length: 100 }).notNull(), // Extension user ID\n  deviceFingerprint: text(\"device_fingerprint\", { length: 64 }).notNull().unique(),\n  extensionId: text(\"extension_id\", { length: 100 }).notNull(),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true).notNull(),\n  registeredAt: integer(\"registered_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  lastSeenAt: integer(\"last_seen_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  deactivatedAt: integer(\"deactivated_at\"),\n  deactivationReason: text(\"deactivation_reason\")\n});\n\n// SEO Settings table for managing meta tags and social media previews\nexport const seoSettings = sqliteTable(\"seo_settings\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  siteTitle: text(\"site_title\", { length: 100 }).default(\"OCUS Job Hunter - Premium Chrome Extension\").notNull(),\n  siteDescription: text(\"site_description\").default(\"Boost your photography career with OCUS Job Hunter Chrome Extension. Automated mission detection, smart acceptance, and unlimited job opportunities for OCUS photographers.\").notNull(),\n  siteKeywords: text(\"site_keywords\").default(\"OCUS extension, photography jobs, Chrome extension, job hunter, photographer tools, mission automation\"),\n  siteAuthor: text(\"site_author\", { length: 100 }).default(\"OCUS Job Hunter\"),\n  \n  // Open Graph settings\n  ogTitle: text(\"og_title\", { length: 100 }),\n  ogDescription: text(\"og_description\"),\n  ogImage: text(\"og_image\").default(\"/og-image.svg\"), // URL or path to image\n  ogImageAlt: text(\"og_image_alt\", { length: 200 }),\n  ogSiteName: text(\"og_site_name\", { length: 100 }).default(\"OCUS Job Hunter\"),\n  ogType: text(\"og_type\", { length: 50 }).default(\"website\"),\n  ogUrl: text(\"og_url\", { length: 255 }).default(\"https://jobhunter.one/\"),\n  \n  // Twitter Card settings  \n  twitterCard: text(\"twitter_card\", { length: 50 }).default(\"summary_large_image\"),\n  twitterTitle: text(\"twitter_title\", { length: 100 }),\n  twitterDescription: text(\"twitter_description\"),\n  twitterImage: text(\"twitter_image\").default(\"/og-image.svg\"),\n  twitterSite: text(\"twitter_site\", { length: 50 }),\n  twitterCreator: text(\"twitter_creator\", { length: 50 }),\n  \n  // Additional SEO settings\n  metaRobots: text(\"meta_robots\", { length: 100 }).default(\"index, follow\"),\n  canonicalUrl: text(\"canonical_url\", { length: 255 }),\n  themeColor: text(\"theme_color\", { length: 7 }).default(\"#2563eb\"),\n  \n  // Custom image uploads\n  customLogo: text(\"custom_logo\"), // Base64 or URL\n  customFavicon: text(\"custom_favicon\"), // Base64 or URL\n  customOgImage: text(\"custom_og_image\"), // Base64 or URL\n  \n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n}));\n\nexport const ordersRelations = relations(orders, ({ many, one }) => ({\n  downloads: many(downloads),\n  invoice: one(invoices, {\n    fields: [orders.id],\n    references: [invoices.orderId],\n  }),\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const downloadsRelations = relations(downloads, ({ one }) => ({\n  order: one(orders, {\n    fields: [downloads.orderId],\n    references: [orders.id],\n  }),\n}));\n\n\n\n\nexport const activationKeysRelations = relations(activationKeys, ({ one }) => ({\n  order: one(orders, {\n    fields: [activationKeys.orderId],\n    references: [orders.id],\n  }),\n}));\n\nexport const ticketsRelations = relations(tickets, ({ many, one }) => ({\n  messages: many(ticketMessages),\n  assignedTo: one(users, {\n    fields: [tickets.assignedToUserId],\n    references: [users.id],\n  }),\n}));\n\nexport const ticketMessagesRelations = relations(ticketMessages, ({ one }) => ({\n  ticket: one(tickets, {\n    fields: [ticketMessages.ticketId],\n    references: [tickets.id],\n  }),\n}));\n\n// Customer relations\nexport const customersRelations = relations(customers, ({ many }) => ({\n  payments: many(customerPayments),\n  usageStats: many(extensionUsageStats),\n  affiliateTransactions: many(affiliateTransactions),\n}));\n\nexport const customerPaymentsRelations = relations(customerPayments, ({ one }) => ({\n  customer: one(customers, {\n    fields: [customerPayments.customerId],\n    references: [customers.id],\n  }),\n  order: one(orders, {\n    fields: [customerPayments.orderId],\n    references: [orders.id],\n  }),\n}));\n\nexport const extensionUsageStatsRelations = relations(extensionUsageStats, ({ one }) => ({\n  customer: one(customers, {\n    fields: [extensionUsageStats.customerId],\n    references: [customers.id],\n  }),\n}));\n\nexport const affiliateTransactionsRelations = relations(affiliateTransactions, ({ one }) => ({\n  affiliate: one(customers, {\n    fields: [affiliateTransactions.affiliateId],\n    references: [customers.id],\n  }),\n  order: one(orders, {\n    fields: [affiliateTransactions.orderId],\n    references: [orders.id],\n  }),\n}));\n\n// Countdown Banner table for promotional campaigns\nexport const countdownBanners = sqliteTable('countdown_banners', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  isEnabled: integer('is_enabled', { mode: 'boolean' }).default(false),\n  titleEn: text('title_en').notNull(),\n  subtitleEn: text('subtitle_en').notNull(),\n  titleTranslations: text('title_translations').default('{}'),\n  subtitleTranslations: text('subtitle_translations').default('{}'),\n  targetPrice: text('target_price').notNull(),\n  originalPrice: text('original_price'),\n  endDateTime: integer('end_date_time').notNull(),\n  backgroundColor: text('background_color', { length: 20 }).default('gradient-primary'),\n  textColor: text('text_color', { length: 20 }).default('white'),\n  priority: integer('priority').default(1),\n  createdAt: integer('created_at').default(sql`(CURRENT_TIMESTAMP)`),\n  updatedAt: integer('updated_at').default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Announcement Badge table for hero section badge\nexport const announcementBadges = sqliteTable('announcement_badges', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  isEnabled: integer('is_enabled', { mode: 'boolean' }).default(true),\n  textEn: text('text_en').notNull(),\n  textTranslations: text('text_translations').default('{}'),\n  backgroundColor: text('background_color', { length: 20 }).default('gradient-primary'),\n  textColor: text('text_color', { length: 20 }).default('white'),\n  priority: integer('priority').default(1),\n  createdAt: integer('created_at').default(sql`(CURRENT_TIMESTAMP)`),\n  updatedAt: integer('updated_at').default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Extension downloads tracking for registered users\nexport const extensionDownloads = sqliteTable(\"extension_downloads\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  customerId: integer(\"customer_id\").notNull().references(() => customers.id),\n  downloadToken: text(\"download_token\", { length: 255 }).notNull().unique(),\n  downloadType: text(\"download_type\", { length: 50 }).default(\"premium\").notNull(), // premium, trial, etc.\n  downloadedAt: integer(\"downloaded_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  ipAddress: text(\"ip_address\", { length: 45 }),\n  userAgent: text(\"user_agent\"),\n  downloadCount: integer(\"download_count\").default(1).notNull(),\n  maxDownloads: integer(\"max_downloads\").default(3).notNull(),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Extension usage logs for trial limitations\nexport const extensionUsageLogs = sqliteTable(\"extension_usage_logs\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  customerId: integer(\"customer_id\").notNull().references(() => customers.id),\n  sessionId: text(\"session_id\", { length: 100 }).notNull(),\n  jobsUsed: integer(\"jobs_used\").default(1).notNull(),\n  platform: text(\"platform\", { length: 50 }).default(\"ocus\").notNull(),\n  location: text(\"location\", { length: 100 }),\n  usageDate: integer(\"usage_date\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  extensionVersion: text(\"extension_version\", { length: 20 }),\n  ipAddress: text(\"ip_address\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Activation codes for extension licensing\nexport const activationCodes = sqliteTable(\"activation_codes\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  code: text(\"code\", { length: 50 }).notNull().unique(),\n  customerId: integer(\"customer_id\").references(() => customers.id),\n  orderId: integer(\"order_id\").references(() => orders.id),\n  userId: integer(\"user_id\").references(() => users.id), // Link to authenticated user\n  installationId: text(\"installation_id\", { length: 36 }), // Unique installation identifier\n  versionToken: text(\"version_token\", { length: 36 }).unique(),\n  activatedAt: integer(\"activated_at\"),\n  activationCount: integer(\"activation_count\").default(0).notNull(),\n  maxActivations: integer(\"max_activations\").default(1).notNull(),\n  deviceId: text(\"device_id\", { length: 100 }),\n  ipAddress: text(\"ip_address\"),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true).notNull(),\n  dailyValidationCount: integer(\"daily_validation_count\").default(0).notNull(), // Daily rate limiting\n  lastValidationDate: integer(\"last_validation_date\"), // Track daily reset\n  isRevoked: integer(\"is_revoked\", { mode: 'boolean' }).default(false).notNull(), // Manual revocation flag\n  expiresAt: integer(\"expires_at\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// New table to track extension installations\nexport const extensionInstallations = sqliteTable(\"extension_installations\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  installationId: text(\"installation_id\", { length: 36 }).notNull().unique(),\n  userId: integer(\"user_id\").references(() => users.id), // Link to authenticated user if logged in\n  customerId: integer(\"customer_id\").references(() => customers.id), // Fixed to integer\n  deviceFingerprint: text(\"device_fingerprint\"),\n  userAgent: text(\"user_agent\"),\n  ipAddress: text(\"ip_address\"),\n  extensionVersion: text(\"extension_version\", { length: 20 }),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true).notNull(),\n  lastSeenAt: integer(\"last_seen_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n});\n\nexport const insertTicketSchema = createInsertSchema(tickets).pick({\n  title: true,\n  description: true,\n  category: true,\n  priority: true,\n  customerEmail: true,\n  customerName: true,\n});\n\nexport const insertTicketMessageSchema = createInsertSchema(ticketMessages).pick({\n  ticketId: true,\n  message: true,\n  isFromCustomer: true,\n  senderName: true,\n  senderEmail: true,\n});\n\nexport const insertExtensionInstallationSchema = createInsertSchema(extensionInstallations).omit({\n  id: true,\n  createdAt: true,\n  lastSeenAt: true,\n});\n\nexport const insertActivationCodeSchema = createInsertSchema(activationCodes).omit({\n  id: true,\n  createdAt: true,\n  activatedAt: true,\n  activationCount: true,\n  dailyValidationCount: true,\n  lastValidationDate: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n  downloadToken: true,\n  downloadCount: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDownloadSchema = createInsertSchema(downloads).omit({\n  id: true,\n  downloadedAt: true,\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).omit({\n  id: true,\n  createdAt: true,\n  usageCount: true,\n});\n\nexport const insertSettingSchema = createInsertSchema(settings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertSeoSettingsSchema = createInsertSchema(seoSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAuthSettingSchema = createInsertSchema(authSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertExtensionDownloadSchema = createInsertSchema(extensionDownloads).omit({\n  id: true,\n  createdAt: true,\n  downloadedAt: true,\n});\n\nexport const insertAnnouncementBadgeSchema = createInsertSchema(announcementBadges).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertExtensionUsageLogSchema = createInsertSchema(extensionUsageLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPremiumDeviceSchema = createInsertSchema(premiumDevices).omit({\n  id: true,\n  registeredAt: true,\n  lastSeenAt: true,\n});\n\n// Removed duplicate - using the one defined earlier\n\n// Types\nexport type Customer = typeof customers.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type Ticket = typeof tickets.$inferSelect;\nexport type TicketMessage = typeof ticketMessages.$inferSelect;\nexport type Download = typeof downloads.$inferSelect;\nexport type ActivationKey = typeof activationKeys.$inferSelect;\nexport type Coupon = typeof coupons.$inferSelect;\nexport type Setting = typeof settings.$inferSelect;\nexport type SeoSettings = typeof seoSettings.$inferSelect;\nexport type AuthSetting = typeof authSettings.$inferSelect;\nexport type DemoUser = typeof demoUsers.$inferSelect;\nexport type AffiliateTransaction = typeof affiliateTransactions.$inferSelect;\nexport type ExtensionDownload = typeof extensionDownloads.$inferSelect;\nexport type ExtensionUsageLog = typeof extensionUsageLogs.$inferSelect;\nexport type ExtensionUsageStats = typeof extensionUsageStats.$inferSelect;\nexport type CustomerPayment = typeof customerPayments.$inferSelect;\nexport type GlobalUsageStats = typeof globalUsageStats.$inferSelect;\nexport type ActivationCode = typeof activationCodes.$inferSelect;\nexport type ExtensionInstallation = typeof extensionInstallations.$inferSelect;\nexport type PremiumDevice = typeof premiumDevices.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type InsertTicketMessage = z.infer<typeof insertTicketMessageSchema>;\nexport type InsertDownload = z.infer<typeof insertDownloadSchema>;\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\nexport type InsertSetting = z.infer<typeof insertSettingSchema>;\nexport type InsertSeoSettings = z.infer<typeof insertSeoSettingsSchema>;\nexport type InsertAuthSetting = z.infer<typeof insertAuthSettingSchema>;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type InsertExtensionInstallation = z.infer<typeof insertExtensionInstallationSchema>;\nexport type InsertActivationCode = z.infer<typeof insertActivationCodeSchema>;\nexport type InsertAffiliateTransaction = typeof affiliateTransactions.$inferInsert;\nexport type CountdownBanner = typeof countdownBanners.$inferSelect;\nexport type AnnouncementBadge = typeof announcementBadges.$inferSelect;\nexport type InsertAnnouncementBadge = z.infer<typeof insertAnnouncementBadgeSchema>;\nexport type InsertExtensionDownload = z.infer<typeof insertExtensionDownloadSchema>;\nexport type InsertExtensionUsageLog = z.infer<typeof insertExtensionUsageLogSchema>;\nexport type InsertExtensionUsageStats = z.infer<typeof insertExtensionUsageStatsSchema>;\nexport type InsertCustomerPayment = z.infer<typeof insertCustomerPaymentSchema>;\nexport type InsertGlobalUsageStats = z.infer<typeof insertGlobalUsageStatsSchema>;\nexport type InsertPremiumDevice = z.infer<typeof insertPremiumDeviceSchema>;\n\nexport const insertDashboardFeaturesSchema = createInsertSchema(dashboardFeatures).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type DashboardFeature = typeof dashboardFeatures.$inferSelect;\nexport type InsertDashboardFeature = z.infer<typeof insertDashboardFeaturesSchema>;\n\nexport const insertAffiliateTransactionSchema = createInsertSchema(affiliateTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCountdownBannerSchema = createInsertSchema(countdownBanners).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertCountdownBanner = z.infer<typeof insertCountdownBannerSchema>;\n\nexport const insertActivationKeySchema = createInsertSchema(activationKeys).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDemoUserSchema = createInsertSchema(demoUsers).omit({\n  id: true,\n  createdAt: true,\n  lastUsedAt: true,\n});\n\nexport type InsertActivationKey = z.infer<typeof insertActivationKeySchema>;\n\n// Enhanced Affiliate Marketing Tables\nexport const affiliatePrograms = sqliteTable(\"affiliate_programs\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  name: text(\"name\", { length: 100 }).notNull(),\n  rewardType: text(\"reward_type\", { length: 20 }).default(\"percentage\").notNull(), // percentage, fixed\n  commissionRate: text(\"commission_rate\"), // for percentage\n  fixedAmount: text(\"fixed_amount\"), // for fixed amount\n  minPayout: text(\"min_payout\").default(\"50.00\"),\n  cookieLifetime: integer(\"cookie_lifetime\").default(30), // days\n  autoApproval: integer(\"auto_approval\", { mode: 'boolean' }).default(false),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true),\n  description: text(\"description\"),\n  termsAndConditions: text(\"terms_and_conditions\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Affiliate Settings - Single row configuration table\nexport const affiliateSettings = sqliteTable(\"affiliate_settings\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  defaultRewardType: text(\"default_reward_type\", { length: 20 }).default(\"percentage\").notNull(),\n  defaultCommissionRate: text(\"default_commission_rate\").default(\"10.00\"),\n  defaultFixedAmount: text(\"default_fixed_amount\").default(\"5.00\"),\n  minPayoutAmount: text(\"min_payout_amount\").default(\"50.00\"),\n  cookieLifetimeDays: integer(\"cookie_lifetime_days\").default(30),\n  autoApprovalEnabled: integer(\"auto_approval_enabled\", { mode: 'boolean' }).default(false),\n  autoApprovalThreshold: text(\"auto_approval_threshold\").default(\"100.00\"),\n  payoutFrequency: text(\"payout_frequency\", { length: 20 }).default(\"monthly\"), // weekly, monthly, quarterly\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\nexport const affiliatePayouts = sqliteTable(\"affiliate_payouts\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  affiliateId: integer(\"affiliate_id\").notNull().references(() => customers.id),\n  amount: text(\"amount\").notNull(),\n  paymentMethod: text(\"payment_method\", { length: 20 }).notNull(), // paypal, bank, manual\n  paymentEmail: text(\"payment_email\", { length: 255 }),\n  bankDetails: text(\"bank_details\"),\n  status: text(\"status\", { length: 20 }).default(\"pending\").notNull(), // pending, processing, paid, failed\n  transactionId: text(\"transaction_id\", { length: 255 }),\n  notes: text(\"notes\"),\n  requestedAt: integer(\"requested_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  processedAt: integer(\"processed_at\"),\n  paidAt: integer(\"paid_at\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\nexport type AffiliateProgram = typeof affiliatePrograms.$inferSelect;\nexport type InsertAffiliateProgram = typeof affiliatePrograms.$inferInsert;\nexport type AffiliatePayout = typeof affiliatePayouts.$inferSelect;\nexport type InsertAffiliatePayout = typeof affiliatePayouts.$inferInsert;\nexport type AffiliateSettings = typeof affiliateSettings.$inferSelect;\nexport type InsertAffiliateSettings = typeof affiliateSettings.$inferInsert;\n\n// Invoice Configuration Table\nexport const invoiceSettings = sqliteTable(\"invoice_settings\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  companyName: text(\"company_name\", { length: 255 }).default(\"OCUS Job Hunter\").notNull(),\n  companyLogo: text(\"company_logo\"), // Base64 or URL\n  companyAddress: text(\"company_address\"),\n  companyPhone: text(\"company_phone\", { length: 50 }),\n  companyEmail: text(\"company_email\", { length: 255 }),\n  companyWebsite: text(\"company_website\", { length: 255 }),\n  taxNumber: text(\"tax_number\", { length: 100 }),\n  invoicePrefix: text(\"invoice_prefix\", { length: 10 }).default(\"INV\").notNull(),\n  receiptPrefix: text(\"receipt_prefix\", { length: 10 }).default(\"RCP\").notNull(),\n  invoiceNotes: text(\"invoice_notes\"),\n  termsAndConditions: text(\"terms_and_conditions\"),\n  footerText: text(\"footer_text\"),\n  primaryColor: text(\"primary_color\", { length: 7 }).default(\"#007bff\"),\n  secondaryColor: text(\"secondary_color\", { length: 7 }).default(\"#6c757d\"),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).default(true),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Invoices Table\nexport const invoices = sqliteTable(\"invoices\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  invoiceNumber: text(\"invoice_number\", { length: 50 }).notNull().unique(),\n  orderId: integer(\"order_id\").references(() => orders.id),\n  customerId: integer(\"customer_id\").references(() => customers.id),\n  customerName: text(\"customer_name\", { length: 255 }).notNull(),\n  customerEmail: text(\"customer_email\", { length: 255 }).notNull(),\n  customerAddress: text(\"customer_address\"),\n  billingAddress: text(\"billing_address\"),\n  invoiceDate: integer(\"invoice_date\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  dueDate: integer(\"due_date\").notNull(),\n  subtotal: text(\"subtotal\").notNull(),\n  taxAmount: text(\"tax_amount\").default(\"0.00\"),\n  discountAmount: text(\"discount_amount\").default(\"0.00\"),\n  totalAmount: text(\"total_amount\").notNull(),\n  currency: text(\"currency\", { length: 3 }).default(\"USD\").notNull(),\n  status: text(\"status\", { length: 20 }).default(\"issued\").notNull(), // issued, paid, overdue, cancelled\n  paidAt: integer(\"paid_at\"),\n  notes: text(\"notes\"),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull(),\n  updatedAt: integer(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\n// Invoice Items Table\nexport const invoiceItems = sqliteTable(\"invoice_items\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  invoiceId: integer(\"invoice_id\").references(() => invoices.id).notNull(),\n  productName: text(\"product_name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  quantity: integer(\"quantity\").default(1).notNull(),\n  unitPrice: text(\"unit_price\").notNull(),\n  totalPrice: text(\"total_price\").notNull(),\n  createdAt: integer(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`).notNull()\n});\n\nexport type InvoiceSettings = typeof invoiceSettings.$inferSelect;\nexport type InsertInvoiceSettings = typeof invoiceSettings.$inferInsert;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = typeof invoices.$inferInsert;\nexport type InvoiceItem = typeof invoiceItems.$inferSelect;\nexport type InsertInvoiceItem = typeof invoiceItems.$inferInsert;\nexport type InsertDemoUser = z.infer<typeof insertDemoUserSchema>;\n\n// Mission schema exports\nexport const insertMissionSchema = createInsertSchema(missions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserTrialSchema = createInsertSchema(userTrials).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Mission = typeof missions.$inferSelect;\nexport type InsertMission = z.infer<typeof insertMissionSchema>;\nexport type UserTrial = typeof userTrials.$inferSelect;\nexport type TrialUsage = typeof trialUsage.$inferSelect;\nexport type InsertTrialUsage = typeof trialUsage.$inferInsert;\nexport type InsertUserTrial = z.infer<typeof insertUserTrialSchema>;\n\n// New schema exports\nexport const insertExtensionUsageStatsSchema = createInsertSchema(extensionUsageStats).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCustomerPaymentSchema = createInsertSchema(customerPayments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGlobalUsageStatsSchema = createInsertSchema(globalUsageStats).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n\n\n// Location tables for the locking system\nexport const continents = sqliteTable(\"continents\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  name: text(\"name\", { length: 100 }).notNull().unique(),\n  code: text(\"code\", { length: 2 }).notNull().unique(),\n  createdAt: integer(\"created_at\").notNull().default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const countries = sqliteTable(\"countries\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  name: text(\"name\", { length: 100 }).notNull(),\n  code: text(\"code\", { length: 2 }).notNull().unique(),\n  continentId: integer(\"continent_id\").references(() => continents.id).notNull(),\n  createdAt: integer(\"created_at\").notNull().default(sql`(CURRENT_TIMESTAMP)`),\n});\n\nexport const cities = sqliteTable(\"cities\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  name: text(\"name\", { length: 100 }).notNull(),\n  countryId: integer(\"country_id\").references(() => countries.id).notNull(),\n  isAvailable: integer(\"is_available\", { mode: 'boolean' }).notNull().default(true),\n  assignedUserId: integer(\"assigned_user_id\").references(() => customers.id),\n  assignedAt: integer(\"assigned_at\"),\n  createdAt: integer(\"created_at\").notNull().default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// User location assignments\nexport const userLocationAssignments = sqliteTable(\"user_location_assignments\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  userId: integer(\"user_id\").references(() => customers.id).notNull().unique(),\n  continentId: integer(\"continent_id\").references(() => continents.id).notNull(),\n  countryId: integer(\"country_id\").references(() => countries.id).notNull(),\n  cityId: integer(\"city_id\").references(() => cities.id).notNull(),\n  assignedAt: integer(\"assigned_at\").notNull().default(sql`(CURRENT_TIMESTAMP)`),\n  assignedBy: integer(\"assigned_by\").references(() => customers.id), // null for self-assignment, admin user id for admin assignment\n  isLocked: integer(\"is_locked\", { mode: 'boolean' }).notNull().default(true),\n});\n\n// Location relations\nexport const continentsRelations = relations(continents, ({ many }) => ({\n  countries: many(countries),\n}));\n\nexport const countriesRelations = relations(countries, ({ one, many }) => ({\n  continent: one(continents, {\n    fields: [countries.continentId],\n    references: [continents.id],\n  }),\n  cities: many(cities),\n}));\n\nexport const citiesRelations = relations(cities, ({ one }) => ({\n  country: one(countries, {\n    fields: [cities.countryId],\n    references: [countries.id],\n  }),\n  assignedUser: one(customers, {\n    fields: [cities.assignedUserId],\n    references: [customers.id],\n  }),\n}));\n\nexport const userLocationAssignmentsRelations = relations(userLocationAssignments, ({ one }) => ({\n  user: one(customers, {\n    fields: [userLocationAssignments.userId],\n    references: [customers.id],\n  }),\n  continent: one(continents, {\n    fields: [userLocationAssignments.continentId],\n    references: [continents.id],\n  }),\n  country: one(countries, {\n    fields: [userLocationAssignments.countryId],\n    references: [countries.id],\n  }),\n  city: one(cities, {\n    fields: [userLocationAssignments.cityId],\n    references: [cities.id],\n  }),\n  assignedBy: one(customers, {\n    fields: [userLocationAssignments.assignedBy],\n    references: [customers.id],\n  }),\n}));\n\n// Location schemas\nexport const insertContinentSchema = createInsertSchema(continents);\nexport const insertCountrySchema = createInsertSchema(countries);\nexport const insertCitySchema = createInsertSchema(cities);\nexport const insertUserLocationAssignmentSchema = createInsertSchema(userLocationAssignments);\n\nexport type InsertContinent = typeof continents.$inferInsert;\nexport type SelectContinent = typeof continents.$inferSelect;\n\nexport type InsertCountry = typeof countries.$inferInsert;\nexport type SelectCountry = typeof countries.$inferSelect;\n\nexport type InsertCity = typeof cities.$inferInsert;  \nexport type SelectCity = typeof cities.$inferSelect;\n\nexport type InsertUserLocationAssignment = typeof userLocationAssignments.$inferInsert;\nexport type SelectUserLocationAssignment = typeof userLocationAssignments.$inferSelect;\n", "import { \n  users, \n  orders, \n  products, \n  downloads, \n  coupons, \n  settings, \n  seoSettings,\n  authSettings, \n  activationKeys, \n  activationCodes,\n  extensionInstallations,\n  demoUsers, \n  customers, \n  affiliateTransactions,\n  extensionUsageStats,\n  customerPayments,\n  globalUsageStats,\n  tickets,\n  ticketMessages,\n  countdownBanners,\n  announcementBadges,\n  extensionDownloads,\n  extensionUsageLogs,\n  missions,\n  userTrials,\n  trialUsage,\n  premiumDevices,\n  dashboardFeatures,\n  invoices,\n  invoiceItems,\n  invoiceSettings,\n  type User, \n  type InsertUser, \n  type Order, \n  type InsertOrder, \n  type Product, \n  type InsertProduct, \n  type Download, \n  type InsertDownload, \n  type Coupon, \n  type InsertCoupon, \n  type Setting, \n  type InsertSetting, \n  type SeoSettings,\n  type InsertSeoSettings,\n  type AuthSetting, \n  type InsertAuthSetting, \n  type ActivationKey, \n  type InsertActivationKey, \n  type ActivationCode,\n  type InsertActivationCode,\n  type ExtensionInstallation,\n  type InsertExtensionInstallation,\n  type DemoUser, \n  type InsertDemoUser, \n  type Customer, \n  type InsertCustomer, \n  type AffiliateTransaction, \n  type InsertAffiliateTransaction,\n  type ExtensionUsageStats,\n  type InsertExtensionUsageStats,\n  type CustomerPayment,\n  type InsertCustomerPayment,\n  type GlobalUsageStats,\n  type InsertGlobalUsageStats,\n  type CountdownBanner,\n  type InsertCountdownBanner,\n  type AnnouncementBadge,\n  type InsertAnnouncementBadge,\n  type ExtensionDownload,\n  type InsertExtensionDownload,\n  type ExtensionUsageLog,\n  type InsertExtensionUsageLog,\n  type Mission,\n  type InsertMission,\n  type UserTrial,\n  type InsertUserTrial,\n  type Ticket,\n  type TicketMessage,\n  type TrialUsage,\n  type InsertTrialUsage,\n  type PremiumDevice,\n  type InsertPremiumDevice,\n  type DashboardFeature,\n  type InsertDashboardFeature,\n  type Invoice,\n  type InsertInvoice,\n  type InvoiceItem,\n  type InsertInvoiceItem,\n  type InvoiceSettings,\n  type InsertInvoiceSettings\n} from \"@shared/schema\";\nimport { eq, desc, asc, count, and, gte, lte, sql } from \"drizzle-orm\";\nimport type { DbInstance } from './db';\n// Use Web Crypto API for Cloudflare compatibility\n// import crypto from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User>;\n  updateStripeCustomerId(userId: number, stripeCustomerId: string): Promise<User>;\n\n  // Orders\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrder(id: number): Promise<Order | undefined>;\n  getOrderByDownloadToken(token: string): Promise<Order | undefined>;\n  getOrderByPaymentIntentId(paymentIntentId: string): Promise<Order | undefined>;\n  getOrderByPaypalOrderId(paypalOrderId: string): Promise<Order | undefined>;\n  updateOrderStatus(id: number, status: string, completedAt?: Date): Promise<Order>;\n  updateOrder(id: number, updates: Partial<InsertOrder>): Promise<Order>;\n  incrementDownloadCount(id: number): Promise<Order>;\n  getAllOrders(): Promise<Order[]>;\n  getOrdersWithPagination(page: number, limit: number): Promise<{ orders: Order[], total: number }>;\n  getUserOrders(userId: number): Promise<Order[]>;\n\n  // Products\n  createProduct(product: InsertProduct): Promise<Product>;\n  getProduct(id: number): Promise<Product | undefined>;\n  getActiveProducts(): Promise<Product[]>;\n  getActiveProduct(): Promise<Product | undefined>;\n  updateProduct(id: number, updates: Partial<InsertProduct>): Promise<Product>;\n\n  // Downloads\n  createDownload(download: InsertDownload): Promise<Download>;\n  getDownloadsByOrder(orderId: number): Promise<Download[]>;\n  getUserDownloads(userId: number): Promise<Download[]>;\n\n  // Analytics\n  getTotalRevenue(): Promise<number>;\n  getTotalSales(): Promise<number>;\n  getRecentOrders(limit: number): Promise<Order[]>;\n\n  // Coupons\n  createCoupon(coupon: InsertCoupon): Promise<Coupon>;\n  getCoupon(id: number): Promise<Coupon | undefined>;\n  getCouponByCode(code: string): Promise<Coupon | undefined>;\n  updateCoupon(id: number, updates: Partial<InsertCoupon>): Promise<Coupon>;\n  getAllCoupons(): Promise<Coupon[]>;\n  incrementCouponUsage(id: number): Promise<Coupon>;\n\n  // Settings\n  createSetting(setting: InsertSetting): Promise<Setting>;\n  getSetting(key: string): Promise<Setting | undefined>;\n  updateSetting(key: string, value: string): Promise<Setting>;\n  getAllSettings(): Promise<Setting[]>;\n\n  // SEO Settings\n  getSeoSettings(): Promise<SeoSettings | undefined>;\n  updateSeoSettings(settings: Partial<InsertSeoSettings>): Promise<SeoSettings>;\n  \n  // Auth Settings\n  getAuthSettings(): Promise<AuthSetting | undefined>;\n  updateAuthSettings(updates: Partial<InsertAuthSetting>): Promise<AuthSetting>;\n  createAuthSettings(authSetting: InsertAuthSetting): Promise<AuthSetting>;\n\n  // Activation Keys\n  createActivationKey(activationKey: InsertActivationKey): Promise<ActivationKey>;\n  getActivationKeyByKey(key: string): Promise<ActivationKey | undefined>;\n  updateActivationKeyUsage(key: string): Promise<ActivationKey>;\n  getRecentActivationKeys(): Promise<ActivationKey[]>;\n\n  // Extension installations - NEW\n  createExtensionInstallation(data: InsertExtensionInstallation): Promise<ExtensionInstallation>;\n  getExtensionInstallation(installationId: string): Promise<ExtensionInstallation | null>;\n  updateInstallationLastSeen(installationId: string): Promise<void>;\n  getUserInstallations(userId: number): Promise<ExtensionInstallation[]>;\n\n  // Enhanced activation codes - NEW\n  createActivationCodeForUser(userId: number, installationId: string, orderId?: number): Promise<ActivationCode>;\n  validateActivationCodeForInstallation(code: string, installationId: string): Promise<{ valid: boolean; message: string; activationCode?: ActivationCode }>;\n  getActivationCodeByInstallation(installationId: string): Promise<ActivationCode | null>;\n  revokeActivationCode(codeId: number, reason?: string): Promise<void>;\n\n  // Demo Users\n  createDemoUser(demoUser: InsertDemoUser): Promise<DemoUser>;\n  getDemoUserById(userId: string): Promise<DemoUser | undefined>;\n  incrementDemoUsage(userId: string): Promise<DemoUser>;\n\n  // Customer operations\n  getCustomer(id: number | string): Promise<Customer | undefined>;\n  getCustomerByEmail(email: string): Promise<Customer | undefined>;\n  getCustomerBySocialId(provider: string, socialId: string): Promise<Customer | undefined>;\n  createCustomer(customerData: InsertCustomer): Promise<Customer>;\n  updateCustomerActivationKey(id: number | string, activationKey: string): Promise<void>;\n  updateCustomer(id: number | string, updates: Partial<InsertCustomer>): Promise<Customer>;\n  getCustomerOrders(customerId: string): Promise<Order[]>;\n  getAllCustomers(): Promise<Customer[]>;\n  deleteCustomer(id: number | string): Promise<void>;\n  generateActivationKey(customerId: string): Promise<string>;\n  activateCustomer(activationKey: string): Promise<Customer | null>;\n\n  // Affiliate operations\n  getCustomerByReferralCode(code: string): Promise<Customer | undefined>;\n  createAffiliateTransaction(transaction: InsertAffiliateTransaction): Promise<AffiliateTransaction>;\n  getAffiliateTransactions(affiliateId: number): Promise<AffiliateTransaction[]>;\n  getAffiliateStats(affiliateId: number): Promise<{totalEarnings: number, totalReferrals: number, pendingCommissions: number}>;\n  \n  // Product Pricing Management\n  updateProductPricing(data: { price: number; beforePrice: number | null }): Promise<any>;\n  getCurrentProduct(): Promise<any>;\n  \n  // Extension Usage Statistics\n  recordExtensionUsage(stats: InsertExtensionUsageStats): Promise<ExtensionUsageStats>;\n  getCustomerUsageStats(customerId: string): Promise<ExtensionUsageStats[]>;\n  getGlobalUsageStats(): Promise<GlobalUsageStats[]>;\n  updateGlobalStats(date: string): Promise<void>;\n  \n  // Customer Payments\n  recordPayment(payment: InsertCustomerPayment): Promise<CustomerPayment>;\n  getCustomerPayments(customerId: number): Promise<CustomerPayment[]>;\n  updatePaymentStatus(paymentId: number, status: string, processedAt?: Date): Promise<CustomerPayment>;\n\n  // Invoice Management\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  getInvoice(id: number): Promise<Invoice | undefined>;\n  getInvoiceByNumber(invoiceNumber: string): Promise<Invoice | undefined>;\n  getCustomerInvoices(customerId: number): Promise<Invoice[]>;\n  getAllInvoices(): Promise<Invoice[]>;\n  updateInvoice(id: number, updates: Partial<InsertInvoice>): Promise<Invoice>;\n  updateInvoiceStatus(id: number, status: string, paidAt?: Date): Promise<Invoice>;\n  generateInvoiceNumber(): Promise<string>;\n  \n  // Invoice Items Management\n  createInvoiceItem(item: InsertInvoiceItem): Promise<InvoiceItem>;\n  getInvoiceItems(invoiceId: number): Promise<InvoiceItem[]>;\n  \n  // Invoice Settings\n  getInvoiceSettings(): Promise<InvoiceSettings | undefined>;\n  updateInvoiceSettings(settings: Partial<InsertInvoiceSettings>): Promise<InvoiceSettings>;\n  createInvoiceSettings(settings: InsertInvoiceSettings): Promise<InvoiceSettings>;\n  \n  // Real Ticket Operations (Database)\n  createTicketDB(ticket: any): Promise<Ticket>;\n  getTicketDB(id: number): Promise<Ticket | undefined>;\n  getCustomerTickets(customerEmail: string): Promise<Ticket[]>;\n  getAllTicketsDB(): Promise<Ticket[]>;\n  updateTicketStatusDB(id: number, status: string): Promise<Ticket>;\n  deleteTicketDB(id: number): Promise<void>;\n  addTicketMessageDB(message: any): Promise<TicketMessage>;\n  getTicketMessagesDB(ticketId: number): Promise<TicketMessage[]>;\n  \n  // Countdown Banners\n  getActiveCountdownBanner(): Promise<CountdownBanner | null>;\n  getAllCountdownBanners(): Promise<CountdownBanner[]>;\n  createCountdownBanner(data: InsertCountdownBanner): Promise<CountdownBanner>;\n  updateCountdownBanner(id: number, data: Partial<InsertCountdownBanner>): Promise<CountdownBanner>;\n  deleteCountdownBanner(id: number): Promise<void>;\n  \n  // Announcement Badges  \n  getActiveAnnouncementBadge(): Promise<AnnouncementBadge | null>;\n  getAllAnnouncementBadges(): Promise<AnnouncementBadge[]>;\n  createAnnouncementBadge(data: InsertAnnouncementBadge): Promise<AnnouncementBadge>;\n  updateAnnouncementBadge(id: number, data: Partial<InsertAnnouncementBadge>): Promise<AnnouncementBadge>;\n  deleteAnnouncementBadge(id: number): Promise<void>;\n\n  getActivationKeyByOrderId(orderId: number): Promise<ActivationKey | null>;\n\n  // Extension Management\n  createExtensionDownload(download: InsertExtensionDownload): Promise<ExtensionDownload>;\n  getExtensionDownload(token: string): Promise<ExtensionDownload | undefined>;\n  incrementExtensionDownloadCount(id: number): Promise<ExtensionDownload>;\n  getCustomerExtensionDownloads(customerId: number | string): Promise<ExtensionDownload[]>;\n\n  // Social Authentication Methods\n  getCustomerBySocialId(provider: string, socialId: string): Promise<Customer | undefined>;\n  \n  // Customer Extension Management\n  blockCustomer(customerId: number | string, reason: string): Promise<Customer>;\n  \n  // Mission Tracking\n  createMission(mission: InsertMission): Promise<Mission>;\n  getMission(missionId: string): Promise<Mission | undefined>;\n  updateMissionStatus(missionId: string, status: string, timestamp?: Date): Promise<Mission>;\n  getUserMissions(userId: string): Promise<Mission[]>;\n  getCustomerMissions(customerId: number): Promise<Mission[]>;\n  \n  // User Trial Management\n  createUserTrial(trial: InsertUserTrial): Promise<UserTrial>;\n  getUserTrial(userId: string): Promise<UserTrial | undefined>;\n  updateTrialUsage(userId: string, trialsUsed: number): Promise<UserTrial>;\n  activateUser(userId: string, activationKey: string): Promise<UserTrial>;\n  unblockCustomer(customerId: number | string): Promise<Customer>;\n  generateExtensionActivationKey(customerId: number | string): Promise<Customer>;\n  activateExtension(customerId: number | string, activationKey: string): Promise<Customer>;\n  recordExtensionUsageLog(usage: InsertExtensionUsageLog): Promise<ExtensionUsageLog>;\n  getCustomerTrialUsage(customerId: number | string): Promise<number>;\n  canUseExtension(customerId: number | string): Promise<{ canUse: boolean; reason?: string; trialUsed?: number; isBlocked?: boolean }>;\n\n  // Admin Customer Management\n  getAllCustomersForAdmin(): Promise<Customer[]>;\n  getCustomerActivations(): Promise<{ customer: Customer; downloads: ExtensionDownload[] }[]>;\n  \n  // Lottery Scratch Activation System\n  revealActivationKey(customerId: string): Promise<Customer>;\n  generateUniqueActivationKey(): string;\n  \n  // Activation Code System\n  createActivationCode(code: InsertActivationCode): Promise<ActivationCode>;\n  getActivationCode(code: string): Promise<ActivationCode | undefined>;\n  getActivationCodeByVersionToken(versionToken: string): Promise<ActivationCode | undefined>;\n  activateCode(code: string, deviceId: string, ipAddress: string): Promise<ActivationCode>;\n  getCustomerActivationCodes(customerId: string): Promise<ActivationCode[]>;\n  deactivateCode(code: string): Promise<ActivationCode>;\n  generateActivationCode(customerId: string, orderId?: number): Promise<ActivationCode>;\n  \n  // Trial Usage Tracking\n  getTrialUsage(trialKey: string): Promise<TrialUsage | undefined>;\n  createTrialUsage(trial: InsertTrialUsage): Promise<TrialUsage>;\n  incrementTrialUsage(trialKey: string): Promise<TrialUsage>;\n  expireTrialUsage(trialKey: string): Promise<TrialUsage>;\n  \n  // Premium Device Management\n  getPremiumDevice(userId: string, deviceFingerprint: string): Promise<PremiumDevice | undefined>;\n  getUserPremiumDevices(userId: string): Promise<PremiumDevice[]>;\n  registerPremiumDevice(userId: string, deviceFingerprint: string, extensionId: string): Promise<PremiumDevice>;\n  deactivatePremiumDevice(deviceFingerprint: string, reason?: string): Promise<PremiumDevice>;\n  updatePremiumDeviceLastSeen(deviceFingerprint: string): Promise<PremiumDevice>;\n\n  // Dashboard Features Management\n  getDashboardFeatures(): Promise<DashboardFeature[]>;\n  getDashboardFeature(featureName: string): Promise<DashboardFeature | undefined>;\n  createDashboardFeature(feature: InsertDashboardFeature): Promise<DashboardFeature>;\n  updateDashboardFeature(featureName: string, isEnabled: boolean, description?: string): Promise<DashboardFeature>;\n  initializeDashboardFeatures(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  private db: DbInstance;\n\n  constructor(db: DbInstance) {\n    this.db = db;\n  }\n  // Users\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await this.db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await this.db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await this.db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createCustomer(customerData: InsertCustomer): Promise<Customer> {\n    const now = new Date().getTime();\n    const [customer] = await this.db\n      .insert(customers)\n      .values({ ...customerData, createdAt: now, updatedAt: now })\n      .returning();\n    return customer;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User> {\n    const [user] = await this.db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) {\n        throw new Error(`User with id ${id} not found`);\n    }\n    return user;\n  }\n\n  async updateAuthSettings(updates: Partial<InsertAuthSetting>): Promise<AuthSetting> {\n    // Get existing auth settings\n    const existing = await this.getAuthSettings();\n    \n    if (existing) {\n      // Update existing auth settings\n      const [updated] = await this.db\n        .update(authSettings)\n        .set({ ...updates, updatedAt: new Date().getTime() })\n        .where(eq(authSettings.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new auth settings\n      return await this.createAuthSettings(updates as InsertAuthSetting);\n    }\n  }\n\n  async updateSeoSettings(updates: Partial<InsertSeoSettings>): Promise<SeoSettings> {\n    // Get existing SEO settings\n    const existing = await this.getSeoSettings();\n    \n    if (existing) {\n      // Update existing SEO settings\n      const [updated] = await this.db\n        .update(seoSettings)\n        .set({ ...updates, updatedAt: new Date().getTime() })\n        .where(eq(seoSettings.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new SEO settings with defaults\n      const [created] = await this.db\n        .insert(seoSettings)\n        .values(updates as InsertSeoSettings)\n        .returning();\n      return created;\n    }\n  }\n\n  async getCustomerByEmail(email: string): Promise<Customer | undefined> {\n    const [customer] = await this.db.select().from(customers).where(eq(customers.email, email));\n    return customer;\n  }\n\n  async createActivationKey(insertActivationKey: InsertActivationKey): Promise<ActivationKey> {\n    const [activationKey] = await this.db\n      .insert(activationKeys)\n      .values(insertActivationKey)\n      .returning();\n    return activationKey;\n  }\n\n  async updateTicket(id: number, updateData: any): Promise<any> {\n    const [updatedTicket] = await this.db.update(tickets).set({ ...updateData, updatedAt: new Date().getTime() }).where(eq(tickets.id, id)).returning();\n    return updatedTicket;\n  }\n\n  async addTicketMessage(message: any): Promise<any> {\n    const [newMessage] = await this.db.insert(ticketMessages).values({ ...message, createdAt: new Date().getTime() }).returning();\n    return newMessage;\n  }\n\n  async recordExtensionUsage(stats: InsertExtensionUsageStats): Promise<ExtensionUsageStats> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const existingStats = await this.db\n      .select()\n      .from(extensionUsageStats)\n      .where(and(eq(extensionUsageStats.customerId, stats.customerId), eq(extensionUsageStats.usageDate, today.getTime())))\n      .limit(1);\n\n    if (existingStats.length > 0) {\n      const [updatedStats] = await this.db\n        .update(extensionUsageStats)\n        .set({\n          ...stats,\n          updatedAt: new Date().getTime()\n        })\n        .where(eq(extensionUsageStats.id, existingStats[0].id))\n        .returning();\n      return updatedStats;\n    } else {\n      const [newStats] = await this.db\n        .insert(extensionUsageStats)\n        .values({\n          ...stats,\n          usageDate: today.getTime(),\n          createdAt: new Date().getTime(),\n          updatedAt: new Date().getTime()\n        })\n        .returning();\n      return newStats;\n    }\n  }\n\n  async getCustomerUsageStats(customerId: string): Promise<ExtensionUsageStats[]> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    return await this.db\n      .select()\n      .from(extensionUsageStats)\n      .where(and(eq(extensionUsageStats.customerId, parseInt(customerId)), gte(extensionUsageStats.usageDate, thirtyDaysAgo.getTime())))\n      .orderBy(asc(extensionUsageStats.usageDate));\n  }\n\n  async getGlobalUsageStats(): Promise<GlobalUsageStats[]> {\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    return await this.db\n      .select()\n      .from(globalUsageStats)\n      .where(gte(globalUsageStats.statDate, thirtyDaysAgo.getTime()))\n      .orderBy(asc(globalUsageStats.statDate));\n  }\n\n  async updateGlobalStats(date: string): Promise<void> {\n    const statDate = new Date(date).getTime();\n    const [existingStats] = await this.db\n      .select()\n      .from(globalUsageStats)\n      .where(eq(globalUsageStats.statDate, date));\n\n    const todayStart = new Date(date + 'T00:00:00Z').getTime();\n    const todayEnd = new Date(date + 'T23:59:59Z').getTime();\n\n    const totalUsers = await this.db\n      .select({ count: count() })\n      .from(customers)\n      .where(eq(customers.isActivated, true));\n\n    const activeUsers = await this.db\n      .select({ count: count() })\n      .from(extensionUsageStats)\n      .where(and(\n        gte(extensionUsageStats.usageDate, todayStart),\n        lte(extensionUsageStats.usageDate, todayEnd)\n      ));\n\n    const dailyStats = await this.db\n      .select({\n        totalSessions: count(),\n        totalJobsFound: sql<number>`COALESCE(SUM(${extensionUsageStats.jobsFound}), 0)`,\n        totalJobsApplied: sql<number>`COALESCE(SUM(${extensionUsageStats.jobsApplied}), 0)`,\n        totalSuccessfulJobs: sql<number>`COALESCE(SUM(${extensionUsageStats.successfulJobs}), 0)`,\n        avgSessionDuration: sql<number>`COALESCE(AVG(${extensionUsageStats.sessionDuration}), 0)`\n      })\n      .from(extensionUsageStats)\n      .where(and(\n        gte(extensionUsageStats.usageDate, todayStart),\n        lte(extensionUsageStats.usageDate, todayEnd)\n      ));\n\n    const statsData = {\n      statDate: date,\n      totalUsers: totalUsers[0]?.count || 0,\n      activeUsers: activeUsers[0]?.count || 0,\n      totalSessions: dailyStats[0]?.totalSessions || 0,\n      totalJobsFound: Number(dailyStats[0]?.totalJobsFound) || 0,\n      totalJobsApplied: Number(dailyStats[0]?.totalJobsApplied) || 0,\n      totalSuccessfulJobs: Number(dailyStats[0]?.totalSuccessfulJobs) || 0,\n      avgSessionDuration: dailyStats[0]?.avgSessionDuration?.toString() || \"0\",\n      updatedAt: new Date().getTime()\n    };\n\n    if (existingStats) {\n      await this.db\n        .update(globalUsageStats)\n        .set(statsData)\n        .where(eq(globalUsageStats.id, existingStats.id));\n    } else {\n      await this.db\n        .insert(globalUsageStats)\n        .values(statsData);\n    }\n  }\n\n  // Customer Payments\n  async recordPayment(payment: InsertCustomerPayment): Promise<CustomerPayment> {\n    const [newPayment] = await this.db\n      .insert(customerPayments)\n      .values(payment)\n      .returning();\n\n    // Update customer's total spent and order count if payment is completed\n    if (payment.status === 'completed') {\n      await this.db\n        .update(customers)\n        .set({ \n          totalSpent: sql`${customers.totalSpent} + ${payment.amount}`,\n          totalOrders: sql`${customers.totalOrders} + 1`,\n          lastOrderDate: new Date().getTime(),\n          updatedAt: new Date().getTime()\n        })\n        .where(eq(customers.id, payment.customerId));\n    }\n\n    return newPayment;\n  }\n\n  async getCustomerPayments(customerId: number): Promise<CustomerPayment[]> {\n    return await this.db\n      .select()\n      .from(customerPayments)\n      .where(eq(customerPayments.customerId, customerId))\n      .orderBy(desc(customerPayments.createdAt));\n  }\n\n  async updatePaymentStatus(paymentId: number, status: string, processedAt?: Date): Promise<CustomerPayment> {\n    const [updatedPayment] = await this.db\n      .update(customerPayments)\n      .set({ \n        status, \n        processedAt: (processedAt || new Date()).getTime()\n      })\n      .where(eq(customerPayments.id, paymentId))\n      .returning();\n\n    return updatedPayment;\n  }\n\n  // Database Ticket Operations (Real Implementation)\n  async createTicketDB(ticket: any): Promise<Ticket> {\n    const [newTicket] = await this.db\n      .insert(tickets)\n      .values(ticket)\n      .returning();\n    return newTicket;\n  }\n\n  async getTicketDB(id: number): Promise<Ticket | undefined> {\n    const [ticket] = await this.db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.id, id));\n    return ticket;\n  }\n\n  async getCustomerTickets(customerEmail: string): Promise<Ticket[]> {\n    return await this.db\n      .select()\n      .from(tickets)\n      .where(eq(tickets.customerEmail, customerEmail))\n      .orderBy(desc(tickets.createdAt));\n  }\n\n  async getAllTicketsDB(): Promise<Ticket[]> {\n    return await this.db\n      .select()\n      .from(tickets)\n      .orderBy(desc(tickets.createdAt));\n  }\n\n  async updateTicketStatusDB(id: number, status: string): Promise<Ticket> {\n    const updateData: any = { \n      status, \n      updatedAt: new Date().getTime() \n    };\n    \n    if (status === 'resolved' || status === 'closed') {\n      updateData.resolvedAt = new Date().getTime();\n    }\n\n    const [updatedTicket] = await this.db\n      .update(tickets)\n      .set(updateData)\n      .where(eq(tickets.id, id))\n      .returning();\n    \n    return updatedTicket;\n  }\n\n  async deleteTicketDB(id: number): Promise<void> {\n    // First delete associated messages\n    await this.db.delete(ticketMessages).where(eq(ticketMessages.ticketId, id));\n    // Then delete the ticket\n    await this.db.delete(tickets).where(eq(tickets.id, id));\n  }\n\n  async addTicketMessageDB(message: any): Promise<TicketMessage> {\n    const [newMessage] = await this.db\n      .insert(ticketMessages)\n      .values(message)\n      .returning();\n    \n    // Update ticket's updatedAt timestamp\n    await this.db\n      .update(tickets)\n      .set({ updatedAt: new Date().getTime() })\n      .where(eq(tickets.id, message.ticketId));\n    \n    return newMessage;\n  }\n\n  async getTicketMessagesDB(ticketId: number): Promise<TicketMessage[]> {\n    return await this.db\n      .select()\n      .from(ticketMessages)\n      .where(eq(ticketMessages.ticketId, ticketId))\n      .orderBy(ticketMessages.createdAt);\n  }\n  // Product Pricing Management Implementation\n  async updateProductPricing(data: { price: number; beforePrice: number | null }): Promise<any> {\n    try {\n      // First, check if a product exists\n      const existingProducts = await this.db.select().from(products).limit(1);\n      \n      if (existingProducts.length === 0) {\n        // Create new product with default values\n        const [newProduct] = await this.db\n          .insert(products)\n          .values({\n            name: \"OCUS Job Hunter Chrome Extension\",\n            description: \"Premium Chrome extension for photography job hunting on OCUS (Ubereats/Foodora deliveries)\",\n            price: data.price.toString(),\n            beforePrice: data.beforePrice ? data.beforePrice.toString() : null,\n            currency: \"eur\",\n            fileName: \"ocus-extension.crx\",\n            filePath: \"/uploads/ocus-extension.crx\",\n            isActive: true\n          })\n          .returning();\n        return newProduct;\n      } else {\n        // Update existing product\n        const [updatedProduct] = await this.db\n          .update(products)\n          .set({\n            price: data.price.toString(),\n            beforePrice: data.beforePrice ? data.beforePrice.toString() : null\n          })\n          .where(eq(products.id, existingProducts[0].id))\n          .returning();\n        return updatedProduct;\n      }\n    } catch (error) {\n      console.error(\"Error updating product pricing:\", error);\n      throw error;\n    }\n  }\n\n  async getCurrentProduct(): Promise<any> {\n    try {\n      const productList = await this.db.select().from(products).where(eq(products.isActive, true)).limit(1);\n      \n      if (productList.length === 0) {\n        // Return default product structure\n        return {\n          id: 1,\n          name: \"OCUS Job Hunter Chrome Extension\",\n          description: \"Premium Chrome extension for photography job hunting on OCUS (Ubereats/Foodora deliveries)\",\n          price: \"500.00\",\n          beforePrice: null,\n          currency: \"eur\"\n        };\n      }\n      \n      return productList[0];\n    } catch (error) {\n      console.error(\"Error fetching current product:\", error);\n      throw error;\n    }\n  }\n\n  // Countdown Banner Management\n  async createCountdownBanner(bannerData: any): Promise<any> {\n    try {\n      const [newBanner] = await this.db\n        .insert(countdownBanners)\n        .values(bannerData)\n        .returning();\n      return newBanner;\n    } catch (error) {\n      console.error(\"Error creating countdown banner:\", error);\n      throw error;\n    }\n  }\n\n  async updateCountdownBanner(id: number, bannerData: any): Promise<any> {\n    try {\n      const [updatedBanner] = await this.db\n        .update(countdownBanners)\n        .set({ ...bannerData, updatedAt: new Date().getTime() })\n        .where(eq(countdownBanners.id, id))\n        .returning();\n      return updatedBanner;\n    } catch (error) {\n      console.error(\"Error updating countdown banner:\", error);\n      throw error;\n    }\n  }\n\n  async getActiveCountdownBanner(): Promise<any> {\n    try {\n      const [activeBanner] = await this.db\n        .select()\n        .from(countdownBanners)\n        .where(eq(countdownBanners.isEnabled, true))\n        .orderBy(countdownBanners.priority, countdownBanners.createdAt)\n        .limit(1);\n      \n      // Check if banner has expired\n      if (activeBanner && new Date(activeBanner.endDateTime) <= new Date()) {\n        // Disable expired banner\n        await this.db\n          .update(countdownBanners)\n          .set({ isEnabled: false })\n          .where(eq(countdownBanners.id, activeBanner.id));\n        return null;\n      }\n      \n      return activeBanner || null;\n    } catch (error) {\n      console.error(\"Error fetching active countdown banner:\", error);\n      throw error;\n    }\n  }\n\n  async getAllCountdownBanners(): Promise<any[]> {\n    try {\n      return await this.db\n        .select()\n        .from(countdownBanners)\n        .orderBy(countdownBanners.createdAt);\n    } catch (error) {\n      console.error(\"Error fetching countdown banners:\", error);\n      throw error;\n    }\n  }\n\n  async deleteCountdownBanner(id: number): Promise<void> {\n    try {\n      await this.db.delete(countdownBanners).where(eq(countdownBanners.id, id));\n    } catch (error) {\n      console.error(\"Error deleting countdown banner:\", error);\n      throw error;\n    }\n  }\n\n  // Announcement Badge Management\n  async getActiveAnnouncementBadge(): Promise<AnnouncementBadge | null> {\n    try {\n      const [activeBadge] = await this.db\n        .select()\n        .from(announcementBadges)\n        .where(eq(announcementBadges.isEnabled, true))\n        .orderBy(desc(announcementBadges.priority), desc(announcementBadges.createdAt))\n        .limit(1);\n      \n      return activeBadge || null;\n    } catch (error) {\n      console.error(\"Error fetching active announcement badge:\", error);\n      throw error;\n    }\n  }\n\n  async getAllAnnouncementBadges(): Promise<AnnouncementBadge[]> {\n    try {\n      return await this.db\n        .select()\n        .from(announcementBadges)\n        .orderBy(desc(announcementBadges.createdAt));\n    } catch (error) {\n      console.error(\"Error fetching announcement badges:\", error);\n      throw error;\n    }\n  }\n\n  async createAnnouncementBadge(data: InsertAnnouncementBadge): Promise<AnnouncementBadge> {\n    try {\n      const [badge] = await this.db\n        .insert(announcementBadges)\n        .values(data)\n        .returning();\n      return badge;\n    } catch (error) {\n      console.error(\"Error creating announcement badge:\", error);\n      throw error;\n    }\n  }\n\n  async updateAnnouncementBadge(id: number, data: Partial<InsertAnnouncementBadge>): Promise<AnnouncementBadge> {\n    try {\n      const [badge] = await this.db\n        .update(announcementBadges)\n        .set({ ...data, updatedAt: new Date().getTime() })\n        .where(eq(announcementBadges.id, id))\n        .returning();\n      return badge;\n    } catch (error) {\n      console.error(\"Error updating announcement badge:\", error);\n      throw error;\n    }\n  }\n\n  async deleteAnnouncementBadge(id: number): Promise<void> {\n    try {\n      await this.db.delete(announcementBadges).where(eq(announcementBadges.id, id));\n    } catch (error) {\n      console.error(\"Error deleting announcement badge:\", error);\n      throw error;\n    }\n  }\n\n  async deleteCustomer(id: number | string): Promise<void> {\n    const customerId = typeof id === 'string' ? parseInt(id) : id;\n    // also delete related data\n    await this.db.delete(tickets).where(eq(tickets.customerEmail, (await this.getCustomer(customerId))?.email || ''));\n    await this.db.delete(customers).where(eq(customers.id, customerId));\n  }\n\n  // Lottery Scratch Activation System\n  generateUniqueActivationKey(): string {\n    // Use Web Crypto API compatible method\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  async revealActivationKey(customerId: string): Promise<Customer> {\n    const [customer] = await this.db\n      .update(customers)\n      .set({ \n        activationKeyRevealed: true,\n        extensionActivated: true, // Activate extension after payment\n        updatedAt: new Date().getTime()\n      })\n      .where(eq(customers.id, parseInt(customerId)))\n      .returning();\n    return customer;\n  }\n\n  // Activation Code System Implementation\n  async createActivationCode(codeData: InsertActivationCode): Promise<ActivationCode> {\n    const [code] = await this.db\n      .insert(activationCodes)\n      .values(codeData)\n      .returning();\n    return code;\n  }\n\n  async getActivationCode(code: string): Promise<ActivationCode | undefined> {\n    const [activation] = await this.db\n      .select()\n      .from(activationCodes)\n      .where(eq(activationCodes.code, code));\n    return activation || undefined;\n  }\n\n  async getActivationCodeByVersionToken(versionToken: string): Promise<ActivationCode | undefined> {\n    const [activation] = await this.db\n      .select()\n      .from(activationCodes)\n      .where(eq(activationCodes.versionToken, versionToken));\n    return activation || undefined;\n  }\n\n  async activateCode(code: string, deviceId: string, ipAddress: string): Promise<ActivationCode> {\n    const activation = await this.getActivationCode(code);\n    if (!activation) {\n      throw new Error('Invalid activation code');\n    }\n\n    if (!activation.isActive) {\n      throw new Error('Activation code is inactive');\n    }\n\n    if (activation.expiresAt && new Date().getTime() > activation.expiresAt) {\n      throw new Error('Activation code has expired');\n    }\n\n    if (activation.activationCount >= activation.maxActivations) {\n      throw new Error('Activation code has reached maximum activations');\n    }\n\n    const [updated] = await this.db\n      .update(activationCodes)\n      .set({\n        activatedAt: activation.activatedAt || new Date().getTime(),\n        activationCount: activation.activationCount + 1,\n        deviceId: deviceId,\n        ipAddress: ipAddress\n      })\n      .where(eq(activationCodes.code, code))\n      .returning();\n\n    return updated;\n  }\n\n  async getCustomerActivationCodes(customerId: string): Promise<ActivationCode[]> {\n    return await this.db\n      .select()\n      .from(activationCodes)\n      .where(eq(activationCodes.customerId, parseInt(customerId)))\n      .orderBy(desc(activationCodes.createdAt));\n  }\n\n  async deactivateCode(code: string): Promise<ActivationCode> {\n    const [updated] = await this.db\n      .update(activationCodes)\n      .set({ isActive: false })\n      .where(eq(activationCodes.code, code))\n      .returning();\n    return updated;\n  }\n\n  async generateActivationCode(customerId: string, orderId?: number): Promise<ActivationCode> {\n    // Generate unique code\n    let code: string;\n    let exists = true;\n    while (exists) {\n      code = this.generateUniqueActivationKey();\n      const existing = await this.getActivationCode(code);\n      exists = !!existing;\n    }\n\n    // Generate version token (UUID)\n    const versionToken = crypto.randomUUID();\n\n    const codeData: InsertActivationCode = {\n      code: code!,\n      customerId: parseInt(customerId),\n      orderId,\n      versionToken,\n      maxActivations: 1,\n      isActive: true,\n      expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).getTime() // 1 year expiry\n    };\n\n    return await this.createActivationCode(codeData);\n  }\n\n\n\n  async getActivationKeyByOrderId(orderId: number): Promise<ActivationKey | null> {\n    const [key] = await this.db.select().from(activationKeys).where(eq(activationKeys.orderId, orderId));\n    return key || null;\n  }\n\n  // Extension Management\n  async createExtensionDownload(download: InsertExtensionDownload): Promise<ExtensionDownload> {\n    const [newDownload] = await this.db\n      .insert(extensionDownloads)\n      .values({\n        ...download,\n        downloadToken: download.downloadToken || crypto.randomUUID()\n      })\n      .returning();\n    return newDownload;\n  }\n\n  async getExtensionDownload(token: string): Promise<ExtensionDownload | undefined> {\n    const [download] = await this.db\n      .select()\n      .from(extensionDownloads)\n      .where(eq(extensionDownloads.downloadToken, token));\n    return download || undefined;\n  }\n\n  async incrementExtensionDownloadCount(id: number): Promise<ExtensionDownload> {\n    const [download] = await this.db\n      .update(extensionDownloads)\n      .set({ \n        downloadCount: sql`${extensionDownloads.downloadCount} + 1`\n      })\n      .where(eq(extensionDownloads.id, id))\n      .returning();\n    return download;\n  }\n\n  async getExtensionDownloads(customerId: string | number): Promise<ExtensionDownload[]> {\n    const id = typeof customerId === 'string' ? parseInt(customerId) : customerId;\n    return await this.db\n      .select()\n      .from(extensionDownloads)\n      .where(eq(extensionDownloads.customerId, id))\n      .orderBy(desc(extensionDownloads.createdAt));\n  }\n\n  async getCustomerExtensionDownloads(customerId: string): Promise<ExtensionDownload[]> {\n    return await this.getExtensionDownloads(customerId);\n  }\n\n  // Social Authentication Methods\n\n  // Customer Extension Management\n  async blockCustomer(customerId: number | string, reason: string): Promise<Customer> {\n    const id = typeof customerId === 'string' ? parseInt(customerId) : customerId;\n    const [customer] = await this.db\n      .update(customers)\n      .set({\n        isBlocked: true,\n        blockedReason: reason,\n        blockedAt: new Date().getTime(),\n        updatedAt: new Date().getTime()\n      })\n      .where(eq(customers.id, id))\n      .returning();\n    return customer;\n  }\n\n  async unblockCustomer(customerId: number | string): Promise<Customer> {\n    const id = typeof customerId === 'string' ? parseInt(customerId) : customerId;\n    const [customer] = await this.db\n      .update(customers)\n      .set({\n        isBlocked: false,\n        blockedReason: null,\n        blockedAt: null,\n        updatedAt: new Date().getTime()\n      })\n      .where(eq(customers.id, id))\n      .returning();\n    return customer;\n  }\n\n  async generateExtensionActivationKey(customerId: number | string): Promise<Customer> {\n    const id = typeof customerId === 'string' ? parseInt(customerId) : customerId;\n    const activationKey = crypto.randomUUID().replace(/-/g, '').substring(0, 20).toUpperCase();\n    const [customer] = await this.db\n      .update(customers)\n      .set({\n        activationKey,\n        isActivated: true,\n        updatedAt: new Date().getTime()\n      })\n      .where(eq(customers.id, id))\n      .returning();\n    return customer;\n  }\n\n  async activateExtension(customerId: string, activationKey: string): Promise<Customer> {\n    const [customer] = await this.db\n      .update(customers)\n      .set({\n        extensionActivated: true,\n        extensionLastUsed: new Date().getTime(),\n        updatedAt: new Date().getTime()\n      })\n      .where(and(\n        eq(customers.id, parseInt(customerId)),\n        eq(customers.activationKey, activationKey),\n        eq(customers.isActivated, true)\n      ))\n      .returning();\n    return customer;\n  }\n\n  async recordExtensionUsageLog(usage: InsertExtensionUsageLog): Promise<ExtensionUsageLog> {\n    // Update customer trial usage\n    await this.db\n      .update(customers)\n      .set({\n        extensionTrialJobsUsed: sql`${customers.extensionTrialJobsUsed} + ${usage.jobsUsed}`,\n        extensionLastUsed: new Date().getTime(),\n        updatedAt: new Date().getTime()\n      })\n      .where(eq(customers.id, typeof usage.customerId === 'string' ? parseInt(usage.customerId) : usage.customerId));\n\n    const [usageLog] = await this.db\n      .insert(extensionUsageLogs)\n      .values(usage)\n      .returning();\n    return usageLog;\n  }\n\n  // Extension installation methods\n  async createExtensionInstallation(data: InsertExtensionInstallation): Promise<ExtensionInstallation> {\n    const [installation] = await this.db\n      .insert(extensionInstallations)\n      .values(data)\n      .returning();\n    return installation;\n  }\n\n  async getExtensionInstallation(installationId: string): Promise<ExtensionInstallation | null> {\n    const [installation] = await this.db\n      .select()\n      .from(extensionInstallations)\n      .where(eq(extensionInstallations.installationId, installationId));\n    return installation || null;\n  }\n\n  async updateInstallationLastSeen(installationId: string): Promise<void> {\n    await this.db\n      .update(extensionInstallations)\n      .set({ lastSeenAt: new Date().getTime() })\n      .where(eq(extensionInstallations.installationId, installationId));\n  }\n\n  async getUserInstallations(userId: number): Promise<ExtensionInstallation[]> {\n    return await this.db\n      .select()\n      .from(extensionInstallations)\n      .where(eq(extensionInstallations.userId, userId));\n  }\n\n  // Enhanced activation code methods\n  async createActivationCodeForUser(userId: number, installationId: string, orderId?: number): Promise<ActivationCode> {\n    const code = `OCUS-${Date.now()}-${crypto.randomBytes(4).toString('hex').toUpperCase()}`;\n    const versionToken = crypto.randomUUID();\n    \n    const [activationCode] = await this.db\n      .insert(activationCodes)\n      .values({\n        code,\n        userId,\n        orderId,\n        installationId,\n        versionToken,\n        maxActivations: 1,\n        activationCount: 0,\n        isActive: true,\n        dailyValidationCount: 0,\n        isRevoked: false\n      })\n      .returning();\n    return activationCode;\n  }\n\n  async validateActivationCodeForInstallation(code: string, installationId: string): Promise<{ valid: boolean; message: string; activationCode?: ActivationCode }> {\n    const [activationCode] = await this.db\n      .select()\n      .from(activationCodes)\n      .where(eq(activationCodes.code, code));\n\n    if (!activationCode) {\n      return { valid: false, message: \"Invalid activation code\" };\n    }\n\n    if (activationCode.isRevoked) {\n      return { valid: false, message: \"Activation code has been revoked\" };\n    }\n\n    if (activationCode.expiresAt && new Date().getTime() > activationCode.expiresAt) {\n      return { valid: false, message: \"Activation code has expired\" };\n    }\n\n    if (!activationCode.isActive) {\n      return { valid: false, message: \"Activation code is inactive\" };\n    }\n\n    // Check if code is already bound to a different installation\n    if (activationCode.installationId && activationCode.installationId !== installationId) {\n      return { valid: false, message: \"Activation code is already bound to another installation\" };\n    }\n\n    // Check if we've exceeded max activations\n    if (activationCode.activationCount >= activationCode.maxActivations) {\n      return { valid: false, message: \"Activation code has been used maximum number of times\" };\n    }\n\n    // Daily validation rate limiting (100 per day)\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const lastValidationDate = activationCode.lastValidationDate ? new Date(activationCode.lastValidationDate) : null;\n    if (lastValidationDate) {\n        lastValidationDate.setHours(0, 0, 0, 0);\n    }\n    \n    let dailyCount = activationCode.dailyValidationCount;\n    if (!lastValidationDate || lastValidationDate.getTime() !== today.getTime()) {\n      dailyCount = 0; // Reset daily count\n    }\n\n    if (dailyCount >= 100) {\n      return { valid: false, message: \"Daily validation limit exceeded\" };\n    }\n\n    // Update validation count and bind to installation if not already bound\n    await this.db\n      .update(activationCodes)\n      .set({\n        installationId: activationCode.installationId || installationId,\n        activationCount: activationCode.installationId ? activationCode.activationCount : activationCode.activationCount + 1,\n        activatedAt: activationCode.activatedAt || new Date().getTime(),\n        dailyValidationCount: dailyCount + 1,\n        lastValidationDate: new Date().getTime()\n      })\n      .where(eq(activationCodes.id, activationCode.id));\n\n    return { valid: true, message: \"Activation code is valid\", activationCode };\n  }\n\n  async getActivationCodeByInstallation(installationId: string): Promise<ActivationCode | null> {\n    const [activationCode] = await this.db\n      .select()\n      .from(activationCodes)\n      .where(eq(activationCodes.installationId, installationId));\n    return activationCode || null;\n  }\n\n  async revokeActivationCode(codeId: number, reason?: string): Promise<void> {\n    await this.db\n      .update(activationCodes)\n      .set({\n        isRevoked: true,\n        isActive: false\n      })\n      .where(eq(activationCodes.id, codeId));\n  }\n\n  async getCustomerTrialUsage(customerId: string): Promise<number> {\n    const [customer] = await this.db\n      .select({ extensionTrialJobsUsed: customers.extensionTrialJobsUsed })\n      .from(customers)\n      .where(eq(customers.id, parseInt(customerId)));\n    return customer?.extensionTrialJobsUsed || 0;\n  }\n\n  async canUseExtension(customerId: number | string): Promise<{ canUse: boolean; reason?: string; trialUsed?: number; isBlocked?: boolean }> {\n    const id = typeof customerId === 'string' ? parseInt(customerId) : customerId;\n    const [customer] = await this.db\n      .select()\n      .from(customers)\n      .where(eq(customers.id, id));\n\n    if (!customer) {\n      return { canUse: false, reason: 'Customer not found' };\n    }\n\n    if (customer.isBlocked) {\n      return { \n        canUse: false, \n        reason: customer.blockedReason || 'Account blocked',\n        isBlocked: true \n      };\n    }\n\n    // If extension is activated (paid), allow usage\n    if (customer.extensionActivated) {\n      return { canUse: true };\n    }\n\n    // Check trial limits\n    if (customer.extensionTrialJobsUsed >= customer.extensionTrialLimit) {\n      return { \n        canUse: false, \n        reason: 'Trial limit exceeded. Please purchase activation code.',\n        trialUsed: customer.extensionTrialJobsUsed \n      };\n    }\n\n    return { \n      canUse: true, \n      trialUsed: customer.extensionTrialJobsUsed \n    };\n  }\n\n  // Admin Customer Management\n  async getAllCustomersForAdmin(): Promise<Customer[]> {\n    return await this.db\n      .select()\n      .from(customers)\n      .orderBy(desc(customers.createdAt));\n  }\n\n  async getCustomerActivations(): Promise<{ customer: Customer; downloads: ExtensionDownload[] }[]> {\n    const customersList = await this.getAllCustomersForAdmin();\n    const result = [];\n\n    for (const customer of customersList) {\n      const downloads = await this.getCustomerExtensionDownloads(customer.id.toString());\n      result.push({ customer, downloads });\n    }\n\n    return result;\n  }\n\n  // Mission Tracking Implementation\n  async createMission(mission: InsertMission): Promise<Mission> {\n    const [newMission] = await this.db\n      .insert(missions)\n      .values({\n        ...mission,\n        createdAt: new Date().getTime(),\n        updatedAt: new Date().getTime()\n      })\n      .returning();\n    return newMission;\n  }\n\n  async getMission(missionId: string): Promise<Mission | undefined> {\n    const [mission] = await this.db\n      .select()\n      .from(missions)\n      .where(eq(missions.missionId, missionId));\n    return mission || undefined;\n  }\n\n  async updateMissionStatus(missionId: string, status: string, timestamp?: Date): Promise<Mission> {\n    const updateData: any = { \n      status, \n      updatedAt: new Date().getTime() \n    };\n\n    // Set specific timestamp fields based on status\n    switch (status) {\n      case 'assignment_accepted':\n        updateData.assignmentAcceptedAt = (timestamp || new Date()).getTime();\n        break;\n      case 'appointment_confirmation':\n        updateData.appointmentConfirmedAt = (timestamp || new Date()).getTime();\n        break;\n      case 'media_upload':\n        updateData.mediaUploadedAt = (timestamp || new Date()).getTime();\n        break;\n      case 'billing_payment':\n        updateData.billingCompletedAt = (timestamp || new Date()).getTime();\n        break;\n      case 'assignment_complete':\n        updateData.assignmentCompletedAt = (timestamp || new Date()).getTime();\n        break;\n    }\n\n    const [updatedMission] = await this.db\n      .update(missions)\n      .set(updateData)\n      .where(eq(missions.missionId, missionId))\n      .returning();\n    return updatedMission;\n  }\n\n  async getUserMissions(userId: string): Promise<Mission[]> {\n    return await this.db\n      .select()\n      .from(missions)\n      .where(eq(missions.userId, userId))\n      .orderBy(desc(missions.createdAt));\n  }\n\n  async getCustomerMissions(customerId: number): Promise<Mission[]> {\n    return await this.db\n      .select()\n      .from(missions)\n      .where(eq(missions.customerId, customerId))\n      .orderBy(desc(missions.createdAt));\n  }\n\n  // User Trial Management Implementation\n  async createUserTrial(trial: InsertUserTrial): Promise<UserTrial> {\n    const [newTrial] = await this.db\n      .insert(userTrials)\n      .values({\n        ...trial,\n        createdAt: new Date().getTime(),\n        updatedAt: new Date().getTime()\n      })\n      .returning();\n    return newTrial;\n  }\n\n  async getUserTrial(userId: string): Promise<UserTrial | undefined> {\n    const [trial] = await this.db\n      .select()\n      .from(userTrials)\n      .where(eq(userTrials.userId, userId));\n    return trial || undefined;\n  }\n\n\n\n\n\n  // Trial usage methods for cross-browser tracking\n  async getTrialUsage(trialKey: string): Promise<TrialUsage | undefined> {\n    const [usage] = await this.db.select().from(trialUsage).where(eq(trialUsage.trialKey, trialKey));\n    return usage || undefined;\n  }\n\n  async createTrialUsage(data: InsertTrialUsage): Promise<TrialUsage> {\n    const [usage] = await this.db.insert(trialUsage).values(data).returning();\n    return usage;\n  }\n\n  async incrementTrialUsage(trialKey: string): Promise<TrialUsage> {\n    const [usage] = await this.db\n      .update(trialUsage)\n      .set({ \n        usageCount: sql`${trialUsage.usageCount} + 1`,\n        lastUsed: new Date().getTime()\n      })\n      .where(eq(trialUsage.trialKey, trialKey))\n      .returning();\n    return usage;\n  }\n\n  async expireTrialUsage(trialKey: string): Promise<TrialUsage> {\n    const [usage] = await this.db\n      .update(trialUsage)\n      .set({ isExpired: true })\n      .where(eq(trialUsage.trialKey, trialKey))\n      .returning();\n    return usage;\n  }\n\n  // Premium Device Management Implementation\n  async getPremiumDevice(userId: string, deviceFingerprint: string): Promise<PremiumDevice | undefined> {\n    const [device] = await this.db\n      .select()\n      .from(premiumDevices)\n      .where(\n        and(\n          eq(premiumDevices.userId, userId),\n          eq(premiumDevices.deviceFingerprint, deviceFingerprint),\n          eq(premiumDevices.isActive, true)\n        )\n      );\n    return device || undefined;\n  }\n\n  async getUserPremiumDevices(userId: string): Promise<PremiumDevice[]> {\n    return await this.db\n      .select()\n      .from(premiumDevices)\n      .where(\n        and(\n          eq(premiumDevices.userId, userId),\n          eq(premiumDevices.isActive, true)\n        )\n      );\n  }\n\n  async registerPremiumDevice(userId: string, deviceFingerprint: string, extensionId: string): Promise<PremiumDevice> {\n    const [device] = await this.db\n      .insert(premiumDevices)\n      .values({\n        userId,\n        deviceFingerprint,\n        extensionId,\n        isActive: true,\n        registeredAt: new Date().getTime(),\n        lastSeenAt: new Date().getTime()\n      })\n      .returning();\n    return device;\n  }\n\n  async deactivatePremiumDevice(deviceFingerprint: string, reason?: string): Promise<PremiumDevice> {\n    const [device] = await this.db\n      .update(premiumDevices)\n      .set({\n        isActive: false,\n        deactivatedAt: new Date().getTime(),\n        deactivationReason: reason || 'User requested deactivation'\n      })\n      .where(eq(premiumDevices.deviceFingerprint, deviceFingerprint))\n      .returning();\n    return device;\n  }\n\n  async updatePremiumDeviceLastSeen(deviceFingerprint: string): Promise<PremiumDevice> {\n    const [device] = await this.db\n      .update(premiumDevices)\n      .set({ lastSeenAt: new Date().getTime() })\n      .where(eq(premiumDevices.deviceFingerprint, deviceFingerprint))\n      .returning();\n    return device;\n  }\n\n  // Dashboard Features Management Implementation\n  async getDashboardFeatures(): Promise<DashboardFeature[]> {\n    return await this.db.select().from(dashboardFeatures);\n  }\n\n  async getDashboardFeature(featureName: string): Promise<DashboardFeature | undefined> {\n    const [feature] = await this.db\n      .select()\n      .from(dashboardFeatures)\n      .where(eq(dashboardFeatures.featureName, featureName));\n    return feature || undefined;\n  }\n\n  async createDashboardFeature(feature: InsertDashboardFeature): Promise<DashboardFeature> {\n    const [newFeature] = await this.db\n      .insert(dashboardFeatures)\n      .values({\n        ...feature,\n        updatedAt: new Date().getTime()\n      })\n      .returning();\n    return newFeature;\n  }\n\n  async updateDashboardFeature(featureName: string, isEnabled: boolean, description?: string): Promise<DashboardFeature> {\n    const [updatedFeature] = await this.db\n      .update(dashboardFeatures)\n      .set({\n        isEnabled,\n        description: description || undefined,\n        updatedAt: new Date().getTime()\n      })\n      .where(eq(dashboardFeatures.featureName, featureName))\n      .returning();\n    return updatedFeature;\n  }\n\n  async initializeDashboardFeatures(): Promise<void> {\n    const defaultFeatures = [\n      { featureName: 'affiliate_program', isEnabled: true, description: 'Enable/disable affiliate program section in user dashboard' },\n      { featureName: 'analytics', isEnabled: true, description: 'Enable/disable analytics section in user dashboard' },\n      { featureName: 'billing', isEnabled: true, description: 'Enable/disable billing section in user dashboard' }\n    ];\n\n    for (const feature of defaultFeatures) {\n      const existing = await this.getDashboardFeature(feature.featureName);\n      if (!existing) {\n        await this.createDashboardFeature(feature);\n      }\n    }\n  }\n\n  // Order Management - Missing method implementation\n  async updateOrder(id: number, updates: Partial<InsertOrder>): Promise<Order> {\n    const [updatedOrder] = await this.db\n      .update(orders)\n      .set({ ...updates })\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  // Missing method implementations for Stripe webhook\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await this.db\n      .insert(orders)\n      .values({ ...order, createdAt: new Date().getTime() })\n      .returning();\n    return newOrder;\n  }\n\n  async getOrderByPaymentIntentId(paymentIntentId: string): Promise<Order | undefined> {\n    const [order] = await this.db\n      .select()\n      .from(orders)\n      .where(eq(orders.paymentIntentId, paymentIntentId));\n    return order || undefined;\n  }\n\n  async updateCustomer(id: number | string, updates: Partial<InsertCustomer>): Promise<Customer> {\n    const customerId = typeof id === 'string' ? parseInt(id) : id;\n    const [updatedCustomer] = await this.db\n      .update(customers)\n      .set({ ...updates, updatedAt: new Date().getTime() })\n      .where(eq(customers.id, customerId))\n      .returning();\n    return updatedCustomer;\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const [newInvoice] = await this.db\n      .insert(invoices)\n      .values({ ...invoice, createdAt: new Date().getTime(), updatedAt: new Date().getTime() })\n      .returning();\n    return newInvoice;\n  }\n\n  async createInvoiceItem(item: InsertInvoiceItem): Promise<InvoiceItem> {\n    const [newItem] = await this.db\n      .insert(invoiceItems)\n      .values({ ...item, createdAt: new Date().getTime() })\n      .returning();\n    return newItem;\n  }\n\n}\n\n// @ts-ignore\nexport const storage = new DatabaseStorage();\n", "/// <reference types=\"@cloudflare/workers-types\" />\n\nimport type { BatchItem } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { NoopLogger } from '~/logger.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport { fillPlaceholders, type Query, sql } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport { SQLiteTransaction } from '~/sqlite-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/sqlite-core/query-builders/select.types.ts';\nimport type {\n\tPreparedQueryConfig as PreparedQueryConfigBase,\n\tSQLiteExecuteMethod,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { mapResultRow } from '~/utils.ts';\n\nexport interface SQLiteD1SessionOptions {\n\tlogger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;\n\nexport class SQLiteD1Session<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteSession<'async', D1Result, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'SQLiteD1Session';\n\n\tprivate logger: Logger;\n\n\tconstructor(\n\t\tprivate client: D1Database,\n\t\tdialect: SQLiteAsyncDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tprivate options: SQLiteD1SessionOptions = {},\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t}\n\n\tprepareQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t): D1PreparedQuery {\n\t\tconst stmt = this.client.prepare(query.sql);\n\t\treturn new D1PreparedQuery(\n\t\t\tstmt,\n\t\t\tquery,\n\t\t\tthis.logger,\n\t\t\tfields,\n\t\t\texecuteMethod,\n\t\t\tisResponseInArrayMode,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\tasync batch<T extends BatchItem<'sqlite'>[] | readonly BatchItem<'sqlite'>[]>(queries: T) {\n\t\tconst preparedQueries: PreparedQuery[] = [];\n\t\tconst builtQueries: D1PreparedStatement[] = [];\n\n\t\tfor (const query of queries) {\n\t\t\tconst preparedQuery = query._prepare();\n\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\tpreparedQueries.push(preparedQuery);\n\t\t\tif (builtQuery.params.length > 0) {\n\t\t\t\tbuiltQueries.push((preparedQuery as D1PreparedQuery).stmt.bind(...builtQuery.params));\n\t\t\t} else {\n\t\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\t\tbuiltQueries.push(\n\t\t\t\t\tthis.client.prepare(builtQuery.sql).bind(...builtQuery.params),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst batchResults = await this.client.batch<any>(builtQueries);\n\t\treturn batchResults.map((result, i) => preparedQueries[i]!.mapResult(result, true));\n\t}\n\n\toverride extractRawAllValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as D1Result).results;\n\t}\n\n\toverride extractRawGetValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as D1Result).results[0];\n\t}\n\n\toverride extractRawValuesValueFromBatchResult(result: unknown): unknown {\n\t\treturn d1ToRawMapping((result as D1Result).results);\n\t}\n\n\toverride async transaction<T>(\n\t\ttransaction: (tx: D1Transaction<TFullSchema, TSchema>) => T | Promise<T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Promise<T> {\n\t\tconst tx = new D1Transaction('async', this.dialect, this, this.schema);\n\t\tawait this.run(sql.raw(`begin${config?.behavior ? ' ' + config.behavior : ''}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait this.run(sql`commit`);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait this.run(sql`rollback`);\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class D1Transaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<'async', D1Result, TFullSchema, TSchema> {\n\tstatic override readonly [entityKind]: string = 'D1Transaction';\n\n\toverride async transaction<T>(transaction: (tx: D1Transaction<TFullSchema, TSchema>) => Promise<T>): Promise<T> {\n\t\tconst savepointName = `sp${this.nestedIndex}`;\n\t\tconst tx = new D1Transaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);\n\t\tawait this.session.run(sql.raw(`savepoint ${savepointName}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait this.session.run(sql.raw(`release savepoint ${savepointName}`));\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * This function was taken from the D1 implementation: https://github.com/cloudflare/workerd/blob/4aae9f4c7ae30a59a88ca868c4aff88bda85c956/src/cloudflare/internal/d1-api.ts#L287\n * It may cause issues with duplicated column names in join queries, which should be fixed on the D1 side.\n * @param results\n * @returns\n */\nfunction d1ToRawMapping(results: any) {\n\tconst rows: unknown[][] = [];\n\tfor (const row of results) {\n\t\tconst entry = Object.keys(row).map((k) => row[k]);\n\t\trows.push(entry);\n\t}\n\treturn rows;\n}\n\nexport class D1PreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<\n\t{ type: 'async'; run: D1Response; all: T['all']; get: T['get']; values: T['values']; execute: T['execute'] }\n> {\n\tstatic override readonly [entityKind]: string = 'D1PreparedQuery';\n\n\t/** @internal */\n\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => unknown;\n\n\t/** @internal */\n\tfields?: SelectedFieldsOrdered;\n\n\t/** @internal */\n\tstmt: D1PreparedStatement;\n\n\tconstructor(\n\t\tstmt: D1PreparedStatement,\n\t\tquery: Query,\n\t\tprivate logger: Logger,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tprivate _isResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t) {\n\t\tsuper('async', executeMethod, query);\n\t\tthis.customResultMapper = customResultMapper;\n\t\tthis.fields = fields;\n\t\tthis.stmt = stmt;\n\t}\n\n\trun(placeholderValues?: Record<string, unknown>): Promise<D1Response> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\treturn this.stmt.bind(...params).run();\n\t}\n\n\tasync all(placeholderValues?: Record<string, unknown>): Promise<T['all']> {\n\t\tconst { fields, query, logger, stmt, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\treturn stmt.bind(...params).all().then(({ results }) => this.mapAllResult(results!));\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues);\n\n\t\treturn this.mapAllResult(rows);\n\t}\n\n\toverride mapAllResult(rows: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\trows = d1ToRawMapping((rows as D1Result).results);\n\t\t}\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn rows;\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper(rows as unknown[][]);\n\t\t}\n\n\t\treturn (rows as unknown[][]).map((row) => mapResultRow(this.fields!, row, this.joinsNotNullableMap));\n\t}\n\n\tasync get(placeholderValues?: Record<string, unknown>): Promise<T['get']> {\n\t\tconst { fields, joinsNotNullableMap, query, logger, stmt, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\treturn stmt.bind(...params).all().then(({ results }) => results![0]);\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues);\n\n\t\tif (!rows[0]) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (customResultMapper) {\n\t\t\treturn customResultMapper(rows) as T['all'];\n\t\t}\n\n\t\treturn mapResultRow(fields!, rows[0], joinsNotNullableMap);\n\t}\n\n\toverride mapGetResult(result: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\tresult = d1ToRawMapping((result as D1Result).results)[0];\n\t\t}\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper([result as unknown[]]) as T['all'];\n\t\t}\n\n\t\treturn mapResultRow(this.fields!, result as unknown[], this.joinsNotNullableMap);\n\t}\n\n\tvalues<T extends any[] = unknown[]>(placeholderValues?: Record<string, unknown>): Promise<T[]> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\treturn this.stmt.bind(...params).raw();\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn this._isResponseInArrayMode;\n\t}\n}\n", "/// <reference types=\"@cloudflare/workers-types\" />\nimport type { D1Database as MiniflareD1Database } from '@miniflare/d1';\nimport type { BatchItem, BatchResponse } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport { DefaultLogger } from '~/logger.ts';\nimport {\n\tcreateTableRelationsHelpers,\n\textractTablesRelationalConfig,\n\ttype ExtractTablesWithRelations,\n\ttype RelationalSchemaConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { BaseSQLiteDatabase } from '~/sqlite-core/db.ts';\nimport { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { DrizzleConfig, IfNotImported } from '~/utils.ts';\nimport { SQLiteD1Session } from './session.ts';\n\nexport type AnyD1Database = IfNotImported<\n\tD1Database,\n\tMiniflareD1Database,\n\tD1Database | IfNotImported<MiniflareD1Database, never, MiniflareD1Database>\n>;\n\nexport class DrizzleD1Database<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n> extends BaseSQLiteDatabase<'async', D1Result, TSchema> {\n\tstatic override readonly [entityKind]: string = 'D1Database';\n\n\t/** @internal */\n\tdeclare readonly session: SQLiteD1Session<TSchema, ExtractTablesWithRelations<TSchema>>;\n\n\tasync batch<U extends BatchItem<'sqlite'>, T extends Readonly<[U, ...U[]]>>(\n\t\tbatch: T,\n\t): Promise<BatchResponse<T>> {\n\t\treturn this.session.batch(batch) as Promise<BatchResponse<T>>;\n\t}\n}\n\nexport function drizzle<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n\tTClient extends AnyD1Database = AnyD1Database,\n>(\n\tclient: TClient,\n\tconfig: DrizzleConfig<TSchema> = {},\n): DrizzleD1Database<TSchema> & {\n\t$client: TClient;\n} {\n\tconst dialect = new SQLiteAsyncDialect({ casing: config.casing });\n\tlet logger;\n\tif (config.logger === true) {\n\t\tlogger = new DefaultLogger();\n\t} else if (config.logger !== false) {\n\t\tlogger = config.logger;\n\t}\n\n\tlet schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined;\n\tif (config.schema) {\n\t\tconst tablesConfig = extractTablesRelationalConfig(\n\t\t\tconfig.schema,\n\t\t\tcreateTableRelationsHelpers,\n\t\t);\n\t\tschema = {\n\t\t\tfullSchema: config.schema,\n\t\t\tschema: tablesConfig.tables,\n\t\t\ttableNamesMap: tablesConfig.tableNamesMap,\n\t\t};\n\t}\n\n\tconst session = new SQLiteD1Session(client as D1Database, dialect, schema, { logger });\n\tconst db = new DrizzleD1Database('async', dialect, session, schema) as DrizzleD1Database<TSchema>;\n\t(<any> db).$client = client;\n\n\treturn db as any;\n}\n", "export * from './driver.ts';\nexport * from './session.ts';\n", "import { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../../lib/context';\nimport { DatabaseStorage } from '../../../server/storage';\nimport { drizzle } from 'drizzle-orm/d1';\nimport * as schema from '../../../shared/schema';\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const url = new URL(request.url);\n    const customerEmail = url.searchParams.get('email');\n    const userId = url.searchParams.get('userId'); // Support both email and userId\n\n    if (!customerEmail && !userId) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Email or userId parameter is required' \n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    if (!env.DB) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Database not available' \n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Initialize database connection and storage\n    const db = drizzle(env.DB, { schema });\n    const storage = new DatabaseStorage(db);\n\n    let orders = [];\n    let customer = null;\n\n    try {\n      if (customerEmail) {\n        // Get customer by email\n        customer = await storage.getCustomerByEmail(customerEmail);\n        if (customer) {\n          // Get orders for this customer\n          orders = await storage.getCustomerOrders(customer.id.toString());\n        }\n        \n        // Also check if there's a user account with this email\n        const user = await storage.getUserByEmail(customerEmail);\n        if (user) {\n          const userOrders = await storage.getUserOrders(user.id);\n          // Merge and deduplicate orders\n          const allOrders = [...orders, ...userOrders];\n          const uniqueOrders = allOrders.filter((order, index, self) => \n            index === self.findIndex(o => o.id === order.id)\n          );\n          orders = uniqueOrders;\n        }\n      } else if (userId) {\n        // Get orders by user ID\n        orders = await storage.getUserOrders(parseInt(userId));\n      }\n\n      // Sort orders by creation date (most recent first)\n      orders.sort((a, b) => {\n        const dateA = a.completedAt || a.createdAt || 0;\n        const dateB = b.completedAt || b.createdAt || 0;\n        return dateB - dateA;\n      });\n\n      console.log(`Found ${orders.length} orders for ${customerEmail || userId}`);\n\n      return new Response(JSON.stringify({\n        success: true,\n        orders: orders,\n        customer: customer ? {\n          id: customer.id,\n          email: customer.email,\n          name: customer.name,\n          subscriptionStatus: customer.subscriptionStatus,\n          extensionActivated: customer.extensionActivated\n        } : null\n      }), {\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n\n    } catch (dbError) {\n      console.error('Database error in user-orders:', dbError);\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Database query failed',\n        details: String(dbError)\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n  } catch (error) {\n    console.error('Error fetching user orders:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Failed to fetch orders',\n      details: String(error)\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n};\n", "export async function onRequestGet(context: any) {\n  const { env } = context;\n  \n  try {\n    // Fetch the current product pricing from D1 database\n    const selectQuery = `SELECT * FROM products WHERE id = 1 AND isActive = 1`;\n    const result = await env.DB.prepare(selectQuery).first();\n\n    if (!result) {\n      // Return default pricing if no product found\n      return new Response(JSON.stringify({\n        id: 1,\n        name: \"OCUS Job Hunter Extension\",\n        price: \"250.00\",\n        beforePrice: null\n      }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        }\n      });\n    }\n\n    // Return the product pricing\n    return new Response(JSON.stringify({\n      id: result.id,\n      name: result.name,\n      price: result.price.toString(),\n      beforePrice: result.beforePrice ? result.beforePrice.toString() : null\n    }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\"Error fetching pricing:\", error);\n    return new Response(JSON.stringify({ \n      message: \"Error fetching pricing: \" + error.message \n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n      }\n    });\n  }\n}\n\nexport async function onRequestOptions(context: any) {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    }\n  });\n}\n", "interface Env {\n  DB: D1Database;\n}\n\nexport const onRequestGet: PagesFunction<Env> = async (context) => {\n  try {\n    const { params, request } = context;\n    const downloadType = params.type as string; // 'premium' or 'trial'\n    \n    // Get user info from request headers or query params\n    const url = new URL(request.url);\n    const userId = url.searchParams.get('userId') || '1'; // Default for demo\n    \n    if (!['premium', 'trial'].includes(downloadType)) {\n      return new Response(JSON.stringify({ error: 'Invalid download type' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Check if user has premium access for premium downloads\n    if (downloadType === 'premium') {\n      const userQuery = `SELECT is_premium FROM users WHERE id = ?`;\n      const userResult = await context.env.DB.prepare(userQuery).bind(userId).first();\n      \n      if (!userResult?.is_premium) {\n        return new Response(JSON.stringify({ error: 'Premium access required' }), {\n          status: 403,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    }\n\n    // Log the download\n    const downloadLogQuery = `\n      INSERT INTO user_downloads (user_id, download_type, version, ip_address, user_agent)\n      VALUES (?, ?, ?, ?, ?)\n    `;\n    \n    const clientIP = request.headers.get('CF-Connecting-IP') || \n                    request.headers.get('X-Forwarded-For') || \n                    'unknown';\n    const userAgent = request.headers.get('User-Agent') || 'unknown';\n    \n    await context.env.DB.prepare(downloadLogQuery)\n      .bind(userId, downloadType, 'v2.1.9', clientIP, userAgent)\n      .run();\n\n    // Create a mock file response (in production, this would serve actual files)\n    const fileName = downloadType === 'premium' \n      ? 'ocus-job-hunter-premium-v2.1.9-STABLE.zip'\n      : 'ocus-job-hunter-trial-v2.1.9-STABLE.zip';\n      \n    const mockFileContent = `Mock ${downloadType} extension file content for ${fileName}`;\n    \n    return new Response(mockFileContent, {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/zip',\n        'Content-Disposition': `attachment; filename=\"${fileName}\"`,\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error handling extension download:', error);\n    return new Response(JSON.stringify({ error: 'Download failed' }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "export async function onRequestPost(context: any) {\n  const { request, env, params } = context;\n  const orderId = params.orderId;\n\n  // CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n  };\n\n  // Handle preflight requests\n  if (request.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    // Check if order exists and is completed\n    const orderQuery = `\n      SELECT \n        id, customer_id, customer_email, customer_name, \n        product_id, final_amount, currency, payment_method,\n        status, completed_at, created_at\n      FROM orders \n      WHERE id = ? AND status = 'completed'\n    `;\n    \n    const orderResult = await env.DB.prepare(orderQuery).bind(orderId).first();\n    \n    if (!orderResult) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Order not found or not completed' \n      }), {\n        status: 404,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n\n    // Check if invoice already exists\n    const existingInvoiceQuery = `\n      SELECT id FROM invoices WHERE order_id = ?\n    `;\n    \n    const existingInvoice = await env.DB.prepare(existingInvoiceQuery).bind(orderId).first();\n    \n    if (existingInvoice) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Invoice already exists for this order' \n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n\n    // Generate invoice number\n    const invoiceNumber = `INV-${Date.now()}-${orderId}`;\n    \n    // Calculate tax (assuming 0% for now, can be configured)\n    const amount = parseFloat(orderResult.final_amount);\n    const taxRate = 0.0; // 0% tax\n    const taxAmount = amount * taxRate;\n    \n    // Create invoice\n    const createInvoiceQuery = `\n      INSERT INTO invoices (\n        invoice_number, order_id, customer_id, amount, currency,\n        tax_amount, status, invoice_date, paid_at, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `;\n    \n    const now = new Date().toISOString();\n    \n    const invoiceResult = await env.DB.prepare(createInvoiceQuery)\n      .bind(\n        invoiceNumber,\n        orderId,\n        orderResult.customer_id,\n        orderResult.final_amount,\n        orderResult.currency,\n        taxAmount.toString(),\n        'paid', // Since order is completed, invoice is paid\n        orderResult.completed_at || now,\n        orderResult.completed_at || now,\n        now\n      )\n      .run();\n\n    if (!invoiceResult.success) {\n      throw new Error('Failed to create invoice');\n    }\n\n    return new Response(JSON.stringify({ \n      success: true, \n      invoiceId: invoiceResult.meta.last_row_id,\n      invoiceNumber: invoiceNumber,\n      message: 'Invoice created successfully' \n    }), {\n      status: 201,\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\n    });\n\n  } catch (error) {\n    console.error('Error creating invoice:', error);\n    return new Response(JSON.stringify({ \n      success: false, \n      error: 'Failed to create invoice' \n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\n    });\n  }\n}\n", "import { TicketStorage, Env } from '../../lib/db';\n\ninterface TicketUpdatePayload {\n  status?: string;\n}\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestPatch = async ({ request, params, env }: { request: Request; params: { id: string }; env: Env }) => {\n  try {\n    const ticketId = Number(params.id);\n    const expressBase: string | undefined = env?.EXPRESS_API_BASE;\n    if (expressBase) {\n      const base = expressBase.replace(/\\/$/, \"\");\n      const url = `${base}/api/tickets/${ticketId}`;\n      const headers: Record<string, string> = {};\n      const cookie = request.headers.get('cookie');\n      const ct = request.headers.get('content-type');\n      const auth = request.headers.get('authorization');\n      if (cookie) headers['cookie'] = cookie;\n      if (ct) headers['content-type'] = ct;\n      if (auth) headers['authorization'] = auth;\n      const proxied = await fetch(url, { method: 'PATCH', headers, body: request.body, redirect: 'manual' });\n      const respHeaders = new Headers(proxied.headers);\n      const setCookie = respHeaders.get('set-cookie');\n      if (setCookie) {\n        const rewritten = setCookie.replace(/;\\s*Domain=[^;]+/i, '');\n        respHeaders.delete('set-cookie');\n        respHeaders.append('set-cookie', rewritten);\n      }\n      return new Response(proxied.body, { status: proxied.status, headers: respHeaders });\n    }\n    const updates = await request.json() as TicketUpdatePayload;\n    const storage = new TicketStorage(env.DB);\n\n    const ticket = await storage.getTicketById(ticketId);\n    if (!ticket) return json({ success: false, message: 'Ticket not found' }, 404);\n\n    if (updates.status) {\n      await storage.updateTicketStatus(ticketId, updates.status);\n    }\n    \n    const updatedTicket = await storage.getTicketById(ticketId);\n    return json({ success: true, ticket: updatedTicket });\n  } catch (error) {\n    console.error('Failed to update ticket:', error);\n    const message = error instanceof Error ? error.message : 'An unknown error occurred';\n    return json({ success: false, message }, 500);\n  }\n};\n\nexport const onRequestPut = async (ctx: any) => {\n  // Reuse proxy and fallback logic from PATCH\n  return onRequestPatch(ctx);\n};\n\nexport const onRequestDelete = async ({ request, params, env }: { request: Request; params: { id: string }; env: Env }) => {\n  try {\n    const ticketId = Number(params.id);\n    const expressBase: string | undefined = env?.EXPRESS_API_BASE;\n    if (expressBase) {\n      const base = expressBase.replace(/\\/$/, \"\");\n      const url = `${base}/api/tickets/${ticketId}`;\n      const headers: Record<string, string> = {};\n      const cookie = request.headers.get('cookie');\n      const auth = request.headers.get('authorization');\n      if (cookie) headers['cookie'] = cookie;\n      if (auth) headers['authorization'] = auth;\n      const proxied = await fetch(url, { method: 'DELETE', headers, redirect: 'manual' });\n      const respHeaders = new Headers(proxied.headers);\n      const setCookie = respHeaders.get('set-cookie');\n      if (setCookie) {\n        const rewritten = setCookie.replace(/;\\s*Domain=[^;]+/i, '');\n        respHeaders.delete('set-cookie');\n        respHeaders.append('set-cookie', rewritten);\n      }\n      return new Response(proxied.body, { status: proxied.status, headers: respHeaders });\n    }\n    const storage = new TicketStorage(env.DB);\n    \n    const ticket = await storage.getTicketById(ticketId);\n    if (!ticket) {\n      return json({ success: false, message: 'Ticket not found' }, 404);\n    }\n    \n    await storage.deleteTicket(ticketId);\n    return json({ success: true, message: `Ticket ${ticketId} deleted` });\n  } catch (error) {\n    console.error('Failed to delete ticket:', error);\n    const message = error instanceof Error ? error.message : 'An unknown error occurred';\n    return json({ success: false, message }, 500);\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'PUT, PATCH, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import { Env } from '../lib/context';\n\n// Type for the data fetched from the database\ninterface DbAuthSettings {\n  google_enabled: number;\n  facebook_enabled: number;\n  github_enabled: number;\n  recaptcha_enabled: number;\n  recaptcha_customer_enabled: number;\n  recaptcha_admin_enabled: number;\n  recaptcha_site_key: string | null;\n  google_client_id: string | null;\n  facebook_app_id: string | null;\n  github_client_id: string | null;\n}\n\n// Type for the JSON response sent to the client\ninterface ApiAuthSettings {\n  googleEnabled: boolean;\n  facebookEnabled: boolean;\n  githubEnabled: boolean;\n  recaptchaEnabled: boolean;\n  recaptchaCustomerEnabled: boolean;\n  recaptchaAdminEnabled: boolean;\n  recaptchaSiteKey: string;\n  googleClientId: string;\n  facebookAppId: string;\n  githubClientId: string;\n}\n\nconst defaultSettings: ApiAuthSettings = {\n  googleEnabled: false,\n  facebookEnabled: false,\n  githubEnabled: false,\n  recaptchaEnabled: false,\n  recaptchaCustomerEnabled: false,\n  recaptchaAdminEnabled: false,\n  recaptchaSiteKey: '',\n  googleClientId: '',\n  facebookAppId: '',\n  githubClientId: '',\n};\n\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  try {\n    const dbQuery = 'SELECT * FROM auth_settings WHERE id = 1';\n    const dbSettings = await env.DB.prepare(dbQuery).first<DbAuthSettings>();\n\n    const apiSettings: ApiAuthSettings = {\n      ...defaultSettings,\n      ...(dbSettings && {\n        googleEnabled: !!dbSettings.google_enabled,\n        facebookEnabled: !!dbSettings.facebook_enabled,\n        githubEnabled: !!dbSettings.github_enabled,\n        recaptchaEnabled: !!dbSettings.recaptcha_enabled,\n        recaptchaCustomerEnabled: !!dbSettings.recaptcha_customer_enabled,\n        recaptchaAdminEnabled: !!dbSettings.recaptcha_admin_enabled,\n        recaptchaSiteKey: dbSettings.recaptcha_site_key || '',\n        googleClientId: dbSettings.google_client_id || '',\n        facebookAppId: dbSettings.facebook_app_id || '',\n        githubClientId: dbSettings.github_client_id || '',\n      }),\n    };\n\n    return new Response(JSON.stringify(apiSettings), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  } catch (error) {\n    console.error('Failed to fetch auth settings:', error);\n    return new Response(JSON.stringify(defaultSettings), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "import { SettingsStorage } from '../lib/settings-storage';\n\nexport const onRequestPost = async ({ request, env }: any) => {\n  try {\n    const { message, history } = await request.json();\n    \n    // Get OpenAI API key from database settings\n    let openaiApiKey: string | null = null;\n    if (env.DB) {\n      try {\n        const settingsStorage = new SettingsStorage(env.DB);\n        await settingsStorage.initializeSettings();\n        openaiApiKey = await settingsStorage.getOpenAIApiKey();\n      } catch (error) {\n        console.error('Failed to get API key from settings:', error);\n      }\n    }\n    \n    // Fallback to environment variable\n    if (!openaiApiKey) {\n      openaiApiKey = env.OPENAI_API_KEY;\n    }\n    \n    // Check if OpenAI API key is configured\n    if (!openaiApiKey) {\n      return new Response(JSON.stringify({\n        success: false,\n        response: \"I'm currently not configured to respond. Please contact our support team for assistance.\"\n      }), {\n        status: 200,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Prepare conversation context\n    const conversationHistory = history?.map((msg: any) => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text\n    })) || [];\n\n    // System prompt for OCUS Job Hunter assistant\n    const systemPrompt = {\n      role: 'system',\n      content: `You are a helpful AI assistant for the OCUS Job Hunter Chrome Extension. You help users with:\n      \n      - Understanding how to use the job hunting extension\n      - Troubleshooting extension issues\n      - Explaining features and benefits\n      - Providing job search tips and strategies\n      - Answering questions about pricing and subscriptions\n      \n      Keep responses helpful, concise, and focused on job hunting and the extension. If asked about unrelated topics, politely redirect to job hunting assistance.`\n    };\n\n    // Call OpenAI API\n    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${openaiApiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: 'gpt-4o-mini',\n        messages: [\n          systemPrompt,\n          ...conversationHistory,\n          { role: 'user', content: message }\n        ],\n        max_tokens: 500,\n        temperature: 0.7\n      })\n    });\n\n    if (!openaiResponse.ok) {\n      throw new Error(`OpenAI API error: ${openaiResponse.status}`);\n    }\n\n    const openaiData = await openaiResponse.json();\n    const assistantResponse = openaiData.choices[0]?.message?.content || \n      \"I'm having trouble processing your request. Please try again or contact our support team.\";\n\n    return new Response(JSON.stringify({\n      success: true,\n      response: assistantResponse\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error) {\n    console.error('Chat API error:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      response: \"I'm experiencing technical difficulties. Please contact our support team for immediate assistance.\"\n    }), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n", "// Cloudflare Pages Function: /api/complete-stripe-payment\n// Handles Stripe payment completion using the storage layer\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../lib/context';\nimport { DatabaseStorage } from '../../server/storage';\nimport { drizzle } from 'drizzle-orm/d1';\nimport * as schema from '../../shared/schema';\n\ninterface StripePaymentRequest {\n  paymentIntentId: string;\n  customerEmail: string;\n  customerName: string;\n}\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': process.env.NODE_ENV === 'production' ? 'https://jobhunter.one' : '*',\n    },\n  });\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const body = await request.json() as StripePaymentRequest;\n    const { paymentIntentId, customerEmail, customerName } = body;\n\n    if (!paymentIntentId || !customerEmail) {\n      return json({ success: false, message: 'Missing required fields' }, 400);\n    }\n\n    console.log('Stripe payment completion request:', { paymentIntentId, customerEmail, customerName });\n\n    if (!env.DB) {\n      console.error('D1 database not available');\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    // Initialize database connection and storage\n    const db = drizzle(env.DB, { schema });\n    const storage = new DatabaseStorage(db);\n\n    const now = new Date().getTime();\n    const amount = 29.99; // Default amount - should be passed from frontend\n    const currency = 'USD';\n\n    try {\n      // 1. Find or create customer\n      let customer = await storage.getCustomerByEmail(customerEmail);\n      if (!customer) {\n        console.log(`Creating new customer: ${customerEmail}`);\n        customer = await storage.createCustomer({\n          email: customerEmail,\n          name: customerName || customerEmail,\n          extensionActivated: true,\n          subscriptionStatus: 'active',\n          totalSpent: amount.toString(),\n          totalOrders: 1,\n          lastOrderDate: now,\n        });\n      } else {\n        console.log(`Updating existing customer: ${customerEmail}`);\n        await storage.updateCustomer(customer.id, {\n          extensionActivated: true,\n          subscriptionStatus: 'active',\n          totalSpent: (parseFloat(customer.totalSpent) + amount).toString(),\n          totalOrders: customer.totalOrders + 1,\n          lastOrderDate: now,\n          updatedAt: now,\n        });\n      }\n\n      // 2. Update user if exists (for authenticated users)\n      const user = await storage.getUserByEmail(customerEmail);\n      if (user) {\n        console.log(`Updating user premium status: ${customerEmail}`);\n        await storage.updateUser(user.id, {\n          isPremium: true,\n          extensionActivated: true,\n          premiumActivatedAt: now.toString(),\n          totalSpent: (parseFloat(user.totalSpent) + amount).toString(),\n          totalOrders: user.totalOrders + 1,\n        });\n      }\n\n      // 3. Create order record\n      const downloadToken = `download_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const activationCode = `activation_${Date.now()}_${Math.random().toString(36).substr(2, 12)}`;\n      \n      console.log('Creating order record...');\n      const order = await storage.createOrder({\n        userId: user?.id,\n        customerEmail,\n        customerName: customerName || customerEmail,\n        originalAmount: amount.toString(),\n        finalAmount: amount.toString(),\n        currency: currency.toLowerCase(),\n        status: 'completed',\n        paymentMethod: 'stripe',\n        paymentIntentId,\n        downloadToken,\n        activationCode,\n        completedAt: now,\n      });\n\n      console.log(`Order created with ID: ${order.id}`);\n\n      // 4. Create invoice\n      const invoiceNumber = `INV-${order.id}-${Date.now()}`;\n      console.log(`Creating invoice: ${invoiceNumber}`);\n      \n      const invoice = await storage.createInvoice({\n        orderId: order.id,\n        invoiceNumber,\n        customerId: customer.id,\n        customerName: customerName || customerEmail,\n        customerEmail,\n        invoiceDate: now,\n        dueDate: now, // Immediate payment\n        subtotal: amount.toString(),\n        taxAmount: '0.00',\n        discountAmount: '0.00',\n        totalAmount: amount.toString(),\n        currency: currency.toUpperCase(),\n        status: 'paid',\n        paidAt: now,\n      });\n\n      // 5. Create invoice item\n      await storage.createInvoiceItem({\n        invoiceId: invoice.id,\n        productName: 'OCUS Job Hunter Extension',\n        description: 'Premium Chrome Extension for OCUS Job Hunting',\n        quantity: 1,\n        unitPrice: amount.toString(),\n        totalPrice: amount.toString(),\n      });\n\n      // 6. Generate activation key\n      const activationKey = await storage.createActivationKey({\n        activationKey: activationCode,\n        orderId: order.id,\n        userId: user?.id,\n      });\n\n      console.log(`\u2705 Payment completed successfully for ${customerEmail}:`);\n      console.log(`   - Customer ID: ${customer.id}`);\n      console.log(`   - Order ID: ${order.id}`);\n      console.log(`   - Invoice: ${invoiceNumber}`);\n      console.log(`   - Activation Code: ${activationCode}`);\n      console.log(`   - Amount: ${amount} ${currency}`);\n    \n      return json({\n        success: true,\n        message: 'Payment completed successfully - Premium access activated',\n        data: {\n          orderId: order.id,\n          invoiceNumber,\n          activationCode,\n          downloadToken\n        }\n      });\n\n    } catch (error: any) {\n      console.error('Error in complete-stripe-payment:', error);\n      return json({ \n        success: false, \n        message: `Payment completion failed: ${error.message}` \n      }, 500);\n    }\n  } catch (error: any) {\n    console.error('Error parsing request in complete-stripe-payment:', error);\n    return json({ \n      success: false, \n      message: 'Invalid request format' \n    }, 400);\n  }\n};\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': process.env.NODE_ENV === 'production' ? 'https://jobhunter.one' : '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n};\n", "import type { PagesFunction, HeadersInit } from '@cloudflare/workers-types';\nimport { Env } from '../lib/context';\n\ninterface PaymentIntentRequest {\n  amount: number;\n  currency?: string;\n  customerEmail?: string;\n  customerName?: string;\n  productId?: string;\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const body = await request.json() as PaymentIntentRequest;\n    const { amount, currency = 'usd', customerEmail, customerName, productId } = body;\n\n    // Log the received data for debugging\n    console.log('Payment intent request:', { amount, currency, customerEmail, productId });\n\n    // Convert amount to number and validate\n    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : Number(amount);\n    \n    if (!numericAmount || isNaN(numericAmount) || numericAmount <= 0) {\n      console.error('Invalid amount received:', { amount, numericAmount, type: typeof amount });\n      return new Response(JSON.stringify({\n        success: false,\n        error: `Invalid amount: ${amount}. Must be a positive number.`\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        } as HeadersInit\n      });\n    }\n\n    // Get payment settings from database\n    const paymentSettings = await env.DB.prepare(`\n      SELECT key, value FROM settings \n      WHERE key LIKE 'payment_%'\n    `).all();\n\n    const settings: any = {};\n    paymentSettings.results?.forEach((row: any) => {\n      const key = row.key.replace('payment_', '');\n      let value = row.value;\n      if (value === 'true') value = true;\n      if (value === 'false') value = false;\n      settings[key] = value;\n    });\n\n    // Check if Stripe is enabled and configured\n    if (!settings.stripeEnabled || !settings.stripeSecretKey) {\n      console.error('Stripe configuration missing:', {\n        stripeEnabled: settings.stripeEnabled,\n        hasSecretKey: !!settings.stripeSecretKey,\n        hasPublicKey: !!settings.stripePublicKey\n      });\n      \n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Payment processing not configured. Please contact support.',\n        details: 'Stripe payment gateway is not properly configured'\n      }), {\n        status: 503,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        } as HeadersInit\n      });\n    }\n\n    // Validate Stripe keys format\n    if (!settings.stripeSecretKey.startsWith('sk_')) {\n      console.error('Invalid Stripe secret key format');\n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Invalid payment configuration'\n      }), {\n        status: 503,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        } as HeadersInit\n      });\n    }\n\n    // Create Stripe payment intent\n    const stripeResponse = await fetch('https://api.stripe.com/v1/payment_intents', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${settings.stripeSecretKey}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        amount: Math.round(numericAmount * 100).toString(), // Convert to cents\n        currency: currency.toLowerCase(),\n        'automatic_payment_methods[enabled]': 'true',\n        ...(customerEmail && { receipt_email: customerEmail }),\n        ...(productId && { 'metadata[productId]': productId, 'metadata[customerName]': customerName || '' })\n      })\n    });\n\n    if (!stripeResponse.ok) {\n      const errorData = await stripeResponse.text();\n      console.error('Stripe API error:', {\n        status: stripeResponse.status,\n        statusText: stripeResponse.statusText,\n        errorData,\n        requestData: {\n          amount: Math.round(numericAmount * 100),\n          currency: currency.toLowerCase(),\n          hasSecretKey: !!settings.stripeSecretKey,\n          secretKeyPrefix: settings.stripeSecretKey?.substring(0, 12) + '...'\n        }\n      });\n      \n      // Parse Stripe error for more details\n      let stripeError;\n      try {\n        stripeError = JSON.parse(errorData);\n      } catch {\n        stripeError = { message: errorData };\n      }\n      \n      return new Response(JSON.stringify({\n        success: false,\n        error: 'Failed to create payment intent',\n        details: stripeError.error?.message || stripeError.message || 'Unknown Stripe error',\n        stripeErrorType: stripeError.error?.type,\n        stripeErrorCode: stripeError.error?.code\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        } as HeadersInit\n      });\n    }\n\n    const paymentIntent = await stripeResponse.json() as {\n      id: string;\n      client_secret: string;\n      amount: number;\n      currency: string;\n      status: string;\n    };\n\n    // Store payment intent in database for tracking\n    try {\n      await env.DB.prepare(`\n        INSERT INTO settings (key, value) \n        VALUES (?, ?)\n      `).bind(\n        `payment_intent_${paymentIntent.id}`,\n        JSON.stringify({\n          id: paymentIntent.id,\n          amount: numericAmount,\n          currency,\n          customerEmail,\n          customerName,\n          productId,\n          status: 'created',\n          createdAt: new Date().toISOString()\n        })\n      ).run();\n    } catch (dbError) {\n      console.warn('Failed to store payment intent in database:', dbError);\n    }\n\n    return new Response(JSON.stringify({\n      success: true,\n      clientSecret: paymentIntent.client_secret,\n      paymentIntentId: paymentIntent.id,\n      publishableKey: settings.stripePublicKey\n    }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      } as HeadersInit\n    });\n\n  } catch (error) {\n    console.error('Payment intent creation error:', error);\n    \n    return new Response(JSON.stringify({\n      success: false,\n      error: 'Internal server error'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      } as HeadersInit\n    });\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    } as HeadersInit\n  });\n};\n", "// Cloudflare Pages Function: /api/download-premium\n// Handles premium extension download access validation\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../lib/context';\n\ninterface DownloadRequest {\n  customerId?: number;\n  customerEmail?: string;\n  activationCode?: string;\n  email?: string;\n}\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const body = await request.json() as DownloadRequest;\n    const { customerId, customerEmail, activationCode, email } = body;\n    const finalEmail = customerEmail || email;\n\n    // Customer identification - require at least one method\n    if (!customerId && !finalEmail && !activationCode) {\n      return json({\n        success: false,\n        message: 'Customer identification required'\n      }, 400);\n    }\n\n    // Check if D1 database is available\n    if (!env.DB) {\n      console.error('D1 database not available');\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    try {\n      let account: any = null;\n      let accountType: 'customer' | 'user' | null = null;\n\n      // Initialize tables if they don't exist\n      // (This part remains the same, so it's omitted for brevity but will be kept in the actual code)\n\n      // Find account by different methods\n      if (customerId) {\n        try {\n          account = await env.DB.prepare(`\n            SELECT id, email, name, is_premium, extension_activated, total_spent \n            FROM customers WHERE id = ?\n          `).bind(customerId).first();\n          if (account) accountType = 'customer';\n        } catch (e) {\n          console.log('Customer query failed, trying fallback');\n        }\n      } else if (finalEmail) {\n        try {\n          account = await env.DB.prepare(`\n            SELECT id, email, name, is_premium, extension_activated, total_spent \n            FROM customers WHERE email = ?\n          `).bind(finalEmail).first();\n          if (account) accountType = 'customer';\n        } catch (e) {\n          console.log('Customer email query failed, trying fallback');\n        }\n      } else if (activationCode) {\n        try {\n          const codeResult = await env.DB.prepare(`\n            SELECT c.id, c.email, c.name, c.is_premium, c.extension_activated, c.total_spent\n            FROM customers c\n            JOIN activation_codes ac ON c.id = ac.customer_id\n            WHERE ac.code = ? AND ac.isActive = 1\n          `).bind(activationCode).first();\n          account = codeResult;\n          if (account) accountType = 'customer';\n        } catch (e) {\n          console.log('Activation code query failed:', e);\n        }\n      }\n\n      // If no customer found, try finding a user by email\n      if (!account && finalEmail) {\n        try {\n          const user = await env.DB.prepare(`\n            SELECT id, email, name, is_premium, extension_activated\n            FROM users WHERE email = ?\n          `).bind(finalEmail).first();\n          \n          if (user) {\n            account = { ...user, total_spent: 0 }; // Add total_spent for consistent structure\n            accountType = 'user';\n          }\n        } catch (e) {\n          console.log('User email query failed:', e);\n        }\n      }\n\n      if (!account) {\n        return json({ \n          success: false, \n          message: 'Account not found or invalid credentials' \n        }, 404);\n      }\n\n      // Check if account has premium access\n      const hasBasicAccess = account.is_premium && account.extension_activated;\n\n      if (!hasBasicAccess) {\n        return json({\n          success: false,\n          message: 'Premium access not activated. Please complete your purchase first.',\n          accountStatus: {\n            isPremium: account.is_premium,\n            extensionActivated: account.extension_activated,\n            totalSpent: account.total_spent\n          }\n        }, 403);\n      }\n\n      // Verify completed orders for the account\n      let hasValidOrders = false;\n      // Always perform the full order check for any account\n      try {\n        const orderCheck = await env.DB.prepare(`\n          SELECT COUNT(*) as orderCount FROM orders \n          WHERE (customer_id = ? OR customer_email = ?) AND status = 'completed' AND final_amount > 0\n        `).bind(account.id, account.email).first();\n        \n        hasValidOrders = (orderCheck as any)?.orderCount > 0;\n        console.log(`Order check for ${accountType} '${account.email}':`, { hasValidOrders });\n      } catch (e) {\n        console.log('Order check failed:', e);\n        // Fallback to premium flags if the check fails, but log it as an error condition\n        hasValidOrders = account.is_premium && account.extension_activated;\n        console.error('Database order check failed, falling back to premium flags. This should be investigated.', e);\n      }\n\n      if (!hasValidOrders) {\n        return json({\n          success: false,\n          message: 'No valid premium purchases found. Premium download requires completed payment.',\n          accountStatus: {\n            isPremium: account.is_premium,\n            extensionActivated: account.extension_activated,\n            totalSpent: account.total_spent,\n            requiresPayment: true\n          }\n        }, 403);\n      }\n\n      // Generate download token and log the download\n      const downloadToken = `download_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const now = new Date().toISOString();\n\n      try {\n        await env.DB.prepare(`\n          INSERT INTO extension_downloads (\n            customer_id, download_token, downloaded_at, ip_address, user_agent, created_at\n          ) VALUES (?, ?, ?, ?, ?, ?)\n        `).bind(\n          account.id, // Use account.id, which exists for both users and customers\n          downloadToken, now,\n          request.headers.get('CF-Connecting-IP') || 'unknown',\n          request.headers.get('User-Agent') || 'unknown',\n          now\n        ).run();\n      } catch (e) {\n        console.log('Failed to log download, continuing anyway:', e);\n      }\n\n      // Get or generate activation code\n      let activationCodeResult = `TEMP_${Date.now()}_${account.id}`;\n      if (accountType === 'customer') {\n          try {\n              const result = await env.DB.prepare(`SELECT code FROM activation_codes WHERE customer_id = ? AND isActive = 1 ORDER BY created_at DESC LIMIT 1`).bind(account.id).first();\n              if(result) activationCodeResult = (result as any).code;\n          } catch (e) { console.log('Failed to get activation code:', e); }\n      }\n\n      return json({\n        success: true,\n        message: 'Download access granted',\n        downloadEnabled: true,\n        downloadToken,\n        activationCode: activationCodeResult,\n        account: {\n          id: account.id,\n          email: account.email,\n          name: account.name\n        }\n      });\n\n    } catch (dbError: any) {\n      console.error('Database error during download validation:', dbError);\n      return json({\n        success: false,\n        message: 'Failed to validate download access',\n        error: dbError.message\n      }, 500);\n    }\n\n  } catch (error: any) {\n    console.error('Download validation error:', error);\n    return json({\n      success: false,\n      message: 'Internal server error',\n      error: error.message\n    }, 500);\n  }\n};\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  const url = new URL(request.url);\n  const customerId = url.searchParams.get('customerId');\n  const customerEmail = url.searchParams.get('customerEmail');\n\n  if (!customerId && !customerEmail) {\n    return json({ success: false, message: 'Customer identification required' }, 400);\n  }\n\n  // Check if D1 database is available\n  if (!env.DB) {\n    return json({ success: false, message: 'Database not available' }, 500);\n  }\n\n  try {\n    let customer: any = null;\n\n    if (customerId) {\n      customer = await env.DB.prepare(`\n        SELECT id, email, name, is_premium, extension_activated, total_spent \n        FROM customers WHERE id = ?\n      `).bind(parseInt(customerId)).first();\n    } else if (customerEmail) {\n      customer = await env.DB.prepare(`\n        SELECT id, email, name, is_premium, extension_activated, total_spent \n        FROM customers WHERE email = ?\n      `).bind(customerEmail).first();\n    }\n\n    if (!customer) {\n      return json({ success: false, downloadEnabled: false, message: 'Customer not found' });\n    }\n\n    const hasAccess = customer.is_premium && \n                     customer.extension_activated;\n\n    return json({\n      success: true,\n      downloadEnabled: hasAccess,\n      customer: {\n        id: customer.id,\n        email: customer.email,\n        name: customer.name,\n        totalSpent: customer.total_spent,\n        isPremium: customer.is_premium,\n        extensionActivated: customer.extension_activated\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Download status check error:', error);\n    return json({ success: false, downloadEnabled: false, error: error.message }, 500);\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../lib/context';\n\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  try {\n    if (!env.DB) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    // Create all tables\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        email TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        name TEXT NOT NULL,\n        role TEXT DEFAULT 'customer',\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `).run();\n\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS customers (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        email TEXT UNIQUE NOT NULL,\n        name TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        is_premium BOOLEAN DEFAULT 0,\n        extension_activated BOOLEAN DEFAULT 0,\n        total_spent DECIMAL(10,2) DEFAULT 0,\n        total_orders INTEGER DEFAULT 0\n      )\n    `).run();\n\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS invoices (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        invoice_number TEXT UNIQUE NOT NULL,\n        customer_id INTEGER NOT NULL,\n        customer_name TEXT NOT NULL,\n        customer_email TEXT NOT NULL,\n        invoice_date TEXT NOT NULL,\n        due_date TEXT NOT NULL,\n        subtotal TEXT NOT NULL,\n        total_amount TEXT NOT NULL,\n        currency TEXT DEFAULT 'USD',\n        status TEXT DEFAULT 'pending',\n        paid_at DATETIME,\n        notes TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `).run();\n\n    await env.DB.prepare(`\n      CREATE TABLE IF NOT EXISTS orders (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        customer_id INTEGER NOT NULL,\n        product_name TEXT NOT NULL,\n        amount DECIMAL(10,2) NOT NULL,\n        status TEXT DEFAULT 'completed',\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `).run();\n\n    // Insert demo data\n    const now = new Date().toISOString();\n    \n    // Demo user\n    await env.DB.prepare(`\n      INSERT OR REPLACE INTO users (id, email, password, name, role, created_at)\n      VALUES (1, 'demo@example.com', 'demo123', 'Demo User', 'customer', ?)\n    `).bind(now).run();\n\n    // Demo customer\n    await env.DB.prepare(`\n      INSERT OR REPLACE INTO customers (id, email, name, created_at, is_premium, extension_activated, total_spent, total_orders)\n      VALUES (1, 'demo@example.com', 'Demo User', ?, 1, 1, 29.99, 1)\n    `).bind(now).run();\n\n    // Demo invoice\n    await env.DB.prepare(`\n      INSERT OR REPLACE INTO invoices (id, invoice_number, customer_id, customer_name, customer_email, invoice_date, due_date, subtotal, total_amount, currency, status, paid_at, notes, created_at)\n      VALUES (1, 'INV-2025-000001', 1, 'Demo User', 'demo@example.com', '2025-08-25', '2025-08-25', '29.99', '29.99', 'USD', 'paid', ?, 'Premium extension purchase', ?)\n    `).bind(now, now).run();\n\n    // Demo order\n    await env.DB.prepare(`\n      INSERT OR REPLACE INTO orders (id, customer_id, product_name, amount, status, created_at)\n      VALUES (1, 1, 'Premium Extension', 29.99, 'completed', ?)\n    `).bind(now).run();\n\n    // Verify data\n    const userCount = await env.DB.prepare('SELECT COUNT(*) as count FROM users').first();\n    const customerCount = await env.DB.prepare('SELECT COUNT(*) as count FROM customers').first();\n    const invoiceCount = await env.DB.prepare('SELECT COUNT(*) as count FROM invoices').first();\n    const orderCount = await env.DB.prepare('SELECT COUNT(*) as count FROM orders').first();\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Database initialized successfully',\n      tables: {\n        users: userCount?.count || 0,\n        customers: customerCount?.count || 0,\n        invoices: invoiceCount?.count || 0,\n        orders: orderCount?.count || 0\n      }\n    }), {\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Database initialization error:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Database initialization failed: ' + error.message\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    }\n  });\n};\n", "// In-memory invoice settings (demo)\nfunction getSettingsStore() {\n  const g: any = globalThis as any;\n  if (!g.__INVOICE_SETTINGS__) {\n    g.__INVOICE_SETTINGS__ = {\n      id: 1,\n      companyName: 'OCUS Job Hunter',\n      companyAddress: '',\n      companyPhone: '',\n      companyEmail: '',\n      companyWebsite: '',\n      taxNumber: '',\n      invoicePrefix: 'INV',\n      receiptPrefix: 'REC',\n      invoiceNotes: '',\n      termsAndConditions: '',\n      footerText: 'Thank you for your business!'\n        ,\n      primaryColor: '#007bff',\n      secondaryColor: '#6c757d',\n      updatedAt: new Date().toISOString(),\n    };\n  }\n  return g.__INVOICE_SETTINGS__ as any;\n}\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestGet = async () => {\n  const settings = getSettingsStore();\n  // Return only fields used by UI\n  const ui = {\n    id: settings.id,\n    companyName: settings.companyName,\n    companyAddress: settings.companyAddress,\n    companyPhone: settings.companyPhone,\n    companyEmail: settings.companyEmail,\n    companyWebsite: settings.companyWebsite,\n    taxNumber: settings.taxNumber,\n    invoicePrefix: settings.invoicePrefix,\n    receiptPrefix: settings.receiptPrefix,\n    invoiceNotes: settings.invoiceNotes,\n    termsAndConditions: settings.termsAndConditions,\n    footerText: settings.footerText,\n    primaryColor: settings.primaryColor,\n    secondaryColor: settings.secondaryColor,\n  };\n  return json(ui);\n};\n\nexport const onRequestPut = async ({ request }: any) => {\n  try {\n    const body = await request.json().catch(() => ({}));\n    const store = getSettingsStore();\n\n    const allowedKeys = [\n      'companyName',\n      'companyAddress',\n      'companyPhone',\n      'companyEmail',\n      'companyWebsite',\n      'taxNumber',\n      'invoicePrefix',\n      'receiptPrefix',\n      'invoiceNotes',\n      'termsAndConditions',\n      'footerText',\n      'primaryColor',\n      'secondaryColor',\n    ];\n\n    for (const k of allowedKeys) {\n      if (k in body) store[k] = body[k];\n    }\n    store.updatedAt = new Date().toISOString();\n\n    return json({ ...store });\n  } catch (e) {\n    return json({ success: false, message: 'Failed to update settings' }, 500);\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, PUT, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n", "// Cloudflare Pages Function: /api/invoices\n// Handles invoice retrieval\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    // Check authorization header for token\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return json([]);\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Demo token still returns mock data\n    if (token === 'demo-jwt-token') {\n      const demoInvoice = {\n        id: 1,\n        invoiceNumber: 'INV-2025-000001',\n        customerId: 1,\n        customerName: 'Demo User',\n        customerEmail: 'demo@example.com',\n        invoiceDate: new Date().toISOString().split('T')[0],\n        dueDate: new Date().toISOString().split('T')[0],\n        subtotal: '29.99',\n        totalAmount: '29.99',\n        currency: 'USD',\n        status: 'paid',\n        paidAt: new Date().toISOString(),\n        notes: 'Premium extension purchase'\n      };\n      return json([demoInvoice]);\n    }\n\n    // Real users: token format jwt-token-{email}-{timestamp}\n    if (token.startsWith('jwt-token-')) {\n      const parts = token.split('-');\n      if (parts.length < 3) {\n        return json([]);\n      }\n      const userEmail = parts[2];\n\n      if (!env.DB) {\n        return json({ error: 'Database not available' }, 500);\n      }\n\n      try {\n        const query = `\n          SELECT \n            i.id,\n            i.invoice_number,\n            i.order_id,\n            i.customer_name,\n            i.customer_email,\n            i.invoice_date,\n            i.due_date,\n            i.subtotal,\n            i.tax_amount,\n            i.discount_amount,\n            i.total_amount,\n            i.currency,\n            i.status,\n            i.paid_at,\n            i.notes,\n            i.created_at,\n            i.updated_at,\n            o.payment_method\n          FROM invoices i\n          LEFT JOIN orders o ON o.id = i.order_id\n          WHERE i.customer_email = ?\n          ORDER BY i.created_at DESC\n        `;\n\n        const result = await env.DB.prepare(query).bind(userEmail).all();\n        const rows = result.results || [];\n        const invoices = rows.map((r: any) => ({\n          id: r.id,\n          invoiceNumber: r.invoice_number,\n          orderId: r.order_id,\n          customerName: r.customer_name,\n          customerEmail: r.customer_email,\n          invoiceDate: r.invoice_date,\n          dueDate: r.due_date,\n          subtotal: r.subtotal,\n          taxAmount: r.tax_amount,\n          discountAmount: r.discount_amount,\n          totalAmount: r.total_amount,\n          currency: r.currency,\n          status: r.status,\n          paidAt: r.paid_at,\n          notes: r.notes,\n          createdAt: r.created_at,\n          updatedAt: r.updated_at,\n          paymentMethod: r.payment_method,\n        }));\n\n        return json(invoices);\n      } catch (dbError: any) {\n        console.error('DB error in /api/invoices:', dbError);\n        return json([]);\n      }\n    }\n\n    // For any other case, return empty array\n    return json([]);\n    \n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n", "// Cloudflare Pages Function: /api/me\n// Handles user profile retrieval\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../lib/context';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n    },\n  });\n}\n\nexport const onRequestGet: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    // Check authorization header for token\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return json({ \n        error: 'Unauthorized' \n      }, 401);\n    }\n\n    const token = authHeader.substring(7);\n    \n    // Handle demo-jwt-token\n    if (token === 'demo-jwt-token') {\n      return json({\n        id: 1,\n        email: 'demo@example.com',\n        name: 'Demo User',\n        role: 'customer',\n        createdAt: new Date().toISOString(),\n        isPremium: true,\n        extensionActivated: true,\n        totalSpent: 29.99,\n        totalOrders: 1,\n        isAuthenticated: true\n      });\n    }\n    \n    // Handle jwt-token-{userId}-{timestamp} format\n    if (token.startsWith('jwt-token-')) {\n      const parts = token.split('-');\n      if (parts.length >= 3) {\n        const userId = parts[2];\n        console.log('Parsed userId from token:', userId, 'from token:', token);\n        \n        // Check database for real user data\n        if (!env.DB) {\n          return json({ error: 'Database not available' }, 500);\n        }\n\n        try {\n          // Use D1 Sessions API for consistent reads\n          const session = env.DB.withSession('first-primary');\n          \n          // The token format is jwt-token-{email}-{timestamp}, not userId\n          // Extract email from token instead of treating as userId\n          console.log('Token parts:', parts);\n          const userEmail = parts[2]; // This is actually the email\n          \n          // First try users table (for registered users) - search by email\n          const user = await session.prepare(`\n            SELECT id, email, name, role, created_at, is_premium, extension_activated, \n                   premium_activated_at, total_spent, total_orders\n            FROM users WHERE email = ?\n          `).bind(userEmail).first();\n\n          console.log('User lookup result:', user);\n\n          if (user) {\n            // If a user exists, also check customers table for subscription flags\n            let cust: any = null;\n            try {\n              cust = await session.prepare(`\n                SELECT subscription_status, extension_activated\n                FROM customers WHERE email = ?\n              `).bind(userEmail).first();\n            } catch (e) {\n              console.error('Customer lookup for user failed:', e);\n            }\n\n            const customerIsPremium = cust\n              ? (String(cust.subscription_status || '').toLowerCase() === 'active') || Boolean(cust.extension_activated)\n              : false;\n\n            const computedIsPremium = Boolean(user.is_premium) || customerIsPremium;\n            const computedExtensionActivated = Boolean(user.extension_activated) || Boolean(cust?.extension_activated);\n\n            return json({\n              id: user.id,\n              email: user.email,\n              name: user.name,\n              role: user.role || 'customer',\n              createdAt: user.created_at,\n              isPremium: computedIsPremium,\n              extensionActivated: computedExtensionActivated,\n              premiumActivatedAt: user.premium_activated_at,\n              totalSpent: parseFloat(String(user.total_spent || '0')),\n              totalOrders: parseInt(String(user.total_orders || '0')),\n              isAuthenticated: true\n            });\n          }\n\n          // Fallback to customers table (for legacy users) - search by email\n          const customer = await session.prepare(`\n            SELECT id, email, name, subscription_status, extension_activated, created_at,\n                   total_spent, total_orders\n            FROM customers WHERE email = ?\n          `).bind(userEmail).first();\n\n          console.log('Customer lookup result:', customer);\n\n          if (customer) {\n            return json({\n              id: customer.id,\n              email: customer.email,\n              name: customer.name,\n              role: 'customer',\n              createdAt: customer.created_at,\n              isPremium: (String(customer.subscription_status || '').toLowerCase() === 'active') || Boolean(customer.extension_activated),\n              extensionActivated: Boolean(customer.extension_activated),\n              totalSpent: parseFloat(String(customer.total_spent || '0')),\n              totalOrders: parseInt(String(customer.total_orders || '0')),\n              isAuthenticated: true\n            });\n          }\n\n          // Fallback to settings table (for purchases made when users table was missing)\n          const userSettingsKey = `user_${userEmail.replace('@', '_at_').replace('.', '_dot_')}`;\n          const userSetting = await session.prepare(`\n            SELECT value FROM settings WHERE key = ?\n          `).bind(userSettingsKey).first();\n\n          console.log('User setting lookup result:', userSetting);\n\n          if (userSetting && typeof userSetting.value === 'string') {\n            try {\n              const userData = JSON.parse(userSetting.value);\n              if (userData.isPremium) {\n                return json({\n                  id: userData.id || userEmail, // Fallback id\n                  email: userData.email,\n                  name: userData.name,\n                  role: 'customer',\n                  createdAt: userData.updatedAt, // Use updatedAt as a proxy for creation\n                  isPremium: true,\n                  extensionActivated: true, // Assume activated if premium\n                  totalSpent: 0, // Not tracked in this fallback\n                  totalOrders: 0, // Not tracked in this fallback\n                  isAuthenticated: true\n                });\n              }\n            } catch (parseError) {\n              console.error('Failed to parse user data from settings:', parseError);\n            }\n          }\n        } catch (dbError) {\n          console.error('Database error in /api/me:', dbError);\n        }\n      }\n    }\n    \n    // For any other token, return unauthorized\n    return json({ \n      error: 'Invalid token' \n    }, 401);\n    \n  } catch (error: any) {\n    return json({ \n      error: error.message \n    }, 500);\n  }\n};\n", "import type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../lib/db';\n\n// Helper to return a JSON response\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\n// This function will add the customer_id column to the tickets table.\n// It's designed to be run once.\nexport const onRequestGet: PagesFunction<Env> = async ({ env }) => {\n  if (!env.DB) {\n    return json({ success: false, message: 'Database not available' }, 500);\n  }\n\n  try {\n    // Add customer_id to tickets table\n    const alterStmt = `ALTER TABLE tickets ADD COLUMN customer_id INTEGER;`;\n    await env.DB.prepare(alterStmt).run();\n\n    // Backfill customer_id for existing tickets from the customers table\n    const backfillStmt = `\n      UPDATE tickets\n      SET customer_id = (SELECT id FROM customers WHERE email = tickets.customer_email)\n      WHERE customer_id IS NULL;\n    `;\n    const backfillResult = await env.DB.prepare(backfillStmt).run();\n\n    return json({\n      success: true,\n      message: 'Database migration successful: customer_id added and backfilled.',\n      backfillDetails: backfillResult.meta,\n    });\n  } catch (e: any) {\n    // If the column already exists, the error is expected. We can ignore it.\n    if (e.message.includes('duplicate column name')) {\n      return json({\n        success: true,\n        message: 'Migration not needed: customer_id column already exists.',\n      });\n    }\n    console.error('Migration failed:', e);\n    return json({ success: false, message: e.message }, 500);\n  }\n};\n\n// OPTIONS handler for CORS preflight requests\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n", "// Cloudflare Pages Function: /api/purchase-complete\n// Handles post-purchase processing: activate customer, generate invoice, update download access\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../lib/context';\n\ninterface PurchaseCompleteRequest {\n  paymentIntentId: string;\n  customerEmail: string;\n  customerName?: string;\n  customerId?: number;\n  amount: number;\n  currency?: string;\n  productType?: string;\n}\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestPost: PagesFunction<Env> = async ({ request, env }) => {\n  try {\n    const body = await request.json() as PurchaseCompleteRequest;\n    const { \n      paymentIntentId, \n      customerEmail, \n      customerName, \n      customerId, \n      amount, \n      currency = 'USD',\n      productType = 'premium_extension'\n    } = body;\n\n    if (!paymentIntentId || !customerEmail || !amount) {\n      return json({ success: false, message: 'Missing required fields' }, 400);\n    }\n\n    // Check if D1 database is available\n    if (!env.DB) {\n      console.error('D1 database not available');\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    const now = new Date().toISOString();\n    const nowDate = new Date();\n\n    try {\n      // 1. Update or create customer record with premium access\n      let finalCustomerId = customerId;\n      \n      // First update users table (for registered users)\n      if (customerEmail) {\n        const userUpdateResult = await env.DB.prepare(`\n          UPDATE users \n          SET is_premium = 1,\n              extension_activated = 1,\n              premium_activated_at = ?,\n              total_spent = COALESCE(total_spent, 0) + ?,\n              total_orders = COALESCE(total_orders, 0) + 1\n          WHERE email = ?\n        `).bind(now, amount, customerEmail).run();\n        \n        console.log('User table update result for', customerEmail, ':', userUpdateResult);\n        \n        // If no user was updated, we need to ensure we have a customer ID for orders/invoices\n        if (userUpdateResult.meta?.changes === 0) {\n          console.log('No user found with email', customerEmail, 'in users table');\n        }\n      }\n      \n      if (customerId) {\n        // Update existing customer\n        await env.DB.prepare(`\n          UPDATE customers \n          SET is_premium = 1,\n              extension_activated = 1,\n              total_spent = COALESCE(total_spent, 0) + ?,\n              total_orders = COALESCE(total_orders, 0) + 1,\n              updated_at = ?\n          WHERE id = ?\n        `).bind(amount, now, customerId).run();\n      } else {\n        // Find customer by email or create new one\n        const existingCustomer = await env.DB.prepare(`\n          SELECT id FROM customers WHERE email = ?\n        `).bind(customerEmail).first();\n\n        if (existingCustomer) {\n          finalCustomerId = (existingCustomer as any).id;\n          await env.DB.prepare(`\n            UPDATE customers \n            SET is_premium = 1,\n                extension_activated = 1,\n                updated_at = ?\n            WHERE id = ?\n          `).bind(now, finalCustomerId).run();\n        } else {\n          // Create new customer\n          const result = await env.DB.prepare(`\n            INSERT INTO customers (\n              email, name, is_premium, extension_activated, \n              created_at, updated_at\n            ) VALUES (?, ?, 1, 1, ?, ?)\n          `).bind(\n            customerEmail, \n            customerName || customerEmail, \n            now, \n            now\n          ).run();\n          \n          finalCustomerId = result.meta?.last_row_id as number;\n        }\n      }\n\n      // 2. Ensure we have a customer ID for orders/invoices\n      if (!finalCustomerId) {\n        // Find or create customer record for users who don't have a customer ID\n        const existingCustomer = await env.DB.prepare(`\n          SELECT id FROM customers WHERE email = ?\n        `).bind(customerEmail).first();\n\n        if (existingCustomer) {\n          finalCustomerId = (existingCustomer as any).id;\n          await env.DB.prepare(`\n            UPDATE customers \n            SET is_premium = 1,\n                extension_activated = 1,\n                total_spent = COALESCE(total_spent, 0) + ?,\n                total_orders = COALESCE(total_orders, 0) + 1,\n                updated_at = ?\n            WHERE id = ?\n          `).bind(amount, now, finalCustomerId).run();\n        } else {\n          // Create new customer record\n          const result = await env.DB.prepare(`\n            INSERT INTO customers (\n              email, name, is_premium, extension_activated, \n              total_spent, total_orders, created_at, updated_at\n            ) VALUES (?, ?, 1, 1, ?, 1, ?, ?)\n          `).bind(\n            customerEmail, \n            customerName || customerEmail, \n            amount,\n            now, \n            now\n          ).run();\n          \n          finalCustomerId = result.meta?.last_row_id as number;\n        }\n      }\n\n      console.log('Final customer ID for orders/invoices:', finalCustomerId);\n\n      // 3. Create order record\n      const downloadToken = `download_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const orderResult = await env.DB.prepare(`\n        INSERT INTO orders (\n          customer_id, customer_email, customer_name, \n          original_amount, final_amount, currency, status, payment_method,\n          payment_intent_id, download_token, created_at, completed_at\n        ) VALUES (?, ?, ?, ?, ?, ?, 'completed', 'stripe', ?, ?, ?, ?)\n      `).bind(\n        finalCustomerId,\n        customerEmail,\n        customerName || customerEmail,\n        amount,\n        amount,\n        currency.toLowerCase(),\n        paymentIntentId,\n        downloadToken,\n        now,\n        now\n      ).run();\n\n      const orderId = orderResult.meta?.last_row_id as number;\n\n      // 4. Generate activation code for the extension\n      const activationCode = `OCUS_${Date.now()}_${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n      \n      await env.DB.prepare(`\n        INSERT INTO activation_codes (\n          code, order_id, created_at\n        ) VALUES (?, ?, ?)\n      `).bind(activationCode, orderId, now).run();\n\n      // 5. Create invoice record\n      const invoiceNumber = `INV-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;\n      const invoiceDate = nowDate;\n      const dueDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days from now\n      \n      const invoiceResult = await env.DB.prepare(`\n        INSERT INTO invoices (\n          invoice_number, order_id, customer_id, customer_name, customer_email,\n          invoice_date, due_date, subtotal, tax_amount, discount_amount, \n          total_amount, currency, status, paid_at, created_at, updated_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, 0.00, 0.00, ?, ?, 'paid', ?, ?, ?)\n      `).bind(\n        invoiceNumber,\n        orderId,\n        finalCustomerId,\n        customerName || customerEmail,\n        customerEmail,\n        invoiceDate.toISOString(),\n        dueDate.toISOString(),\n        amount,\n        amount,\n        'USD',\n        invoiceDate.toISOString(),\n        invoiceDate.toISOString(),\n        invoiceDate.toISOString()\n      ).run();\n\n      const invoiceId = invoiceResult.meta?.last_row_id as number;\n\n      // 6. Create invoice item\n      await env.DB.prepare(`\n        INSERT INTO invoice_items (\n          invoice_id, product_name, description, quantity, unit_price, total_price, created_at\n        ) VALUES (?, ?, ?, 1, ?, ?, ?)\n      `).bind(\n        invoiceId,\n        'OCUS Job Hunter Premium',\n        'Premium access to OCUS Job Hunter extension with unlimited job applications',\n        amount,\n        amount,\n        invoiceDate.toISOString()\n      ).run();\n\n      console.log('Invoice created successfully:', { invoiceId, invoiceNumber });\n\n      // 5. Log the purchase completion\n      console.log('Purchase completed successfully:', {\n        customerId: finalCustomerId,\n        orderId,\n        paymentIntentId,\n        amount,\n        activationCode\n      });\n\n      return json({\n        success: true,\n        message: 'Purchase completed successfully',\n        data: {\n          customerId: finalCustomerId,\n          orderId,\n          activationCode,\n          downloadEnabled: true\n        }\n      });\n\n    } catch (dbError: any) {\n      console.error('Database error during purchase completion:', dbError);\n      return json({\n        success: false,\n        message: 'Failed to process purchase completion',\n        error: dbError.message\n      }, 500);\n    }\n\n  } catch (error: any) {\n    console.error('Purchase completion error:', error);\n    return json({\n      success: false,\n      message: 'Internal server error',\n      error: error.message\n    }, 500);\n  }\n};\n\nexport const onRequestOptions: PagesFunction = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Object;\n", "'use strict';\n\n/** @type {import('.')} */\nmodule.exports = Error;\n", "'use strict';\n\n/** @type {import('./eval')} */\nmodule.exports = EvalError;\n", "'use strict';\n\n/** @type {import('./range')} */\nmodule.exports = RangeError;\n", "'use strict';\n\n/** @type {import('./ref')} */\nmodule.exports = ReferenceError;\n", "'use strict';\n\n/** @type {import('./syntax')} */\nmodule.exports = SyntaxError;\n", "'use strict';\n\n/** @type {import('./type')} */\nmodule.exports = TypeError;\n", "'use strict';\n\n/** @type {import('./uri')} */\nmodule.exports = URIError;\n", "'use strict';\n\n/** @type {import('./abs')} */\nmodule.exports = Math.abs;\n", "'use strict';\n\n/** @type {import('./floor')} */\nmodule.exports = Math.floor;\n", "'use strict';\n\n/** @type {import('./max')} */\nmodule.exports = Math.max;\n", "'use strict';\n\n/** @type {import('./min')} */\nmodule.exports = Math.min;\n", "'use strict';\n\n/** @type {import('./pow')} */\nmodule.exports = Math.pow;\n", "'use strict';\n\n/** @type {import('./round')} */\nmodule.exports = Math.round;\n", "'use strict';\n\n/** @type {import('./isNaN')} */\nmodule.exports = Number.isNaN || function isNaN(a) {\n\treturn a !== a;\n};\n", "'use strict';\n\nvar $isNaN = require('./isNaN');\n\n/** @type {import('./sign')} */\nmodule.exports = function sign(number) {\n\tif ($isNaN(number) || number === 0) {\n\t\treturn number;\n\t}\n\treturn number < 0 ? -1 : +1;\n};\n", "'use strict';\n\n/** @type {import('./gOPD')} */\nmodule.exports = Object.getOwnPropertyDescriptor;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $gOPD = require('./gOPD');\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $defineProperty = Object.defineProperty || false;\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = false;\n\t}\n}\n\nmodule.exports = $defineProperty;\n", "'use strict';\n\n/** @type {import('./shams')} */\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\t/** @type {{ [k in symbol]?: unknown }} */\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tvar descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n", "'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n", "'use strict';\n\n/** @type {import('./Reflect.getPrototypeOf')} */\nmodule.exports = (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;\n", "'use strict';\n\nvar $Object = require('es-object-atoms');\n\n/** @type {import('./Object.getPrototypeOf')} */\nmodule.exports = $Object.getPrototypeOf || null;\n", "'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n", "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n", "'use strict';\n\n/** @type {import('./functionCall')} */\nmodule.exports = Function.prototype.call;\n", "'use strict';\n\n/** @type {import('./functionApply')} */\nmodule.exports = Function.prototype.apply;\n", "'use strict';\n\n/** @type {import('./reflectApply')} */\nmodule.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;\n", "'use strict';\n\nvar bind = require('function-bind');\n\nvar $apply = require('./functionApply');\nvar $call = require('./functionCall');\nvar $reflectApply = require('./reflectApply');\n\n/** @type {import('./actualApply')} */\nmodule.exports = $reflectApply || bind.call($call, $apply);\n", "'use strict';\n\nvar bind = require('function-bind');\nvar $TypeError = require('es-errors/type');\n\nvar $call = require('./functionCall');\nvar $actualApply = require('./actualApply');\n\n/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */\nmodule.exports = function callBindBasic(args) {\n\tif (args.length < 1 || typeof args[0] !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\treturn $actualApply(bind, $call, args);\n};\n", "'use strict';\n\nvar callBind = require('call-bind-apply-helpers');\nvar gOPD = require('gopd');\n\nvar hasProtoAccessor;\ntry {\n\t// eslint-disable-next-line no-extra-parens, no-proto\n\thasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;\n} catch (e) {\n\tif (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {\n\t\tthrow e;\n\t}\n}\n\n// eslint-disable-next-line no-extra-parens\nvar desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));\n\nvar $Object = Object;\nvar $getPrototypeOf = $Object.getPrototypeOf;\n\n/** @type {import('./get')} */\nmodule.exports = desc && typeof desc.get === 'function'\n\t? callBind([desc.get])\n\t: typeof $getPrototypeOf === 'function'\n\t\t? /** @type {import('./get')} */ function getDunder(value) {\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\treturn $getPrototypeOf(value == null ? value : $Object(value));\n\t\t}\n\t\t: false;\n", "'use strict';\n\nvar reflectGetProto = require('./Reflect.getPrototypeOf');\nvar originalGetProto = require('./Object.getPrototypeOf');\n\nvar getDunderProto = require('dunder-proto/get');\n\n/** @type {import('.')} */\nmodule.exports = reflectGetProto\n\t? function getProto(O) {\n\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\treturn reflectGetProto(O);\n\t}\n\t: originalGetProto\n\t\t? function getProto(O) {\n\t\t\tif (!O || (typeof O !== 'object' && typeof O !== 'function')) {\n\t\t\t\tthrow new TypeError('getProto: not an object');\n\t\t\t}\n\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\treturn originalGetProto(O);\n\t\t}\n\t\t: getDunderProto\n\t\t\t? function getProto(O) {\n\t\t\t\t// @ts-expect-error TS can't narrow inside a closure, for some reason\n\t\t\t\treturn getDunderProto(O);\n\t\t\t}\n\t\t\t: null;\n", "'use strict';\n\nvar call = Function.prototype.call;\nvar $hasOwn = Object.prototype.hasOwnProperty;\nvar bind = require('function-bind');\n\n/** @type {import('.')} */\nmodule.exports = bind.call(call, $hasOwn);\n", "'use strict';\n\nvar undefined;\n\nvar $Object = require('es-object-atoms');\n\nvar $Error = require('es-errors');\nvar $EvalError = require('es-errors/eval');\nvar $RangeError = require('es-errors/range');\nvar $ReferenceError = require('es-errors/ref');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $URIError = require('es-errors/uri');\n\nvar abs = require('math-intrinsics/abs');\nvar floor = require('math-intrinsics/floor');\nvar max = require('math-intrinsics/max');\nvar min = require('math-intrinsics/min');\nvar pow = require('math-intrinsics/pow');\nvar round = require('math-intrinsics/round');\nvar sign = require('math-intrinsics/sign');\n\nvar $Function = Function;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = require('gopd');\nvar $defineProperty = require('es-define-property');\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = require('get-proto');\nvar $ObjectGPO = require('get-proto/Object.getPrototypeOf');\nvar $ReflectGPO = require('get-proto/Reflect.getPrototypeOf');\n\nvar $apply = require('call-bind-apply-helpers/functionApply');\nvar $call = require('call-bind-apply-helpers/functionCall');\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t__proto__: null,\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': $Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': $EvalError,\n\t'%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': $Object,\n\t'%Object.getOwnPropertyDescriptor%': $gOPD,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': $RangeError,\n\t'%ReferenceError%': $ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': $URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,\n\n\t'%Function.prototype.call%': $call,\n\t'%Function.prototype.apply%': $apply,\n\t'%Object.defineProperty%': $defineProperty,\n\t'%Object.getPrototypeOf%': $ObjectGPO,\n\t'%Math.abs%': abs,\n\t'%Math.floor%': floor,\n\t'%Math.max%': max,\n\t'%Math.min%': min,\n\t'%Math.pow%': pow,\n\t'%Math.round%': round,\n\t'%Math.sign%': sign,\n\t'%Reflect.getPrototypeOf%': $ReflectGPO\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t__proto__: null,\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('hasown');\nvar $concat = bind.call($call, Array.prototype.concat);\nvar $spliceApply = bind.call($apply, Array.prototype.splice);\nvar $replace = bind.call($call, String.prototype.replace);\nvar $strSlice = bind.call($call, String.prototype.slice);\nvar $exec = bind.call($call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n", "'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar gopd = require('gopd');\n\n/** @type {import('.')} */\nmodule.exports = function defineDataProperty(\n\tobj,\n\tproperty,\n\tvalue\n) {\n\tif (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {\n\t\tthrow new $TypeError('`obj` must be an object or a function`');\n\t}\n\tif (typeof property !== 'string' && typeof property !== 'symbol') {\n\t\tthrow new $TypeError('`property` must be a string or a symbol`');\n\t}\n\tif (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {\n\t\tthrow new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {\n\t\tthrow new $TypeError('`nonWritable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {\n\t\tthrow new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 6 && typeof arguments[6] !== 'boolean') {\n\t\tthrow new $TypeError('`loose`, if provided, must be a boolean');\n\t}\n\n\tvar nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n\tvar nonWritable = arguments.length > 4 ? arguments[4] : null;\n\tvar nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n\tvar loose = arguments.length > 6 ? arguments[6] : false;\n\n\t/* @type {false | TypedPropertyDescriptor<unknown>} */\n\tvar desc = !!gopd && gopd(obj, property);\n\n\tif ($defineProperty) {\n\t\t$defineProperty(obj, property, {\n\t\t\tconfigurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n\t\t\tenumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n\t\t\tvalue: value,\n\t\t\twritable: nonWritable === null && desc ? desc.writable : !nonWritable\n\t\t});\n\t} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {\n\t\t// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable\n\t\tobj[property] = value; // eslint-disable-line no-param-reassign\n\t} else {\n\t\tthrow new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');\n\t}\n};\n", "'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar hasPropertyDescriptors = function hasPropertyDescriptors() {\n\treturn !!$defineProperty;\n};\n\nhasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n\t// node v0.6 has a bug where array lengths can be Set but not Defined\n\tif (!$defineProperty) {\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn $defineProperty([], 'length', { value: 1 }).length !== 1;\n\t} catch (e) {\n\t\t// In Firefox 4-22, defining length on an array throws an exception.\n\t\treturn true;\n\t}\n};\n\nmodule.exports = hasPropertyDescriptors;\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar define = require('define-data-property');\nvar hasDescriptors = require('has-property-descriptors')();\nvar gOPD = require('gopd');\n\nvar $TypeError = require('es-errors/type');\nvar $floor = GetIntrinsic('%Math.floor%');\n\n/** @type {import('.')} */\nmodule.exports = function setFunctionLength(fn, length) {\n\tif (typeof fn !== 'function') {\n\t\tthrow new $TypeError('`fn` is not a function');\n\t}\n\tif (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {\n\t\tthrow new $TypeError('`length` must be a positive 32-bit integer');\n\t}\n\n\tvar loose = arguments.length > 2 && !!arguments[2];\n\n\tvar functionLengthIsConfigurable = true;\n\tvar functionLengthIsWritable = true;\n\tif ('length' in fn && gOPD) {\n\t\tvar desc = gOPD(fn, 'length');\n\t\tif (desc && !desc.configurable) {\n\t\t\tfunctionLengthIsConfigurable = false;\n\t\t}\n\t\tif (desc && !desc.writable) {\n\t\t\tfunctionLengthIsWritable = false;\n\t\t}\n\t}\n\n\tif (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\n\t\tif (hasDescriptors) {\n\t\t\tdefine(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);\n\t\t} else {\n\t\t\tdefine(/** @type {Parameters<define>[0]} */ (fn), 'length', length);\n\t\t}\n\t}\n\treturn fn;\n};\n", "'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\nvar setFunctionLength = require('set-function-length');\n\nvar $TypeError = require('es-errors/type');\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $defineProperty = require('es-define-property');\nvar $max = GetIntrinsic('%Math.max%');\n\nmodule.exports = function callBind(originalFunction) {\n\tif (typeof originalFunction !== 'function') {\n\t\tthrow new $TypeError('a function is required');\n\t}\n\tvar func = $reflectApply(bind, $call, arguments);\n\treturn setFunctionLength(\n\t\tfunc,\n\t\t1 + $max(0, originalFunction.length - (arguments.length - 1)),\n\t\ttrue\n\t);\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n", "var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar $match = String.prototype.match;\nvar $slice = String.prototype.slice;\nvar $replace = String.prototype.replace;\nvar $toUpperCase = String.prototype.toUpperCase;\nvar $toLowerCase = String.prototype.toLowerCase;\nvar $test = RegExp.prototype.test;\nvar $concat = Array.prototype.concat;\nvar $join = Array.prototype.join;\nvar $arrSlice = Array.prototype.slice;\nvar $floor = Math.floor;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n// ie, `has-tostringtag/shams\nvar toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')\n    ? Symbol.toStringTag\n    : null;\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nfunction addNumericSeparator(num, str) {\n    if (\n        num === Infinity\n        || num === -Infinity\n        || num !== num\n        || (num && num > -1000 && num < 1000)\n        || $test.call(/e/, str)\n    ) {\n        return str;\n    }\n    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n    if (typeof num === 'number') {\n        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n        if (int !== num) {\n            var intStr = String(int);\n            var dec = $slice.call(str, intStr.length + 1);\n            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n        }\n    }\n    return $replace.call(str, sepRegex, '$&_');\n}\n\nvar utilInspect = require('./util.inspect');\nvar inspectCustom = utilInspect.custom;\nvar inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n        throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n    }\n    var numericSeparator = opts.numericSeparator;\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        var str = String(obj);\n        return numericSeparator ? addNumericSeparator(obj, str) : str;\n    }\n    if (typeof obj === 'bigint') {\n        var bigIntStr = String(obj) + 'n';\n        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = $arrSlice.call(seen);\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function' && !isRegExp(obj)) { // in older engines, regexes are callable\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + $toLowerCase.call(String(obj.nodeName));\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + $join.call(xs, ', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {\n            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n        }\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {\n            return utilInspect(obj, { depth: maxDepth - depth });\n        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        if (mapForEach) {\n            mapForEach.call(obj, function (value, key) {\n                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n            });\n        }\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        if (setForEach) {\n            setForEach.call(obj, function (value) {\n                setParts.push(inspect(value, obj));\n            });\n        }\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other\n    /* eslint-env browser */\n    if (typeof window !== 'undefined' && obj === window) {\n        return '{ [object Window] }';\n    }\n    if (\n        (typeof globalThis !== 'undefined' && obj === globalThis)\n        || (typeof global !== 'undefined' && obj === global)\n    ) {\n        return '{ [object globalThis] }';\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + $join.call(ys, ', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return $replace.call(String(s), /\"/g, '&quot;');\n}\n\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n    }\n    // eslint-disable-next-line no-control-regex\n    var s = $replace.call($replace.call(str, /(['\\\\])/g, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = $join.call(Array(opts.indent + 1), ' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: $join.call(Array(depth + 1), baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ($test.call(/[^\\w$]/, key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\nvar $Map = GetIntrinsic('%Map%', true);\n\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSet = callBound('Map.prototype.set', true);\nvar $mapHas = callBound('Map.prototype.has', true);\n\n/*\n* This function traverses the list returning the node corresponding to the given key.\n*\n* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.\n*/\n/** @type {import('.').listGetNode} */\nvar listGetNode = function (list, key) { // eslint-disable-line consistent-return\n\t/** @type {typeof list | NonNullable<(typeof list)['next']>} */\n\tvar prev = list;\n\t/** @type {(typeof list)['next']} */\n\tvar curr;\n\tfor (; (curr = prev.next) !== null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\tcurr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);\n\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\n/** @type {import('.').listGet} */\nvar listGet = function (objects, key) {\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\n/** @type {import('.').listSet} */\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = /** @type {import('.').ListNode<typeof value>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t});\n\t}\n};\n/** @type {import('.').listHas} */\nvar listHas = function (objects, key) {\n\treturn !!listGetNode(objects, key);\n};\n\n/** @type {import('.')} */\nmodule.exports = function getSideChannel() {\n\t/** @type {WeakMap<object, unknown>} */ var $wm;\n\t/** @type {Map<object, unknown>} */ var $m;\n\t/** @type {import('.').RootNode<unknown>} */ var $o;\n\n\t/** @type {import('.').Channel} */\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapGet($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listGet($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapHas($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listHas($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif (!$wm) {\n\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t}\n\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t} else if ($Map) {\n\t\t\t\tif (!$m) {\n\t\t\t\t\t$m = new $Map();\n\t\t\t\t}\n\t\t\t\t$mapSet($m, key, value);\n\t\t\t} else {\n\t\t\t\tif (!$o) {\n\t\t\t\t\t// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t$o = { key: {}, next: null };\n\t\t\t\t}\n\t\t\t\tlistSet($o, key, value);\n\t\t\t}\n\t\t}\n\t};\n\treturn channel;\n};\n", "'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n", "'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar limit = 1024;\n\n/* eslint operator-linebreak: [2, \"before\"] */\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var j = 0; j < string.length; j += limit) {\n        var segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        var arr = [];\n\n        for (var i = 0; i < segment.length; ++i) {\n            var c = segment.charCodeAt(i);\n            if (\n                c === 0x2D // -\n                || c === 0x2E // .\n                || c === 0x5F // _\n                || c === 0x7E // ~\n                || (c >= 0x30 && c <= 0x39) // 0-9\n                || (c >= 0x41 && c <= 0x5A) // a-z\n                || (c >= 0x61 && c <= 0x7A) // A-Z\n                || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n\n            if (c < 0x80) {\n                arr[arr.length] = hexTable[c];\n                continue;\n            }\n\n            if (c < 0x800) {\n                arr[arr.length] = hexTable[0xC0 | (c >> 6)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            if (c < 0xD800 || c >= 0xE000) {\n                arr[arr.length] = hexTable[0xE0 | (c >> 12)]\n                    + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                    + hexTable[0x80 | (c & 0x3F)];\n                continue;\n            }\n\n            i += 1;\n            c = 0x10000 + (((c & 0x3FF) << 10) | (segment.charCodeAt(i) & 0x3FF));\n\n            arr[arr.length] = hexTable[0xF0 | (c >> 18)]\n                + hexTable[0x80 | ((c >> 12) & 0x3F)]\n                + hexTable[0x80 | ((c >> 6) & 0x3F)]\n                + hexTable[0x80 | (c & 0x3F)];\n        }\n\n        out += arr.join('');\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n", "'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    commaRoundTrip,\n    allowEmptyArrays,\n    strictNullHandling,\n    skipNulls,\n    encodeDotInKeys,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\\./g, '%2E') : prefix;\n\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;\n\n    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n        return adjustedPrefix + '[]';\n    }\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix\n            : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            commaRoundTrip,\n            allowEmptyArrays,\n            strictNullHandling,\n            skipNulls,\n            encodeDotInKeys,\n            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    var arrayFormat;\n    if (opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\n    var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            commaRoundTrip,\n            options.allowEmptyArrays,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encodeDotInKeys,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('\u2713')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n", "'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowEmptyArrays: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decodeDotInKeys: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    duplicates: 'combine',\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictDepth: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the \u2713 character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the \u2713 character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('\u2713')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = { __proto__: null };\n\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        var existing = has.call(obj, key);\n        if (existing && options.duplicates === 'combine') {\n            obj[key] = utils.combine(obj[key], val);\n        } else if (!existing || options.duplicates === 'last') {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = options.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))\n                ? []\n                : [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;\n            var index = parseInt(decodedRoot, 10);\n            if (!options.parseArrays && decodedRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== decodedRoot\n                && String(index) === decodedRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (decodedRoot !== '__proto__') {\n                obj[decodedRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, check strictDepth option for throw, else just add whatever is left\n\n    if (segment) {\n        if (options.strictDepth === true) {\n            throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');\n        }\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n\n    if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n        throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n\n    if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\n\n    if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n        throw new TypeError('The duplicates option must be either combine, first, or last');\n    }\n\n    var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n\n    return {\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        duplicates: duplicates,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n", "'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n", "import * as qs from 'qs';\nconst OPTIONS_KEYS = [\n    'apiKey',\n    'idempotencyKey',\n    'stripeAccount',\n    'apiVersion',\n    'maxNetworkRetries',\n    'timeout',\n    'host',\n    'authenticator',\n    'stripeContext',\n    'additionalHeaders',\n    'streaming',\n];\nexport function isOptionsHash(o) {\n    return (o &&\n        typeof o === 'object' &&\n        OPTIONS_KEYS.some((prop) => Object.prototype.hasOwnProperty.call(o, prop)));\n}\n/**\n * Stringifies an Object, accommodating nested objects\n * (forming the conventional key 'parent[child]=value')\n */\nexport function queryStringifyRequestData(data, apiMode) {\n    return (qs\n        .stringify(data, {\n        serializeDate: (d) => Math.floor(d.getTime() / 1000).toString(),\n        arrayFormat: apiMode == 'v2' ? 'repeat' : 'indices',\n    })\n        // Don't use strict form encoding by changing the square bracket control\n        // characters back to their literals. This is fine by the server, and\n        // makes these parameter strings easier to read.\n        .replace(/%5B/g, '[')\n        .replace(/%5D/g, ']'));\n}\n/**\n * Outputs a new function with interpolated object property values.\n * Use like so:\n *   const fn = makeURLInterpolator('some/url/{param1}/{param2}');\n *   fn({ param1: 123, param2: 456 }); // => 'some/url/123/456'\n */\nexport const makeURLInterpolator = (() => {\n    const rc = {\n        '\\n': '\\\\n',\n        '\"': '\\\\\"',\n        '\\u2028': '\\\\u2028',\n        '\\u2029': '\\\\u2029',\n    };\n    return (str) => {\n        const cleanString = str.replace(/[\"\\n\\r\\u2028\\u2029]/g, ($0) => rc[$0]);\n        return (outputs) => {\n            return cleanString.replace(/\\{([\\s\\S]+?)\\}/g, ($0, $1) => {\n                const output = outputs[$1];\n                if (isValidEncodeUriComponentType(output))\n                    return encodeURIComponent(output);\n                return '';\n            });\n        };\n    };\n})();\nfunction isValidEncodeUriComponentType(value) {\n    return ['number', 'string', 'boolean'].includes(typeof value);\n}\nexport function extractUrlParams(path) {\n    const params = path.match(/\\{\\w+\\}/g);\n    if (!params) {\n        return [];\n    }\n    return params.map((param) => param.replace(/[{}]/g, ''));\n}\n/**\n * Return the data argument from a list of arguments\n *\n * @param {object[]} args\n * @returns {object}\n */\nexport function getDataFromArgs(args) {\n    if (!Array.isArray(args) || !args[0] || typeof args[0] !== 'object') {\n        return {};\n    }\n    if (!isOptionsHash(args[0])) {\n        return args.shift();\n    }\n    const argKeys = Object.keys(args[0]);\n    const optionKeysInArgs = argKeys.filter((key) => OPTIONS_KEYS.includes(key));\n    // In some cases options may be the provided as the first argument.\n    // Here we're detecting a case where there are two distinct arguments\n    // (the first being args and the second options) and with known\n    // option keys in the first so that we can warn the user about it.\n    if (optionKeysInArgs.length > 0 &&\n        optionKeysInArgs.length !== argKeys.length) {\n        emitWarning(`Options found in arguments (${optionKeysInArgs.join(', ')}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options.`);\n    }\n    return {};\n}\n/**\n * Return the options hash from a list of arguments\n */\nexport function getOptionsFromArgs(args) {\n    const opts = {\n        host: null,\n        headers: {},\n        settings: {},\n        streaming: false,\n    };\n    if (args.length > 0) {\n        const arg = args[args.length - 1];\n        if (typeof arg === 'string') {\n            opts.authenticator = createApiKeyAuthenticator(args.pop());\n        }\n        else if (isOptionsHash(arg)) {\n            const params = Object.assign({}, args.pop());\n            const extraKeys = Object.keys(params).filter((key) => !OPTIONS_KEYS.includes(key));\n            if (extraKeys.length) {\n                emitWarning(`Invalid options found (${extraKeys.join(', ')}); ignoring.`);\n            }\n            if (params.apiKey) {\n                opts.authenticator = createApiKeyAuthenticator(params.apiKey);\n            }\n            if (params.idempotencyKey) {\n                opts.headers['Idempotency-Key'] = params.idempotencyKey;\n            }\n            if (params.stripeAccount) {\n                opts.headers['Stripe-Account'] = params.stripeAccount;\n            }\n            if (params.stripeContext) {\n                if (opts.headers['Stripe-Account']) {\n                    throw new Error(\"Can't specify both stripeAccount and stripeContext.\");\n                }\n                opts.headers['Stripe-Context'] = params.stripeContext;\n            }\n            if (params.apiVersion) {\n                opts.headers['Stripe-Version'] = params.apiVersion;\n            }\n            if (Number.isInteger(params.maxNetworkRetries)) {\n                opts.settings.maxNetworkRetries = params.maxNetworkRetries;\n            }\n            if (Number.isInteger(params.timeout)) {\n                opts.settings.timeout = params.timeout;\n            }\n            if (params.host) {\n                opts.host = params.host;\n            }\n            if (params.authenticator) {\n                if (params.apiKey) {\n                    throw new Error(\"Can't specify both apiKey and authenticator.\");\n                }\n                if (typeof params.authenticator !== 'function') {\n                    throw new Error('The authenticator must be a function ' +\n                        'receiving a request as the first parameter.');\n                }\n                opts.authenticator = params.authenticator;\n            }\n            if (params.additionalHeaders) {\n                opts.headers = params.additionalHeaders;\n            }\n            if (params.streaming) {\n                opts.streaming = true;\n            }\n        }\n    }\n    return opts;\n}\n/**\n * Provide simple \"Class\" extension mechanism.\n * <!-- Public API accessible via Stripe.StripeResource.extend -->\n */\nexport function protoExtend(sub) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const Super = this;\n    const Constructor = Object.prototype.hasOwnProperty.call(sub, 'constructor')\n        ? sub.constructor\n        : function (...args) {\n            Super.apply(this, args);\n        };\n    // This initialization logic is somewhat sensitive to be compatible with\n    // divergent JS implementations like the one found in Qt. See here for more\n    // context:\n    //\n    // https://github.com/stripe/stripe-node/pull/334\n    Object.assign(Constructor, Super);\n    Constructor.prototype = Object.create(Super.prototype);\n    Object.assign(Constructor.prototype, sub);\n    return Constructor;\n}\n/**\n * Remove empty values from an object\n */\nexport function removeNullish(obj) {\n    if (typeof obj !== 'object') {\n        throw new Error('Argument must be an object');\n    }\n    return Object.keys(obj).reduce((result, key) => {\n        if (obj[key] != null) {\n            result[key] = obj[key];\n        }\n        return result;\n    }, {});\n}\n/**\n * Normalize standard HTTP Headers:\n * {'foo-bar': 'hi'}\n * becomes\n * {'Foo-Bar': 'hi'}\n */\nexport function normalizeHeaders(obj) {\n    if (!(obj && typeof obj === 'object')) {\n        return obj;\n    }\n    return Object.keys(obj).reduce((result, header) => {\n        result[normalizeHeader(header)] = obj[header];\n        return result;\n    }, {});\n}\n/**\n * Stolen from https://github.com/marten-de-vries/header-case-normalizer/blob/master/index.js#L36-L41\n * without the exceptions which are irrelevant to us.\n */\nexport function normalizeHeader(header) {\n    return header\n        .split('-')\n        .map((text) => text.charAt(0).toUpperCase() + text.substr(1).toLowerCase())\n        .join('-');\n}\nexport function callbackifyPromiseWithTimeout(promise, callback) {\n    if (callback) {\n        // Ensure callback is called outside of promise stack.\n        return promise.then((res) => {\n            setTimeout(() => {\n                callback(null, res);\n            }, 0);\n        }, (err) => {\n            setTimeout(() => {\n                callback(err, null);\n            }, 0);\n        });\n    }\n    return promise;\n}\n/**\n * Allow for special capitalization cases (such as OAuth)\n */\nexport function pascalToCamelCase(name) {\n    if (name === 'OAuth') {\n        return 'oauth';\n    }\n    else {\n        return name[0].toLowerCase() + name.substring(1);\n    }\n}\nexport function emitWarning(warning) {\n    if (typeof process.emitWarning !== 'function') {\n        return console.warn(`Stripe: ${warning}`); /* eslint-disable-line no-console */\n    }\n    return process.emitWarning(warning, 'Stripe');\n}\nexport function isObject(obj) {\n    const type = typeof obj;\n    return (type === 'function' || type === 'object') && !!obj;\n}\n// For use in multipart requests\nexport function flattenAndStringify(data) {\n    const result = {};\n    const step = (obj, prevKey) => {\n        Object.entries(obj).forEach(([key, value]) => {\n            const newKey = prevKey ? `${prevKey}[${key}]` : key;\n            if (isObject(value)) {\n                if (!(value instanceof Uint8Array) &&\n                    !Object.prototype.hasOwnProperty.call(value, 'data')) {\n                    // Non-buffer non-file Objects are recursively flattened\n                    return step(value, newKey);\n                }\n                else {\n                    // Buffers and file objects are stored without modification\n                    result[newKey] = value;\n                }\n            }\n            else {\n                // Primitives are converted to strings\n                result[newKey] = String(value);\n            }\n        });\n    };\n    step(data, null);\n    return result;\n}\nexport function validateInteger(name, n, defaultVal) {\n    if (!Number.isInteger(n)) {\n        if (defaultVal !== undefined) {\n            return defaultVal;\n        }\n        else {\n            throw new Error(`${name} must be an integer`);\n        }\n    }\n    return n;\n}\nexport function determineProcessUserAgentProperties() {\n    return typeof process === 'undefined'\n        ? {}\n        : {\n            lang_version: process.version,\n            platform: process.platform,\n        };\n}\nexport function createApiKeyAuthenticator(apiKey) {\n    const authenticator = (request) => {\n        request.headers.Authorization = 'Bearer ' + apiKey;\n        return Promise.resolve();\n    };\n    // For testing\n    authenticator._apiKey = apiKey;\n    return authenticator;\n}\n/**\n * Joins an array of Uint8Arrays into a single Uint8Array\n */\nexport function concat(arrays) {\n    const totalLength = arrays.reduce((len, array) => len + array.length, 0);\n    const merged = new Uint8Array(totalLength);\n    let offset = 0;\n    arrays.forEach((array) => {\n        merged.set(array, offset);\n        offset += array.length;\n    });\n    return merged;\n}\n/**\n * Replaces Date objects with Unix timestamps\n */\nfunction dateTimeReplacer(key, value) {\n    if (this[key] instanceof Date) {\n        return Math.floor(this[key].getTime() / 1000).toString();\n    }\n    return value;\n}\n/**\n * JSON stringifies an Object, replacing Date objects with Unix timestamps\n */\nexport function jsonStringifyRequestData(data) {\n    return JSON.stringify(data, dateTimeReplacer);\n}\n/**\n * Inspects the given path to determine if the endpoint is for v1 or v2 API\n */\nexport function getAPIMode(path) {\n    if (!path) {\n        return 'v1';\n    }\n    return path.startsWith('/v2') ? 'v2' : 'v1';\n}\nexport function parseHttpHeaderAsString(header) {\n    if (Array.isArray(header)) {\n        return header.join(', ');\n    }\n    return String(header);\n}\nexport function parseHttpHeaderAsNumber(header) {\n    const number = Array.isArray(header) ? header[0] : header;\n    return Number(number);\n}\nexport function parseHeadersForFetch(headers) {\n    return Object.entries(headers).map(([key, value]) => {\n        return [key, parseHttpHeaderAsString(value)];\n    });\n}\n", "/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */\nexport class HttpClient {\n    /** The client name used for diagnostics. */\n    getClientName() {\n        throw new Error('getClientName not implemented.');\n    }\n    makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        throw new Error('makeRequest not implemented.');\n    }\n    /** Helper to make a consistent timeout error across implementations. */\n    static makeTimeoutError() {\n        const timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n        timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n        return timeoutErr;\n    }\n}\n// Public API accessible via Stripe.HttpClient\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = ['ECONNRESET', 'EPIPE'];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\nexport class HttpClientResponse {\n    constructor(statusCode, headers) {\n        this._statusCode = statusCode;\n        this._headers = headers;\n    }\n    getStatusCode() {\n        return this._statusCode;\n    }\n    getHeaders() {\n        return this._headers;\n    }\n    getRawResponse() {\n        throw new Error('getRawResponse not implemented.');\n    }\n    toStream(streamCompleteCallback) {\n        throw new Error('toStream not implemented.');\n    }\n    toJSON() {\n        throw new Error('toJSON not implemented.');\n    }\n}\n", "import { parseHeadersForFetch } from '../utils.js';\nimport { HttpClient, HttpClientResponse, } from './HttpClient.js';\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */\nexport class FetchHttpClient extends HttpClient {\n    constructor(fetchFn) {\n        super();\n        // Default to global fetch if available\n        if (!fetchFn) {\n            if (!globalThis.fetch) {\n                throw new Error('fetch() function not provided and is not defined in the global scope. ' +\n                    'You must provide a fetch implementation.');\n            }\n            fetchFn = globalThis.fetch;\n        }\n        // Both timeout behaviors differs from Node:\n        // - Fetch uses a single timeout for the entire length of the request.\n        // - Node is more fine-grained and resets the timeout after each stage of the request.\n        if (globalThis.AbortController) {\n            // Utilise native AbortController if available\n            // AbortController was added in Node v15.0.0, v14.17.0\n            this._fetchFn = FetchHttpClient.makeFetchWithAbortTimeout(fetchFn);\n        }\n        else {\n            // Fall back to racing against a timeout promise if not available in the runtime\n            // This does not actually cancel the underlying fetch operation or resources\n            this._fetchFn = FetchHttpClient.makeFetchWithRaceTimeout(fetchFn);\n        }\n    }\n    static makeFetchWithRaceTimeout(fetchFn) {\n        return (url, init, timeout) => {\n            let pendingTimeoutId;\n            const timeoutPromise = new Promise((_, reject) => {\n                pendingTimeoutId = setTimeout(() => {\n                    pendingTimeoutId = null;\n                    reject(HttpClient.makeTimeoutError());\n                }, timeout);\n            });\n            const fetchPromise = fetchFn(url, init);\n            return Promise.race([fetchPromise, timeoutPromise]).finally(() => {\n                if (pendingTimeoutId) {\n                    clearTimeout(pendingTimeoutId);\n                }\n            });\n        };\n    }\n    static makeFetchWithAbortTimeout(fetchFn) {\n        return async (url, init, timeout) => {\n            // Use AbortController because AbortSignal.timeout() was added later in Node v17.3.0, v16.14.0\n            const abort = new AbortController();\n            let timeoutId = setTimeout(() => {\n                timeoutId = null;\n                abort.abort(HttpClient.makeTimeoutError());\n            }, timeout);\n            try {\n                return await fetchFn(url, Object.assign(Object.assign({}, init), { signal: abort.signal }));\n            }\n            catch (err) {\n                // Some implementations, like node-fetch, do not respect the reason passed to AbortController.abort()\n                // and instead it always throws an AbortError\n                // We catch this case to normalise all timeout errors\n                if (err.name === 'AbortError') {\n                    throw HttpClient.makeTimeoutError();\n                }\n                else {\n                    throw err;\n                }\n            }\n            finally {\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n            }\n        };\n    }\n    /** @override. */\n    getClientName() {\n        return 'fetch';\n    }\n    async makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        const isInsecureConnection = protocol === 'http';\n        const url = new URL(path, `${isInsecureConnection ? 'http' : 'https'}://${host}`);\n        url.port = port;\n        // For methods which expect payloads, we should always pass a body value\n        // even when it is empty. Without this, some JS runtimes (eg. Deno) will\n        // inject a second Content-Length header. See https://github.com/stripe/stripe-node/issues/1519\n        // for more details.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        const body = requestData || (methodHasPayload ? '' : undefined);\n        const res = await this._fetchFn(url.toString(), {\n            method,\n            headers: parseHeadersForFetch(headers),\n            body: typeof body === 'object' ? JSON.stringify(body) : body,\n        }, timeout);\n        return new FetchHttpClientResponse(res);\n    }\n}\nexport class FetchHttpClientResponse extends HttpClientResponse {\n    constructor(res) {\n        super(res.status, FetchHttpClientResponse._transformHeadersToObject(res.headers));\n        this._res = res;\n    }\n    getRawResponse() {\n        return this._res;\n    }\n    toStream(streamCompleteCallback) {\n        // Unfortunately `fetch` does not have event handlers for when the stream is\n        // completely read. We therefore invoke the streamCompleteCallback right\n        // away. This callback emits a response event with metadata and completes\n        // metrics, so it's ok to do this without waiting for the stream to be\n        // completely read.\n        streamCompleteCallback();\n        // Fetch's `body` property is expected to be a readable stream of the body.\n        return this._res.body;\n    }\n    toJSON() {\n        return this._res.json();\n    }\n    static _transformHeadersToObject(headers) {\n        // Fetch uses a Headers instance so this must be converted to a barebones\n        // JS object to meet the HttpClient interface.\n        const headersObj = {};\n        for (const entry of headers) {\n            if (!Array.isArray(entry) || entry.length != 2) {\n                throw new Error('Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.');\n            }\n            headersObj[entry[0]] = entry[1];\n        }\n        return headersObj;\n    }\n}\n", "/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nexport class CryptoProvider {\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignature(payload, secret) {\n        throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignatureAsync(payload, secret) {\n        throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n    /**\n     * Computes a SHA-256 hash of the data.\n     */\n    computeSHA256Async(data) {\n        throw new Error('computeSHA256 not implemented.');\n    }\n}\n/**\n * If the crypto provider only supports asynchronous operations,\n * throw CryptoProviderOnlySupportsAsyncError instead of\n * a generic error so that the caller can choose to provide\n * a more helpful error message to direct the user to use\n * an asynchronous pathway.\n */\nexport class CryptoProviderOnlySupportsAsyncError extends Error {\n}\n", "import { CryptoProvider, CryptoProviderOnlySupportsAsyncError, } from './CryptoProvider.js';\n/**\n * `CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n *\n * This only supports asynchronous operations.\n */\nexport class SubtleCryptoProvider extends CryptoProvider {\n    constructor(subtleCrypto) {\n        super();\n        // If no subtle crypto is interface, default to the global namespace. This\n        // is to allow custom interfaces (eg. using the Node webcrypto interface in\n        // tests).\n        this.subtleCrypto = subtleCrypto || crypto.subtle;\n    }\n    /** @override */\n    computeHMACSignature(payload, secret) {\n        throw new CryptoProviderOnlySupportsAsyncError('SubtleCryptoProvider cannot be used in a synchronous context.');\n    }\n    /** @override */\n    async computeHMACSignatureAsync(payload, secret) {\n        const encoder = new TextEncoder();\n        const key = await this.subtleCrypto.importKey('raw', encoder.encode(secret), {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' },\n        }, false, ['sign']);\n        const signatureBuffer = await this.subtleCrypto.sign('hmac', key, encoder.encode(payload));\n        // crypto.subtle returns the signature in base64 format. This must be\n        // encoded in hex to match the CryptoProvider contract. We map each byte in\n        // the buffer to its corresponding hex octet and then combine into a string.\n        const signatureBytes = new Uint8Array(signatureBuffer);\n        const signatureHexCodes = new Array(signatureBytes.length);\n        for (let i = 0; i < signatureBytes.length; i++) {\n            signatureHexCodes[i] = byteHexMapping[signatureBytes[i]];\n        }\n        return signatureHexCodes.join('');\n    }\n    /** @override */\n    async computeSHA256Async(data) {\n        return new Uint8Array(await this.subtleCrypto.digest('SHA-256', data));\n    }\n}\n// Cached mapping of byte to hex representation. We do this once to avoid re-\n// computing every time we need to convert the result of a signature to hex.\nconst byteHexMapping = new Array(256);\nfor (let i = 0; i < byteHexMapping.length; i++) {\n    byteHexMapping[i] = i.toString(16).padStart(2, '0');\n}\n", "import { FetchHttpClient } from '../net/FetchHttpClient.js';\nimport { SubtleCryptoProvider } from '../crypto/SubtleCryptoProvider.js';\n/**\n * Interface encapsulating various utility functions whose\n * implementations depend on the platform / JS runtime.\n */\nexport class PlatformFunctions {\n    constructor() {\n        this._fetchFn = null;\n        this._agent = null;\n    }\n    /**\n     * Gets uname with Node's built-in `exec` function, if available.\n     */\n    getUname() {\n        throw new Error('getUname not implemented.');\n    }\n    /**\n     * Generates a v4 UUID. See https://stackoverflow.com/a/2117523\n     */\n    uuid4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0;\n            const v = c === 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }\n    /**\n     * Compares strings in constant time.\n     */\n    secureCompare(a, b) {\n        // return early here if buffer lengths are not equal\n        if (a.length !== b.length) {\n            return false;\n        }\n        const len = a.length;\n        let result = 0;\n        for (let i = 0; i < len; ++i) {\n            result |= a.charCodeAt(i) ^ b.charCodeAt(i);\n        }\n        return result === 0;\n    }\n    /**\n     * Creates an event emitter.\n     */\n    createEmitter() {\n        throw new Error('createEmitter not implemented.');\n    }\n    /**\n     * Checks if the request data is a stream. If so, read the entire stream\n     * to a buffer and return the buffer.\n     */\n    tryBufferData(data) {\n        throw new Error('tryBufferData not implemented.');\n    }\n    /**\n     * Creates an HTTP client which uses the Node `http` and `https` packages\n     * to issue requests.\n     */\n    createNodeHttpClient(agent) {\n        throw new Error('createNodeHttpClient not implemented.');\n    }\n    /**\n     * Creates an HTTP client for issuing Stripe API requests which uses the Web\n     * Fetch API.\n     *\n     * A fetch function can optionally be passed in as a parameter. If none is\n     * passed, will default to the default `fetch` function in the global scope.\n     */\n    createFetchHttpClient(fetchFn) {\n        return new FetchHttpClient(fetchFn);\n    }\n    /**\n     * Creates an HTTP client using runtime-specific APIs.\n     */\n    createDefaultHttpClient() {\n        throw new Error('createDefaultHttpClient not implemented.');\n    }\n    /**\n     * Creates a CryptoProvider which uses the Node `crypto` package for its computations.\n     */\n    createNodeCryptoProvider() {\n        throw new Error('createNodeCryptoProvider not implemented.');\n    }\n    /**\n     * Creates a CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n     */\n    createSubtleCryptoProvider(subtleCrypto) {\n        return new SubtleCryptoProvider(subtleCrypto);\n    }\n    createDefaultCryptoProvider() {\n        throw new Error('createDefaultCryptoProvider not implemented.');\n    }\n}\n", "/**\n * @private\n * (For internal use in stripe-node.)\n * Wrapper around the Event Web API.\n */\nclass _StripeEvent extends Event {\n    constructor(eventName, data) {\n        super(eventName);\n        this.data = data;\n    }\n}\n/** Minimal EventEmitter wrapper around EventTarget. */\nexport class StripeEmitter {\n    constructor() {\n        this.eventTarget = new EventTarget();\n        this.listenerMapping = new Map();\n    }\n    on(eventName, listener) {\n        const listenerWrapper = (event) => {\n            listener(event.data);\n        };\n        this.listenerMapping.set(listener, listenerWrapper);\n        return this.eventTarget.addEventListener(eventName, listenerWrapper);\n    }\n    removeListener(eventName, listener) {\n        const listenerWrapper = this.listenerMapping.get(listener);\n        this.listenerMapping.delete(listener);\n        return this.eventTarget.removeEventListener(eventName, listenerWrapper);\n    }\n    once(eventName, listener) {\n        const listenerWrapper = (event) => {\n            listener(event.data);\n        };\n        this.listenerMapping.set(listener, listenerWrapper);\n        return this.eventTarget.addEventListener(eventName, listenerWrapper, {\n            once: true,\n        });\n    }\n    emit(eventName, data) {\n        return this.eventTarget.dispatchEvent(new _StripeEvent(eventName, data));\n    }\n}\n", "import { PlatformFunctions } from './PlatformFunctions.js';\nimport { StripeEmitter } from '../StripeEmitter.js';\n/**\n * Specializes WebPlatformFunctions using APIs available in Web workers.\n */\nexport class WebPlatformFunctions extends PlatformFunctions {\n    /** @override */\n    getUname() {\n        return Promise.resolve(null);\n    }\n    /** @override */\n    createEmitter() {\n        return new StripeEmitter();\n    }\n    /** @override */\n    tryBufferData(data) {\n        if (data.file.data instanceof ReadableStream) {\n            throw new Error('Uploading a file as a stream is not supported in non-Node environments. Please open or upvote an issue at github.com/stripe/stripe-node if you use this, detailing your use-case.');\n        }\n        return Promise.resolve(data);\n    }\n    /** @override */\n    createNodeHttpClient() {\n        throw new Error('Stripe: `createNodeHttpClient()` is not available in non-Node environments. Please use `createFetchHttpClient()` instead.');\n    }\n    /** @override */\n    createDefaultHttpClient() {\n        return super.createFetchHttpClient();\n    }\n    /** @override */\n    createNodeCryptoProvider() {\n        throw new Error('Stripe: `createNodeCryptoProvider()` is not available in non-Node environments. Please use `createSubtleCryptoProvider()` instead.');\n    }\n    /** @override */\n    createDefaultCryptoProvider() {\n        return this.createSubtleCryptoProvider();\n    }\n}\n", "/* eslint-disable camelcase */\n/* eslint-disable no-warning-comments */\nexport const generateV1Error = (rawStripeError) => {\n    switch (rawStripeError.type) {\n        case 'card_error':\n            return new StripeCardError(rawStripeError);\n        case 'invalid_request_error':\n            return new StripeInvalidRequestError(rawStripeError);\n        case 'api_error':\n            return new StripeAPIError(rawStripeError);\n        case 'authentication_error':\n            return new StripeAuthenticationError(rawStripeError);\n        case 'rate_limit_error':\n            return new StripeRateLimitError(rawStripeError);\n        case 'idempotency_error':\n            return new StripeIdempotencyError(rawStripeError);\n        case 'invalid_grant':\n            return new StripeInvalidGrantError(rawStripeError);\n        default:\n            return new StripeUnknownError(rawStripeError);\n    }\n};\n// eslint-disable-next-line complexity\nexport const generateV2Error = (rawStripeError) => {\n    switch (rawStripeError.type) {\n        // switchCases: The beginning of the section generated from our OpenAPI spec\n        case 'temporary_session_expired':\n            return new TemporarySessionExpiredError(rawStripeError);\n        // switchCases: The end of the section generated from our OpenAPI spec\n    }\n    // Special handling for requests with missing required fields in V2 APIs.\n    // invalid_field response in V2 APIs returns the field 'code' instead of 'type'.\n    switch (rawStripeError.code) {\n        case 'invalid_fields':\n            return new StripeInvalidRequestError(rawStripeError);\n    }\n    return generateV1Error(rawStripeError);\n};\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */\nexport class StripeError extends Error {\n    constructor(raw = {}, type = null) {\n        var _a;\n        super(raw.message);\n        this.type = type || this.constructor.name;\n        this.raw = raw;\n        this.rawType = raw.type;\n        this.code = raw.code;\n        this.doc_url = raw.doc_url;\n        this.param = raw.param;\n        this.detail = raw.detail;\n        this.headers = raw.headers;\n        this.requestId = raw.requestId;\n        this.statusCode = raw.statusCode;\n        this.message = (_a = raw.message) !== null && _a !== void 0 ? _a : '';\n        this.userMessage = raw.user_message;\n        this.charge = raw.charge;\n        this.decline_code = raw.decline_code;\n        this.payment_intent = raw.payment_intent;\n        this.payment_method = raw.payment_method;\n        this.payment_method_type = raw.payment_method_type;\n        this.setup_intent = raw.setup_intent;\n        this.source = raw.source;\n    }\n}\n/**\n * Helper factory which takes raw stripe errors and outputs wrapping instances\n */\nStripeError.generate = generateV1Error;\n// Specific Stripe Error types:\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */\nexport class StripeCardError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeCardError');\n    }\n}\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */\nexport class StripeInvalidRequestError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeInvalidRequestError');\n    }\n}\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */\nexport class StripeAPIError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeAPIError');\n    }\n}\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */\nexport class StripeAuthenticationError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeAuthenticationError');\n    }\n}\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */\nexport class StripePermissionError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripePermissionError');\n    }\n}\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */\nexport class StripeRateLimitError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeRateLimitError');\n    }\n}\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */\nexport class StripeConnectionError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeConnectionError');\n    }\n}\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */\nexport class StripeSignatureVerificationError extends StripeError {\n    constructor(header, payload, raw = {}) {\n        super(raw, 'StripeSignatureVerificationError');\n        this.header = header;\n        this.payload = payload;\n    }\n}\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */\nexport class StripeIdempotencyError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeIdempotencyError');\n    }\n}\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */\nexport class StripeInvalidGrantError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeInvalidGrantError');\n    }\n}\n/**\n * Any other error from Stripe not specifically captured above\n */\nexport class StripeUnknownError extends StripeError {\n    constructor(raw = {}) {\n        super(raw, 'StripeUnknownError');\n    }\n}\n// classDefinitions: The beginning of the section generated from our OpenAPI spec\nexport class TemporarySessionExpiredError extends StripeError {\n    constructor(rawStripeError = {}) {\n        super(rawStripeError, 'TemporarySessionExpiredError');\n    }\n}\n// classDefinitions: The end of the section generated from our OpenAPI spec\n", "import { StripeAPIError, StripeAuthenticationError, StripeConnectionError, StripeError, StripePermissionError, StripeRateLimitError, generateV1Error, generateV2Error, } from './Error.js';\nimport { HttpClient } from './net/HttpClient.js';\nimport { emitWarning, jsonStringifyRequestData, normalizeHeaders, queryStringifyRequestData, removeNullish, getAPIMode, getOptionsFromArgs, getDataFromArgs, parseHttpHeaderAsString, parseHttpHeaderAsNumber, } from './utils.js';\nconst MAX_RETRY_AFTER_WAIT = 60;\nexport class RequestSender {\n    constructor(stripe, maxBufferedRequestMetric) {\n        this._stripe = stripe;\n        this._maxBufferedRequestMetric = maxBufferedRequestMetric;\n    }\n    _addHeadersDirectlyToObject(obj, headers) {\n        // For convenience, make some headers easily accessible on\n        // lastResponse.\n        // NOTE: Stripe responds with lowercase header names/keys.\n        obj.requestId = headers['request-id'];\n        obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n        obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n        obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n    }\n    _makeResponseEvent(requestEvent, statusCode, headers) {\n        const requestEndTime = Date.now();\n        const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n        return removeNullish({\n            api_version: headers['stripe-version'],\n            account: headers['stripe-account'],\n            idempotency_key: headers['idempotency-key'],\n            method: requestEvent.method,\n            path: requestEvent.path,\n            status: statusCode,\n            request_id: this._getRequestId(headers),\n            elapsed: requestDurationMs,\n            request_start_time: requestEvent.request_start_time,\n            request_end_time: requestEndTime,\n        });\n    }\n    _getRequestId(headers) {\n        return headers['request-id'];\n    }\n    /**\n     * Used by methods with spec.streaming === true. For these methods, we do not\n     * buffer successful responses into memory or do parse them into stripe\n     * objects, we delegate that all of that to the user and pass back the raw\n     * http.Response object to the callback.\n     *\n     * (Unsuccessful responses shouldn't make it here, they should\n     * still be buffered/parsed and handled by _jsonResponseHandler -- see\n     * makeRequest)\n     */\n    _streamingResponseHandler(requestEvent, usage, callback) {\n        return (res) => {\n            const headers = res.getHeaders();\n            const streamCompleteCallback = () => {\n                const responseEvent = this._makeResponseEvent(requestEvent, res.getStatusCode(), headers);\n                this._stripe._emitter.emit('response', responseEvent);\n                this._recordRequestMetrics(this._getRequestId(headers), responseEvent.elapsed, usage);\n            };\n            const stream = res.toStream(streamCompleteCallback);\n            // This is here for backwards compatibility, as the stream is a raw\n            // HTTP response in Node and the legacy behavior was to mutate this\n            // response.\n            this._addHeadersDirectlyToObject(stream, headers);\n            return callback(null, stream);\n        };\n    }\n    /**\n     * Default handler for Stripe responses. Buffers the response into memory,\n     * parses the JSON and returns it (i.e. passes it to the callback) if there\n     * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n     */\n    _jsonResponseHandler(requestEvent, apiMode, usage, callback) {\n        return (res) => {\n            const headers = res.getHeaders();\n            const requestId = this._getRequestId(headers);\n            const statusCode = res.getStatusCode();\n            const responseEvent = this._makeResponseEvent(requestEvent, statusCode, headers);\n            this._stripe._emitter.emit('response', responseEvent);\n            res\n                .toJSON()\n                .then((jsonResponse) => {\n                if (jsonResponse.error) {\n                    let err;\n                    // Convert OAuth error responses into a standard format\n                    // so that the rest of the error logic can be shared\n                    if (typeof jsonResponse.error === 'string') {\n                        jsonResponse.error = {\n                            type: jsonResponse.error,\n                            message: jsonResponse.error_description,\n                        };\n                    }\n                    jsonResponse.error.headers = headers;\n                    jsonResponse.error.statusCode = statusCode;\n                    jsonResponse.error.requestId = requestId;\n                    if (statusCode === 401) {\n                        err = new StripeAuthenticationError(jsonResponse.error);\n                    }\n                    else if (statusCode === 403) {\n                        err = new StripePermissionError(jsonResponse.error);\n                    }\n                    else if (statusCode === 429) {\n                        err = new StripeRateLimitError(jsonResponse.error);\n                    }\n                    else if (apiMode === 'v2') {\n                        err = generateV2Error(jsonResponse.error);\n                    }\n                    else {\n                        err = generateV1Error(jsonResponse.error);\n                    }\n                    throw err;\n                }\n                return jsonResponse;\n            }, (e) => {\n                throw new StripeAPIError({\n                    message: 'Invalid JSON received from the Stripe API',\n                    exception: e,\n                    requestId: headers['request-id'],\n                });\n            })\n                .then((jsonResponse) => {\n                this._recordRequestMetrics(requestId, responseEvent.elapsed, usage);\n                // Expose raw response object.\n                const rawResponse = res.getRawResponse();\n                this._addHeadersDirectlyToObject(rawResponse, headers);\n                Object.defineProperty(jsonResponse, 'lastResponse', {\n                    enumerable: false,\n                    writable: false,\n                    value: rawResponse,\n                });\n                callback(null, jsonResponse);\n            }, (e) => callback(e, null));\n        };\n    }\n    static _generateConnectionErrorMessage(requestRetries) {\n        return `An error occurred with our connection to Stripe.${requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''}`;\n    }\n    // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n    static _shouldRetry(res, numRetries, maxRetries, error) {\n        if (error &&\n            numRetries === 0 &&\n            HttpClient.CONNECTION_CLOSED_ERROR_CODES.includes(error.code)) {\n            return true;\n        }\n        // Do not retry if we are out of retries.\n        if (numRetries >= maxRetries) {\n            return false;\n        }\n        // Retry on connection error.\n        if (!res) {\n            return true;\n        }\n        // The API may ask us not to retry (e.g., if doing so would be a no-op)\n        // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n        if (res.getHeaders()['stripe-should-retry'] === 'false') {\n            return false;\n        }\n        if (res.getHeaders()['stripe-should-retry'] === 'true') {\n            return true;\n        }\n        // Retry on conflict errors.\n        if (res.getStatusCode() === 409) {\n            return true;\n        }\n        // Retry on 500, 503, and other internal errors.\n        //\n        // Note that we expect the stripe-should-retry header to be false\n        // in most cases when a 500 is returned, since our idempotency framework\n        // would typically replay it anyway.\n        if (res.getStatusCode() >= 500) {\n            return true;\n        }\n        return false;\n    }\n    _getSleepTimeInMS(numRetries, retryAfter = null) {\n        const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n        const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n        // Apply exponential backoff with initialNetworkRetryDelay on the\n        // number of numRetries so far as inputs. Do not allow the number to exceed\n        // maxNetworkRetryDelay.\n        let sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(2, numRetries - 1), maxNetworkRetryDelay);\n        // Apply some jitter by randomizing the value in the range of\n        // (sleepSeconds / 2) to (sleepSeconds).\n        sleepSeconds *= 0.5 * (1 + Math.random());\n        // But never sleep less than the base sleep seconds.\n        sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n        // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n        if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n            sleepSeconds = Math.max(sleepSeconds, retryAfter);\n        }\n        return sleepSeconds * 1000;\n    }\n    // Max retries can be set on a per request basis. Favor those over the global setting\n    _getMaxNetworkRetries(settings = {}) {\n        return settings.maxNetworkRetries !== undefined &&\n            Number.isInteger(settings.maxNetworkRetries)\n            ? settings.maxNetworkRetries\n            : this._stripe.getMaxNetworkRetries();\n    }\n    _defaultIdempotencyKey(method, settings, apiMode) {\n        // If this is a POST and we allow multiple retries, ensure an idempotency key.\n        const maxRetries = this._getMaxNetworkRetries(settings);\n        const genKey = () => `stripe-node-retry-${this._stripe._platformFunctions.uuid4()}`;\n        // more verbose than it needs to be, but gives clear separation between V1 and V2 behavior\n        if (apiMode === 'v2') {\n            if (method === 'POST' || method === 'DELETE') {\n                return genKey();\n            }\n        }\n        else if (apiMode === 'v1') {\n            if (method === 'POST' && maxRetries > 0) {\n                return genKey();\n            }\n        }\n        return null;\n    }\n    _makeHeaders({ contentType, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings, stripeAccount, stripeContext, apiMode, }) {\n        const defaultHeaders = {\n            Accept: 'application/json',\n            'Content-Type': contentType,\n            'User-Agent': this._getUserAgentString(apiMode),\n            'X-Stripe-Client-User-Agent': clientUserAgent,\n            'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n            'Stripe-Version': apiVersion,\n            'Stripe-Account': stripeAccount,\n            'Stripe-Context': stripeContext,\n            'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings, apiMode),\n        };\n        // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n        //   A user agent SHOULD send a Content-Length in a request message when\n        //   no Transfer-Encoding is sent and the request method defines a meaning\n        //   for an enclosed payload body.  For example, a Content-Length header\n        //   field is normally sent in a POST request even when the value is 0\n        //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n        //   Content-Length header field when the request message does not contain\n        //   a payload body and the method semantics do not anticipate such a\n        //   body.\n        //\n        // These method types are expected to have bodies and so we should always\n        // include a Content-Length.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        // If a content length was specified, we always include it regardless of\n        // whether the method semantics anticipate such a body. This keeps us\n        // consistent with historical behavior. We do however want to warn on this\n        // and fix these cases as they are semantically incorrect.\n        if (methodHasPayload || contentLength) {\n            if (!methodHasPayload) {\n                emitWarning(`${method} method had non-zero contentLength but no payload is expected for this verb`);\n            }\n            defaultHeaders['Content-Length'] = contentLength;\n        }\n        return Object.assign(removeNullish(defaultHeaders), \n        // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n        normalizeHeaders(userSuppliedHeaders));\n    }\n    _getUserAgentString(apiMode) {\n        const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n        const appInfo = this._stripe._appInfo\n            ? this._stripe.getAppInfoAsString()\n            : '';\n        return `Stripe/${apiMode} NodeBindings/${packageVersion} ${appInfo}`.trim();\n    }\n    _getTelemetryHeader() {\n        if (this._stripe.getTelemetryEnabled() &&\n            this._stripe._prevRequestMetrics.length > 0) {\n            const metrics = this._stripe._prevRequestMetrics.shift();\n            return JSON.stringify({\n                last_request_metrics: metrics,\n            });\n        }\n    }\n    _recordRequestMetrics(requestId, requestDurationMs, usage) {\n        if (this._stripe.getTelemetryEnabled() && requestId) {\n            if (this._stripe._prevRequestMetrics.length > this._maxBufferedRequestMetric) {\n                emitWarning('Request metrics buffer is full, dropping telemetry message.');\n            }\n            else {\n                const m = {\n                    request_id: requestId,\n                    request_duration_ms: requestDurationMs,\n                };\n                if (usage && usage.length > 0) {\n                    m.usage = usage;\n                }\n                this._stripe._prevRequestMetrics.push(m);\n            }\n        }\n    }\n    _rawRequest(method, path, params, options) {\n        const requestPromise = new Promise((resolve, reject) => {\n            let opts;\n            try {\n                const requestMethod = method.toUpperCase();\n                if (requestMethod !== 'POST' &&\n                    params &&\n                    Object.keys(params).length !== 0) {\n                    throw new Error('rawRequest only supports params on POST requests. Please pass null and add your parameters to path.');\n                }\n                const args = [].slice.call([params, options]);\n                // Pull request data and options (headers, auth) from args.\n                const dataFromArgs = getDataFromArgs(args);\n                const data = requestMethod === 'POST' ? Object.assign({}, dataFromArgs) : null;\n                const calculatedOptions = getOptionsFromArgs(args);\n                const headers = calculatedOptions.headers;\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const authenticator = calculatedOptions.authenticator;\n                opts = {\n                    requestMethod,\n                    requestPath: path,\n                    bodyData: data,\n                    queryData: {},\n                    authenticator,\n                    headers,\n                    host: calculatedOptions.host,\n                    streaming: !!calculatedOptions.streaming,\n                    settings: {},\n                    usage: ['raw_request'],\n                };\n            }\n            catch (err) {\n                reject(err);\n                return;\n            }\n            function requestCallback(err, response) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }\n            const { headers, settings } = opts;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const authenticator = opts.authenticator;\n            this._request(opts.requestMethod, opts.host, path, opts.bodyData, authenticator, { headers, settings, streaming: opts.streaming }, opts.usage, requestCallback);\n        });\n        return requestPromise;\n    }\n    _request(method, host, path, data, authenticator, options, usage = [], callback, requestDataProcessor = null) {\n        var _a;\n        let requestData;\n        authenticator = (_a = authenticator !== null && authenticator !== void 0 ? authenticator : this._stripe._authenticator) !== null && _a !== void 0 ? _a : null;\n        const apiMode = getAPIMode(path);\n        const retryRequest = (requestFn, apiVersion, headers, requestRetries, retryAfter) => {\n            return setTimeout(requestFn, this._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n        };\n        const makeRequest = (apiVersion, headers, numRetries) => {\n            // timeout can be set on a per-request basis. Favor that over the global setting\n            const timeout = options.settings &&\n                options.settings.timeout &&\n                Number.isInteger(options.settings.timeout) &&\n                options.settings.timeout >= 0\n                ? options.settings.timeout\n                : this._stripe.getApiField('timeout');\n            const request = {\n                host: host || this._stripe.getApiField('host'),\n                port: this._stripe.getApiField('port'),\n                path: path,\n                method: method,\n                headers: Object.assign({}, headers),\n                body: requestData,\n                protocol: this._stripe.getApiField('protocol'),\n            };\n            authenticator(request)\n                .then(() => {\n                const req = this._stripe\n                    .getApiField('httpClient')\n                    .makeRequest(request.host, request.port, request.path, request.method, request.headers, request.body, request.protocol, timeout);\n                const requestStartTime = Date.now();\n                const requestEvent = removeNullish({\n                    api_version: apiVersion,\n                    account: parseHttpHeaderAsString(headers['Stripe-Account']),\n                    idempotency_key: parseHttpHeaderAsString(headers['Idempotency-Key']),\n                    method,\n                    path,\n                    request_start_time: requestStartTime,\n                });\n                const requestRetries = numRetries || 0;\n                const maxRetries = this._getMaxNetworkRetries(options.settings || {});\n                this._stripe._emitter.emit('request', requestEvent);\n                req\n                    .then((res) => {\n                    if (RequestSender._shouldRetry(res, requestRetries, maxRetries)) {\n                        return retryRequest(makeRequest, apiVersion, headers, requestRetries, parseHttpHeaderAsNumber(res.getHeaders()['retry-after']));\n                    }\n                    else if (options.streaming && res.getStatusCode() < 400) {\n                        return this._streamingResponseHandler(requestEvent, usage, callback)(res);\n                    }\n                    else {\n                        return this._jsonResponseHandler(requestEvent, apiMode, usage, callback)(res);\n                    }\n                })\n                    .catch((error) => {\n                    if (RequestSender._shouldRetry(null, requestRetries, maxRetries, error)) {\n                        return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n                    }\n                    else {\n                        const isTimeoutError = error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n                        return callback(new StripeConnectionError({\n                            message: isTimeoutError\n                                ? `Request aborted due to timeout being reached (${timeout}ms)`\n                                : RequestSender._generateConnectionErrorMessage(requestRetries),\n                            detail: error,\n                        }));\n                    }\n                });\n            })\n                .catch((e) => {\n                throw new StripeError({\n                    message: 'Unable to authenticate the request',\n                    exception: e,\n                });\n            });\n        };\n        const prepareAndMakeRequest = (error, data) => {\n            if (error) {\n                return callback(error);\n            }\n            requestData = data;\n            this._stripe.getClientUserAgent((clientUserAgent) => {\n                const apiVersion = this._stripe.getApiField('version');\n                const headers = this._makeHeaders({\n                    contentType: apiMode == 'v2'\n                        ? 'application/json'\n                        : 'application/x-www-form-urlencoded',\n                    contentLength: requestData.length,\n                    apiVersion: apiVersion,\n                    clientUserAgent,\n                    method,\n                    userSuppliedHeaders: options.headers,\n                    userSuppliedSettings: options.settings,\n                    stripeAccount: apiMode == 'v2' ? null : this._stripe.getApiField('stripeAccount'),\n                    stripeContext: apiMode == 'v2' ? this._stripe.getApiField('stripeContext') : null,\n                    apiMode: apiMode,\n                });\n                makeRequest(apiVersion, headers, 0);\n            });\n        };\n        if (requestDataProcessor) {\n            requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n        }\n        else {\n            let stringifiedData;\n            if (apiMode == 'v2') {\n                stringifiedData = data ? jsonStringifyRequestData(data) : '';\n            }\n            else {\n                stringifiedData = queryStringifyRequestData(data || {}, apiMode);\n            }\n            prepareAndMakeRequest(null, stringifiedData);\n        }\n    }\n}\n", "import { callbackifyPromiseWithTimeout, getDataFromArgs, getAPIMode, } from './utils.js';\nclass V1Iterator {\n    constructor(firstPagePromise, requestArgs, spec, stripeResource) {\n        this.index = 0;\n        this.pagePromise = firstPagePromise;\n        this.promiseCache = { currentPromise: null };\n        this.requestArgs = requestArgs;\n        this.spec = spec;\n        this.stripeResource = stripeResource;\n    }\n    async iterate(pageResult) {\n        if (!(pageResult &&\n            pageResult.data &&\n            typeof pageResult.data.length === 'number')) {\n            throw Error('Unexpected: Stripe API response does not have a well-formed `data` array.');\n        }\n        const reverseIteration = isReverseIteration(this.requestArgs);\n        if (this.index < pageResult.data.length) {\n            const idx = reverseIteration\n                ? pageResult.data.length - 1 - this.index\n                : this.index;\n            const value = pageResult.data[idx];\n            this.index += 1;\n            return { value, done: false };\n        }\n        else if (pageResult.has_more) {\n            // Reset counter, request next page, and recurse.\n            this.index = 0;\n            this.pagePromise = this.getNextPage(pageResult);\n            const nextPageResult = await this.pagePromise;\n            return this.iterate(nextPageResult);\n        }\n        return { done: true, value: undefined };\n    }\n    /** @abstract */\n    getNextPage(_pageResult) {\n        throw new Error('Unimplemented');\n    }\n    async _next() {\n        return this.iterate(await this.pagePromise);\n    }\n    next() {\n        /**\n         * If a user calls `.next()` multiple times in parallel,\n         * return the same result until something has resolved\n         * to prevent page-turning race conditions.\n         */\n        if (this.promiseCache.currentPromise) {\n            return this.promiseCache.currentPromise;\n        }\n        const nextPromise = (async () => {\n            const ret = await this._next();\n            this.promiseCache.currentPromise = null;\n            return ret;\n        })();\n        this.promiseCache.currentPromise = nextPromise;\n        return nextPromise;\n    }\n}\nclass V1ListIterator extends V1Iterator {\n    getNextPage(pageResult) {\n        const reverseIteration = isReverseIteration(this.requestArgs);\n        const lastId = getLastId(pageResult, reverseIteration);\n        return this.stripeResource._makeRequest(this.requestArgs, this.spec, {\n            [reverseIteration ? 'ending_before' : 'starting_after']: lastId,\n        });\n    }\n}\nclass V1SearchIterator extends V1Iterator {\n    getNextPage(pageResult) {\n        if (!pageResult.next_page) {\n            throw Error('Unexpected: Stripe API response does not have a well-formed `next_page` field, but `has_more` was true.');\n        }\n        return this.stripeResource._makeRequest(this.requestArgs, this.spec, {\n            page: pageResult.next_page,\n        });\n    }\n}\nclass V2ListIterator {\n    constructor(firstPagePromise, requestArgs, spec, stripeResource) {\n        this.currentPageIterator = (async () => {\n            const page = await firstPagePromise;\n            return page.data[Symbol.iterator]();\n        })();\n        this.nextPageUrl = (async () => {\n            const page = await firstPagePromise;\n            return page.next_page_url || null;\n        })();\n        this.requestArgs = requestArgs;\n        this.spec = spec;\n        this.stripeResource = stripeResource;\n    }\n    async turnPage() {\n        const nextPageUrl = await this.nextPageUrl;\n        if (!nextPageUrl)\n            return null;\n        this.spec.fullPath = nextPageUrl;\n        const page = await this.stripeResource._makeRequest([], this.spec, {});\n        this.nextPageUrl = Promise.resolve(page.next_page_url);\n        this.currentPageIterator = Promise.resolve(page.data[Symbol.iterator]());\n        return this.currentPageIterator;\n    }\n    async next() {\n        {\n            const result = (await this.currentPageIterator).next();\n            if (!result.done)\n                return { done: false, value: result.value };\n        }\n        const nextPageIterator = await this.turnPage();\n        if (!nextPageIterator) {\n            return { done: true, value: undefined };\n        }\n        const result = nextPageIterator.next();\n        if (!result.done)\n            return { done: false, value: result.value };\n        return { done: true, value: undefined };\n    }\n}\nexport const makeAutoPaginationMethods = (stripeResource, requestArgs, spec, firstPagePromise) => {\n    const apiMode = getAPIMode(spec.fullPath || spec.path);\n    if (apiMode !== 'v2' && spec.methodType === 'search') {\n        return makeAutoPaginationMethodsFromIterator(new V1SearchIterator(firstPagePromise, requestArgs, spec, stripeResource));\n    }\n    if (apiMode !== 'v2' && spec.methodType === 'list') {\n        return makeAutoPaginationMethodsFromIterator(new V1ListIterator(firstPagePromise, requestArgs, spec, stripeResource));\n    }\n    if (apiMode === 'v2' && spec.methodType === 'list') {\n        return makeAutoPaginationMethodsFromIterator(new V2ListIterator(firstPagePromise, requestArgs, spec, stripeResource));\n    }\n    return null;\n};\nconst makeAutoPaginationMethodsFromIterator = (iterator) => {\n    const autoPagingEach = makeAutoPagingEach((...args) => iterator.next(...args));\n    const autoPagingToArray = makeAutoPagingToArray(autoPagingEach);\n    const autoPaginationMethods = {\n        autoPagingEach,\n        autoPagingToArray,\n        // Async iterator functions:\n        next: () => iterator.next(),\n        return: () => {\n            // This is required for `break`.\n            return {};\n        },\n        [getAsyncIteratorSymbol()]: () => {\n            return autoPaginationMethods;\n        },\n    };\n    return autoPaginationMethods;\n};\n/**\n * ----------------\n * Private Helpers:\n * ----------------\n */\nfunction getAsyncIteratorSymbol() {\n    if (typeof Symbol !== 'undefined' && Symbol.asyncIterator) {\n        return Symbol.asyncIterator;\n    }\n    // Follow the convention from libraries like iterall: https://github.com/leebyron/iterall#asynciterator-1\n    return '@@asyncIterator';\n}\nfunction getDoneCallback(args) {\n    if (args.length < 2) {\n        return null;\n    }\n    const onDone = args[1];\n    if (typeof onDone !== 'function') {\n        throw Error(`The second argument to autoPagingEach, if present, must be a callback function; received ${typeof onDone}`);\n    }\n    return onDone;\n}\n/**\n * We allow four forms of the `onItem` callback (the middle two being equivalent),\n *\n *   1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n *   2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n *   3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n *   4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n *\n * In addition to standard validation, this helper\n * coalesces the former forms into the latter form.\n */\nfunction getItemCallback(args) {\n    if (args.length === 0) {\n        return undefined;\n    }\n    const onItem = args[0];\n    if (typeof onItem !== 'function') {\n        throw Error(`The first argument to autoPagingEach, if present, must be a callback function; received ${typeof onItem}`);\n    }\n    // 4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n    if (onItem.length === 2) {\n        return onItem;\n    }\n    if (onItem.length > 2) {\n        throw Error(`The \\`onItem\\` callback function passed to autoPagingEach must accept at most two arguments; got ${onItem}`);\n    }\n    // This magically handles all three of these usecases (the latter two being functionally identical):\n    // 1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n    // 2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n    // 3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n    return function _onItem(item, next) {\n        const shouldContinue = onItem(item);\n        next(shouldContinue);\n    };\n}\nfunction getLastId(listResult, reverseIteration) {\n    const lastIdx = reverseIteration ? 0 : listResult.data.length - 1;\n    const lastItem = listResult.data[lastIdx];\n    const lastId = lastItem && lastItem.id;\n    if (!lastId) {\n        throw Error('Unexpected: No `id` found on the last item while auto-paging a list.');\n    }\n    return lastId;\n}\nfunction makeAutoPagingEach(asyncIteratorNext) {\n    return function autoPagingEach( /* onItem?, onDone? */) {\n        const args = [].slice.call(arguments);\n        const onItem = getItemCallback(args);\n        const onDone = getDoneCallback(args);\n        if (args.length > 2) {\n            throw Error(`autoPagingEach takes up to two arguments; received ${args}`);\n        }\n        const autoPagePromise = wrapAsyncIteratorWithCallback(asyncIteratorNext, \n        // @ts-ignore we might need a null check\n        onItem);\n        return callbackifyPromiseWithTimeout(autoPagePromise, onDone);\n    };\n}\nfunction makeAutoPagingToArray(autoPagingEach) {\n    return function autoPagingToArray(opts, onDone) {\n        const limit = opts && opts.limit;\n        if (!limit) {\n            throw Error('You must pass a `limit` option to autoPagingToArray, e.g., `autoPagingToArray({limit: 1000});`.');\n        }\n        if (limit > 10000) {\n            throw Error('You cannot specify a limit of more than 10,000 items to fetch in `autoPagingToArray`; use `autoPagingEach` to iterate through longer lists.');\n        }\n        const promise = new Promise((resolve, reject) => {\n            const items = [];\n            autoPagingEach((item) => {\n                items.push(item);\n                if (items.length >= limit) {\n                    return false;\n                }\n            })\n                .then(() => {\n                resolve(items);\n            })\n                .catch(reject);\n        });\n        // @ts-ignore\n        return callbackifyPromiseWithTimeout(promise, onDone);\n    };\n}\nfunction wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem) {\n    return new Promise((resolve, reject) => {\n        function handleIteration(iterResult) {\n            if (iterResult.done) {\n                resolve();\n                return;\n            }\n            const item = iterResult.value;\n            return new Promise((next) => {\n                // Bit confusing, perhaps; we pass a `resolve` fn\n                // to the user, so they can decide when and if to continue.\n                // They can return false, or a promise which resolves to false, to break.\n                onItem(item, next);\n            }).then((shouldContinue) => {\n                if (shouldContinue === false) {\n                    return handleIteration({ done: true, value: undefined });\n                }\n                else {\n                    return asyncIteratorNext().then(handleIteration);\n                }\n            });\n        }\n        asyncIteratorNext()\n            .then(handleIteration)\n            .catch(reject);\n    });\n}\nfunction isReverseIteration(requestArgs) {\n    const args = [].slice.call(requestArgs);\n    const dataFromArgs = getDataFromArgs(args);\n    return !!dataFromArgs.ending_before;\n}\n", "import { callbackifyPromiseWithTimeout, extractUrlParams } from './utils.js';\nimport { makeAutoPaginationMethods } from './autoPagination.js';\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\n *  If this is specified, path should not be specified.\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n *\n * <!-- Public API accessible via Stripe.StripeResource.method -->\n */\nexport function stripeMethod(spec) {\n    if (spec.path !== undefined && spec.fullPath !== undefined) {\n        throw new Error(`Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`);\n    }\n    return function (...args) {\n        const callback = typeof args[args.length - 1] == 'function' && args.pop();\n        spec.urlParams = extractUrlParams(spec.fullPath || this.createResourcePathWithSymbols(spec.path || ''));\n        const requestPromise = callbackifyPromiseWithTimeout(this._makeRequest(args, spec, {}), callback);\n        Object.assign(requestPromise, makeAutoPaginationMethods(this, args, spec, requestPromise));\n        return requestPromise;\n    };\n}\n", "import { getDataFromArgs, getOptionsFromArgs, makeURLInterpolator, protoExtend, queryStringifyRequestData, getAPIMode, } from './utils.js';\nimport { stripeMethod } from './StripeMethod.js';\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = protoExtend;\n// Expose method-creator\nStripeResource.method = stripeMethod;\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n    this._stripe = stripe;\n    if (deprecatedUrlData) {\n        throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n    }\n    this.basePath = makeURLInterpolator(\n    // @ts-ignore changing type of basePath\n    this.basePath || stripe.getApiField('basePath'));\n    // @ts-ignore changing type of path\n    this.resourcePath = this.path;\n    // @ts-ignore changing type of path\n    this.path = makeURLInterpolator(this.path);\n    this.initialize(...arguments);\n}\nStripeResource.prototype = {\n    _stripe: null,\n    // @ts-ignore the type of path changes in ctor\n    path: '',\n    resourcePath: '',\n    // Methods that don't use the API's default '/v1' path can override it with this setting.\n    basePath: null,\n    initialize() { },\n    // Function to override the default data processor. This allows full control\n    // over how a StripeResource's request data will get converted into an HTTP\n    // body. This is useful for non-standard HTTP requests. The function should\n    // take method name, data, and headers as arguments.\n    requestDataProcessor: null,\n    // Function to add a validation checks before sending the request, errors should\n    // be thrown, and they will be passed to the callback/promise.\n    validateRequest: null,\n    createFullPath(commandPath, urlData) {\n        const urlParts = [this.basePath(urlData), this.path(urlData)];\n        if (typeof commandPath === 'function') {\n            const computedCommandPath = commandPath(urlData);\n            // If we have no actual command path, we just omit it to avoid adding a\n            // trailing slash. This is important for top-level listing requests, which\n            // do not have a command path.\n            if (computedCommandPath) {\n                urlParts.push(computedCommandPath);\n            }\n        }\n        else {\n            urlParts.push(commandPath);\n        }\n        return this._joinUrlParts(urlParts);\n    },\n    // Creates a relative resource path with symbols left in (unlike\n    // createFullPath which takes some data to replace them with). For example it\n    // might produce: /invoices/{id}\n    createResourcePathWithSymbols(pathWithSymbols) {\n        // If there is no path beyond the resource path, we want to produce just\n        // /<resource path> rather than /<resource path>/.\n        if (pathWithSymbols) {\n            return `/${this._joinUrlParts([this.resourcePath, pathWithSymbols])}`;\n        }\n        else {\n            return `/${this.resourcePath}`;\n        }\n    },\n    _joinUrlParts(parts) {\n        // Replace any accidentally doubled up slashes. This previously used\n        // path.join, which would do this as well. Unfortunately we need to do this\n        // as the functions for creating paths are technically part of the public\n        // interface and so we need to preserve backwards compatibility.\n        return parts.join('/').replace(/\\/{2,}/g, '/');\n    },\n    _getRequestOpts(requestArgs, spec, overrideData) {\n        var _a;\n        // Extract spec values with defaults.\n        const requestMethod = (spec.method || 'GET').toUpperCase();\n        const usage = spec.usage || [];\n        const urlParams = spec.urlParams || [];\n        const encode = spec.encode || ((data) => data);\n        const isUsingFullPath = !!spec.fullPath;\n        const commandPath = makeURLInterpolator(isUsingFullPath ? spec.fullPath : spec.path || '');\n        // When using fullPath, we ignore the resource path as it should already be\n        // fully qualified.\n        const path = isUsingFullPath\n            ? spec.fullPath\n            : this.createResourcePathWithSymbols(spec.path);\n        // Don't mutate args externally.\n        const args = [].slice.call(requestArgs);\n        // Generate and validate url params.\n        const urlData = urlParams.reduce((urlData, param) => {\n            const arg = args.shift();\n            if (typeof arg !== 'string') {\n                throw new Error(`Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`);\n            }\n            urlData[param] = arg;\n            return urlData;\n        }, {});\n        // Pull request data and options (headers, auth) from args.\n        const dataFromArgs = getDataFromArgs(args);\n        const data = encode(Object.assign({}, dataFromArgs, overrideData));\n        const options = getOptionsFromArgs(args);\n        const host = options.host || spec.host;\n        const streaming = !!spec.streaming || !!options.streaming;\n        // Validate that there are no more args.\n        if (args.filter((x) => x != null).length) {\n            throw new Error(`Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`);\n        }\n        // When using full path, we can just invoke the URL interpolator directly\n        // as we don't need to use the resource to create a full path.\n        const requestPath = isUsingFullPath\n            ? commandPath(urlData)\n            : this.createFullPath(commandPath, urlData);\n        const headers = Object.assign(options.headers, spec.headers);\n        if (spec.validator) {\n            spec.validator(data, { headers });\n        }\n        const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n        const bodyData = dataInQuery ? null : data;\n        const queryData = dataInQuery ? data : {};\n        return {\n            requestMethod,\n            requestPath,\n            bodyData,\n            queryData,\n            authenticator: (_a = options.authenticator) !== null && _a !== void 0 ? _a : null,\n            headers,\n            host: host !== null && host !== void 0 ? host : null,\n            streaming,\n            settings: options.settings,\n            usage,\n        };\n    },\n    _makeRequest(requestArgs, spec, overrideData) {\n        return new Promise((resolve, reject) => {\n            var _a;\n            let opts;\n            try {\n                opts = this._getRequestOpts(requestArgs, spec, overrideData);\n            }\n            catch (err) {\n                reject(err);\n                return;\n            }\n            function requestCallback(err, response) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(spec.transformResponseData\n                        ? spec.transformResponseData(response)\n                        : response);\n                }\n            }\n            const emptyQuery = Object.keys(opts.queryData).length === 0;\n            const path = [\n                opts.requestPath,\n                emptyQuery ? '' : '?',\n                queryStringifyRequestData(opts.queryData, getAPIMode(opts.requestPath)),\n            ].join('');\n            const { headers, settings } = opts;\n            this._stripe._requestSender._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.authenticator, {\n                headers,\n                settings,\n                streaming: opts.streaming,\n            }, opts.usage, requestCallback, (_a = this.requestDataProcessor) === null || _a === void 0 ? void 0 : _a.bind(this));\n        });\n    },\n};\nexport { StripeResource };\n", "import { StripeError, StripeSignatureVerificationError } from './Error.js';\nimport { CryptoProviderOnlySupportsAsyncError, } from './crypto/CryptoProvider.js';\nexport function createWebhooks(platformFunctions) {\n    const Webhook = {\n        DEFAULT_TOLERANCE: 300,\n        signature: null,\n        constructEvent(payload, header, secret, tolerance, cryptoProvider, receivedAt) {\n            try {\n                if (!this.signature) {\n                    throw new Error('ERR: missing signature helper, unable to verify');\n                }\n                this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider, receivedAt);\n            }\n            catch (e) {\n                if (e instanceof CryptoProviderOnlySupportsAsyncError) {\n                    e.message +=\n                        '\\nUse `await constructEventAsync(...)` instead of `constructEvent(...)`';\n                }\n                throw e;\n            }\n            const jsonPayload = payload instanceof Uint8Array\n                ? JSON.parse(new TextDecoder('utf8').decode(payload))\n                : JSON.parse(payload);\n            return jsonPayload;\n        },\n        async constructEventAsync(payload, header, secret, tolerance, cryptoProvider, receivedAt) {\n            if (!this.signature) {\n                throw new Error('ERR: missing signature helper, unable to verify');\n            }\n            await this.signature.verifyHeaderAsync(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider, receivedAt);\n            const jsonPayload = payload instanceof Uint8Array\n                ? JSON.parse(new TextDecoder('utf8').decode(payload))\n                : JSON.parse(payload);\n            return jsonPayload;\n        },\n        /**\n         * Generates a header to be used for webhook mocking\n         *\n         * @typedef {object} opts\n         * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n         * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n         * @property {string} secret - Stripe webhook secret 'whsec_...'\n         * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n         * @property {string} signature - Computed webhook signature\n         * @property {CryptoProvider} cryptoProvider - Crypto provider to use for computing the signature if none was provided. Defaults to NodeCryptoProvider.\n         */\n        generateTestHeaderString: function (opts) {\n            const preparedOpts = prepareOptions(opts);\n            const signature = preparedOpts.signature ||\n                preparedOpts.cryptoProvider.computeHMACSignature(preparedOpts.payloadString, preparedOpts.secret);\n            return preparedOpts.generateHeaderString(signature);\n        },\n        generateTestHeaderStringAsync: async function (opts) {\n            const preparedOpts = prepareOptions(opts);\n            const signature = preparedOpts.signature ||\n                (await preparedOpts.cryptoProvider.computeHMACSignatureAsync(preparedOpts.payloadString, preparedOpts.secret));\n            return preparedOpts.generateHeaderString(signature);\n        },\n    };\n    const signature = {\n        EXPECTED_SCHEME: 'v1',\n        verifyHeader(encodedPayload, encodedHeader, secret, tolerance, cryptoProvider, receivedAt) {\n            const { decodedHeader: header, decodedPayload: payload, details, suspectPayloadType, } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n            const secretContainsWhitespace = /\\s/.test(secret);\n            cryptoProvider = cryptoProvider || getCryptoProvider();\n            const expectedSignature = cryptoProvider.computeHMACSignature(makeHMACContent(payload, details), secret);\n            validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType, secretContainsWhitespace, receivedAt);\n            return true;\n        },\n        async verifyHeaderAsync(encodedPayload, encodedHeader, secret, tolerance, cryptoProvider, receivedAt) {\n            const { decodedHeader: header, decodedPayload: payload, details, suspectPayloadType, } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n            const secretContainsWhitespace = /\\s/.test(secret);\n            cryptoProvider = cryptoProvider || getCryptoProvider();\n            const expectedSignature = await cryptoProvider.computeHMACSignatureAsync(makeHMACContent(payload, details), secret);\n            return validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType, secretContainsWhitespace, receivedAt);\n        },\n    };\n    function makeHMACContent(payload, details) {\n        return `${details.timestamp}.${payload}`;\n    }\n    function parseEventDetails(encodedPayload, encodedHeader, expectedScheme) {\n        if (!encodedPayload) {\n            throw new StripeSignatureVerificationError(encodedHeader, encodedPayload, {\n                message: 'No webhook payload was provided.',\n            });\n        }\n        const suspectPayloadType = typeof encodedPayload != 'string' &&\n            !(encodedPayload instanceof Uint8Array);\n        const textDecoder = new TextDecoder('utf8');\n        const decodedPayload = encodedPayload instanceof Uint8Array\n            ? textDecoder.decode(encodedPayload)\n            : encodedPayload;\n        // Express's type for `Request#headers` is `string | []string`\n        // which is because the `set-cookie` header is an array,\n        // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n        // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n        if (Array.isArray(encodedHeader)) {\n            throw new Error('Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.');\n        }\n        if (encodedHeader == null || encodedHeader == '') {\n            throw new StripeSignatureVerificationError(encodedHeader, encodedPayload, {\n                message: 'No stripe-signature header value was provided.',\n            });\n        }\n        const decodedHeader = encodedHeader instanceof Uint8Array\n            ? textDecoder.decode(encodedHeader)\n            : encodedHeader;\n        const details = parseHeader(decodedHeader, expectedScheme);\n        if (!details || details.timestamp === -1) {\n            throw new StripeSignatureVerificationError(decodedHeader, decodedPayload, {\n                message: 'Unable to extract timestamp and signatures from header',\n            });\n        }\n        if (!details.signatures.length) {\n            throw new StripeSignatureVerificationError(decodedHeader, decodedPayload, {\n                message: 'No signatures found with expected scheme',\n            });\n        }\n        return {\n            decodedPayload,\n            decodedHeader,\n            details,\n            suspectPayloadType,\n        };\n    }\n    function validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType, secretContainsWhitespace, receivedAt) {\n        const signatureFound = !!details.signatures.filter(platformFunctions.secureCompare.bind(platformFunctions, expectedSignature)).length;\n        const docsLocation = '\\nLearn more about webhook signing and explore webhook integration examples for various frameworks at ' +\n            'https://docs.stripe.com/webhooks/signature';\n        const whitespaceMessage = secretContainsWhitespace\n            ? '\\n\\nNote: The provided signing secret contains whitespace. This often indicates an extra newline or space is in the value'\n            : '';\n        if (!signatureFound) {\n            if (suspectPayloadType) {\n                throw new StripeSignatureVerificationError(header, payload, {\n                    message: 'Webhook payload must be provided as a string or a Buffer (https://nodejs.org/api/buffer.html) instance representing the _raw_ request body.' +\n                        'Payload was provided as a parsed JavaScript object instead. \\n' +\n                        'Signature verification is impossible without access to the original signed material. \\n' +\n                        docsLocation +\n                        '\\n' +\n                        whitespaceMessage,\n                });\n            }\n            throw new StripeSignatureVerificationError(header, payload, {\n                message: 'No signatures found matching the expected signature for payload.' +\n                    ' Are you passing the raw request body you received from Stripe? \\n' +\n                    ' If a webhook request is being forwarded by a third-party tool,' +\n                    ' ensure that the exact request body, including JSON formatting and new line style, is preserved.\\n' +\n                    docsLocation +\n                    '\\n' +\n                    whitespaceMessage,\n            });\n        }\n        const timestampAge = Math.floor((typeof receivedAt === 'number' ? receivedAt : Date.now()) / 1000) - details.timestamp;\n        if (tolerance > 0 && timestampAge > tolerance) {\n            throw new StripeSignatureVerificationError(header, payload, {\n                message: 'Timestamp outside the tolerance zone',\n            });\n        }\n        return true;\n    }\n    function parseHeader(header, scheme) {\n        if (typeof header !== 'string') {\n            return null;\n        }\n        return header.split(',').reduce((accum, item) => {\n            const kv = item.split('=');\n            if (kv[0] === 't') {\n                accum.timestamp = parseInt(kv[1], 10);\n            }\n            if (kv[0] === scheme) {\n                accum.signatures.push(kv[1]);\n            }\n            return accum;\n        }, {\n            timestamp: -1,\n            signatures: [],\n        });\n    }\n    let webhooksCryptoProviderInstance = null;\n    /**\n     * Lazily instantiate a CryptoProvider instance. This is a stateless object\n     * so a singleton can be used here.\n     */\n    function getCryptoProvider() {\n        if (!webhooksCryptoProviderInstance) {\n            webhooksCryptoProviderInstance = platformFunctions.createDefaultCryptoProvider();\n        }\n        return webhooksCryptoProviderInstance;\n    }\n    function prepareOptions(opts) {\n        if (!opts) {\n            throw new StripeError({\n                message: 'Options are required',\n            });\n        }\n        const timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n        const scheme = opts.scheme || signature.EXPECTED_SCHEME;\n        const cryptoProvider = opts.cryptoProvider || getCryptoProvider();\n        const payloadString = `${timestamp}.${opts.payload}`;\n        const generateHeaderString = (signature) => {\n            return `t=${timestamp},${scheme}=${signature}`;\n        };\n        return Object.assign(Object.assign({}, opts), { timestamp,\n            scheme,\n            cryptoProvider,\n            payloadString,\n            generateHeaderString });\n    }\n    Webhook.signature = signature;\n    return Webhook;\n}\n", "// File generated from our OpenAPI spec\nexport const ApiVersion = '2025-07-30.basil';\nexport const ApiMajorVersion = 'basil';\n", "// ResourceNamespace allows you to create nested resources, i.e. `stripe.issuing.cards`.\n// It also works recursively, so you could do i.e. `stripe.billing.invoicing.pay`.\nfunction ResourceNamespace(stripe, resources) {\n    for (const name in resources) {\n        if (!Object.prototype.hasOwnProperty.call(resources, name)) {\n            continue;\n        }\n        const camelCaseName = name[0].toLowerCase() + name.substring(1);\n        const resource = new resources[name](stripe);\n        this[camelCaseName] = resource;\n    }\n}\nexport function resourceNamespace(namespace, resources) {\n    return function (stripe) {\n        return new ResourceNamespace(stripe, resources);\n    };\n}\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Accounts = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/accounts/{account}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/accounts',\n        methodType: 'list',\n    }),\n    disconnect: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/accounts/{account}/disconnect',\n    }),\n    listOwners: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/accounts/{account}/owners',\n        methodType: 'list',\n    }),\n    refresh: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/accounts/{account}/refresh',\n    }),\n    subscribe: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/accounts/{account}/subscribe',\n    }),\n    unsubscribe: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/accounts/{account}/unsubscribe',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ActiveEntitlements = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/entitlements/active_entitlements/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/entitlements/active_entitlements',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Alerts = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/billing/alerts' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/billing/alerts/{id}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing/alerts',\n        methodType: 'list',\n    }),\n    activate: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/alerts/{id}/activate',\n    }),\n    archive: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/alerts/{id}/archive',\n    }),\n    deactivate: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/alerts/{id}/deactivate',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Authorizations = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations',\n    }),\n    capture: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/capture',\n    }),\n    expire: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/expire',\n    }),\n    finalizeAmount: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/finalize_amount',\n    }),\n    increment: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/increment',\n    }),\n    respond: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/fraud_challenges/respond',\n    }),\n    reverse: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/reverse',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Authorizations = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/authorizations/{authorization}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/authorizations/{authorization}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/authorizations',\n        methodType: 'list',\n    }),\n    approve: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/authorizations/{authorization}/approve',\n    }),\n    decline: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/authorizations/{authorization}/decline',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Calculations = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/tax/calculations' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax/calculations/{calculation}',\n    }),\n    listLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax/calculations/{calculation}/line_items',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Cardholders = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/issuing/cardholders' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/cardholders/{cardholder}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/cardholders/{cardholder}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/cardholders',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Cards = StripeResource.extend({\n    deliverCard: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/deliver',\n    }),\n    failCard: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/fail',\n    }),\n    returnCard: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/return',\n    }),\n    shipCard: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/ship',\n    }),\n    submitCard: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/submit',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Cards = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/issuing/cards' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/issuing/cards/{card}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/issuing/cards/{card}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/cards',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Configurations = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing_portal/configurations',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing_portal/configurations/{configuration}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing_portal/configurations/{configuration}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing_portal/configurations',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Configurations = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/configurations',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/terminal/configurations/{configuration}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/configurations/{configuration}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/terminal/configurations',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/terminal/configurations/{configuration}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ConfirmationTokens = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/confirmation_tokens',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ConnectionTokens = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/connection_tokens',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const CreditBalanceSummary = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_balance_summary',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const CreditBalanceTransactions = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_balance_transactions/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_balance_transactions',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const CreditGrants = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/billing/credit_grants' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_grants/{id}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/credit_grants/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_grants',\n        methodType: 'list',\n    }),\n    expire: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/credit_grants/{id}/expire',\n    }),\n    voidGrant: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/credit_grants/{id}/void',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const CreditReversals = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/credit_reversals',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/credit_reversals/{credit_reversal}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/credit_reversals',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Customers = StripeResource.extend({\n    fundCashBalance: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/customers/{customer}/fund_cash_balance',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const DebitReversals = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/debit_reversals',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/debit_reversals/{debit_reversal}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/debit_reversals',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Disputes = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/issuing/disputes' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/disputes/{dispute}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/disputes/{dispute}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/disputes',\n        methodType: 'list',\n    }),\n    submit: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/disputes/{dispute}/submit',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const EarlyFraudWarnings = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/radar/early_fraud_warnings/{early_fraud_warning}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/radar/early_fraud_warnings',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const EventDestinations = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v2/core/event_destinations/{id}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v2/core/event_destinations',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v2/core/event_destinations/{id}',\n    }),\n    disable: stripeMethod({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations/{id}/disable',\n    }),\n    enable: stripeMethod({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations/{id}/enable',\n    }),\n    ping: stripeMethod({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations/{id}/ping',\n    }),\n});\n", "// This file is manually maintained\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Events = StripeResource.extend({\n    retrieve(...args) {\n        const transformResponseData = (response) => {\n            return this.addFetchRelatedObjectIfNeeded(response);\n        };\n        return stripeMethod({\n            method: 'GET',\n            fullPath: '/v2/core/events/{id}',\n            transformResponseData,\n        }).apply(this, args);\n    },\n    list(...args) {\n        const transformResponseData = (response) => {\n            return Object.assign(Object.assign({}, response), { data: response.data.map(this.addFetchRelatedObjectIfNeeded.bind(this)) });\n        };\n        return stripeMethod({\n            method: 'GET',\n            fullPath: '/v2/core/events',\n            methodType: 'list',\n            transformResponseData,\n        }).apply(this, args);\n    },\n    /**\n     * @private\n     *\n     * For internal use in stripe-node.\n     *\n     * @param pulledEvent The retrieved event object\n     * @returns The retrieved event object with a fetchRelatedObject method,\n     * if pulledEvent.related_object is valid (non-null and has a url)\n     */\n    addFetchRelatedObjectIfNeeded(pulledEvent) {\n        if (!pulledEvent.related_object || !pulledEvent.related_object.url) {\n            return pulledEvent;\n        }\n        return Object.assign(Object.assign({}, pulledEvent), { fetchRelatedObject: () => \n            // call stripeMethod with 'this' resource to fetch\n            // the related object. 'this' is needed to construct\n            // and send the request, but the method spec controls\n            // the url endpoint and method, so it doesn't matter\n            // that 'this' is an Events resource object here\n            stripeMethod({\n                method: 'GET',\n                fullPath: pulledEvent.related_object.url,\n            }).apply(this, [\n                {\n                    stripeAccount: pulledEvent.context,\n                },\n            ]) });\n    },\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Features = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/entitlements/features' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/entitlements/features/{id}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/entitlements/features/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/entitlements/features',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const FinancialAccounts = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/financial_accounts',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/financial_accounts',\n        methodType: 'list',\n    }),\n    close: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}/close',\n    }),\n    retrieveFeatures: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}/features',\n    }),\n    updateFeatures: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}/features',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const InboundTransfers = StripeResource.extend({\n    fail: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/inbound_transfers/{id}/fail',\n    }),\n    returnInboundTransfer: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/inbound_transfers/{id}/return',\n    }),\n    succeed: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/inbound_transfers/{id}/succeed',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const InboundTransfers = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/inbound_transfers',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/inbound_transfers/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/inbound_transfers',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/inbound_transfers/{inbound_transfer}/cancel',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Locations = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/terminal/locations' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/terminal/locations/{location}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/locations/{location}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/terminal/locations',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/terminal/locations/{location}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const MeterEventAdjustments = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/meter_event_adjustments',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const MeterEventAdjustments = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v2/billing/meter_event_adjustments',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const MeterEventSession = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v2/billing/meter_event_session',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const MeterEventStream = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v2/billing/meter_event_stream',\n        host: 'meter-events.stripe.com',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const MeterEvents = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/billing/meter_events' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const MeterEvents = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v2/billing/meter_events' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Meters = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/billing/meters' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/billing/meters/{id}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/billing/meters/{id}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing/meters',\n        methodType: 'list',\n    }),\n    deactivate: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/meters/{id}/deactivate',\n    }),\n    listEventSummaries: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/billing/meters/{id}/event_summaries',\n        methodType: 'list',\n    }),\n    reactivate: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing/meters/{id}/reactivate',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Orders = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/climate/orders' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/climate/orders/{order}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/climate/orders/{order}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/climate/orders',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/climate/orders/{order}/cancel',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const OutboundPayments = StripeResource.extend({\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_payments/{id}',\n    }),\n    fail: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_payments/{id}/fail',\n    }),\n    post: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_payments/{id}/post',\n    }),\n    returnOutboundPayment: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_payments/{id}/return',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const OutboundPayments = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/outbound_payments',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/outbound_payments/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/outbound_payments',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/outbound_payments/{id}/cancel',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const OutboundTransfers = StripeResource.extend({\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}',\n    }),\n    fail: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail',\n    }),\n    post: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post',\n    }),\n    returnOutboundTransfer: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const OutboundTransfers = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/outbound_transfers',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/outbound_transfers/{outbound_transfer}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/outbound_transfers',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/treasury/outbound_transfers/{outbound_transfer}/cancel',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PersonalizationDesigns = StripeResource.extend({\n    activate: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate',\n    }),\n    deactivate: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate',\n    }),\n    reject: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PersonalizationDesigns = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/personalization_designs',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/personalization_designs/{personalization_design}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/personalization_designs/{personalization_design}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/personalization_designs',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PhysicalBundles = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/physical_bundles/{physical_bundle}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/physical_bundles',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Products = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/climate/products/{product}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/climate/products',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Readers = StripeResource.extend({\n    presentPaymentMethod: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/terminal/readers/{reader}/present_payment_method',\n    }),\n    succeedInputCollection: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/terminal/readers/{reader}/succeed_input_collection',\n    }),\n    timeoutInputCollection: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/terminal/readers/{reader}/timeout_input_collection',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Readers = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/terminal/readers' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/terminal/readers/{reader}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/terminal/readers',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/terminal/readers/{reader}',\n    }),\n    cancelAction: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/cancel_action',\n    }),\n    collectInputs: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/collect_inputs',\n    }),\n    collectPaymentMethod: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/collect_payment_method',\n    }),\n    confirmPaymentIntent: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/confirm_payment_intent',\n    }),\n    processPaymentIntent: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/process_payment_intent',\n    }),\n    processSetupIntent: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/process_setup_intent',\n    }),\n    refundPayment: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/refund_payment',\n    }),\n    setReaderDisplay: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/set_reader_display',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ReceivedCredits = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/received_credits',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ReceivedCredits = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/received_credits/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/received_credits',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ReceivedDebits = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/received_debits',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ReceivedDebits = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/received_debits/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/received_debits',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Refunds = StripeResource.extend({\n    expire: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/refunds/{refund}/expire',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Registrations = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/tax/registrations' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax/registrations/{id}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/tax/registrations/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax/registrations',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ReportRuns = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/reporting/report_runs' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/reporting/report_runs/{report_run}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/reporting/report_runs',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ReportTypes = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/reporting/report_types/{report_type}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/reporting/report_types',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Requests = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/forwarding/requests' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/forwarding/requests/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/forwarding/requests',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ScheduledQueryRuns = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/sigma/scheduled_query_runs/{scheduled_query_run}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/sigma/scheduled_query_runs',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Secrets = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/apps/secrets' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/apps/secrets',\n        methodType: 'list',\n    }),\n    deleteWhere: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/apps/secrets/delete',\n    }),\n    find: stripeMethod({ method: 'GET', fullPath: '/v1/apps/secrets/find' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Sessions = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/billing_portal/sessions',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Sessions = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/checkout/sessions' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/checkout/sessions/{session}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/checkout/sessions/{session}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/checkout/sessions',\n        methodType: 'list',\n    }),\n    expire: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/checkout/sessions/{session}/expire',\n    }),\n    listLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/checkout/sessions/{session}/line_items',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Sessions = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/sessions',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/sessions/{session}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Settings = StripeResource.extend({\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/tax/settings' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/tax/settings' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Suppliers = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/climate/suppliers/{supplier}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/climate/suppliers',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const TestClocks = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/test_clocks',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/test_helpers/test_clocks/{test_clock}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/test_helpers/test_clocks',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/test_helpers/test_clocks/{test_clock}',\n    }),\n    advance: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/test_clocks/{test_clock}/advance',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Tokens = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/tokens/{token}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/tokens/{token}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/tokens',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const TransactionEntries = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/transaction_entries/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/transaction_entries',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Transactions = StripeResource.extend({\n    createForceCapture: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/transactions/create_force_capture',\n    }),\n    createUnlinkedRefund: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/transactions/create_unlinked_refund',\n    }),\n    refund: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/transactions/{transaction}/refund',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Transactions = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/transactions/{transaction}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/transactions',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Transactions = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/transactions/{transaction}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/issuing/transactions/{transaction}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/issuing/transactions',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Transactions = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax/transactions/{transaction}',\n    }),\n    createFromCalculation: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/tax/transactions/create_from_calculation',\n    }),\n    createReversal: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/tax/transactions/create_reversal',\n    }),\n    listLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax/transactions/{transaction}/line_items',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Transactions = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/transactions/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/treasury/transactions',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ValueListItems = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/radar/value_list_items',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/radar/value_list_items/{item}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/radar/value_list_items',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/radar/value_list_items/{item}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ValueLists = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/radar/value_lists' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/radar/value_lists/{value_list}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/radar/value_lists/{value_list}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/radar/value_lists',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/radar/value_lists/{value_list}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const VerificationReports = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/identity/verification_reports/{report}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/identity/verification_reports',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const VerificationSessions = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/identity/verification_sessions',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/identity/verification_sessions/{session}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/identity/verification_sessions/{session}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/identity/verification_sessions',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/identity/verification_sessions/{session}/cancel',\n    }),\n    redact: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/identity/verification_sessions/{session}/redact',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\n// Since path can either be `account` or `accounts`, support both through stripeMethod path\nexport const Accounts = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/accounts' }),\n    retrieve(id, ...args) {\n        // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n        // old account ids and api keys. To request the account for an api key, send null as the id\n        if (typeof id === 'string') {\n            return stripeMethod({\n                method: 'GET',\n                fullPath: '/v1/accounts/{id}',\n            }).apply(this, [id, ...args]);\n        }\n        else {\n            if (id === null || id === undefined) {\n                // Remove id as stripeMethod would complain of unexpected argument\n                [].shift.apply([id, ...args]);\n            }\n            return stripeMethod({\n                method: 'GET',\n                fullPath: '/v1/account',\n            }).apply(this, [id, ...args]);\n        }\n    },\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/accounts/{account}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts',\n        methodType: 'list',\n    }),\n    del: stripeMethod({ method: 'DELETE', fullPath: '/v1/accounts/{account}' }),\n    createExternalAccount: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/external_accounts',\n    }),\n    createLoginLink: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/login_links',\n    }),\n    createPerson: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/persons',\n    }),\n    deleteExternalAccount: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}',\n    }),\n    deletePerson: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/accounts/{account}/persons/{person}',\n    }),\n    listCapabilities: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/capabilities',\n        methodType: 'list',\n    }),\n    listExternalAccounts: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/external_accounts',\n        methodType: 'list',\n    }),\n    listPersons: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/persons',\n        methodType: 'list',\n    }),\n    reject: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/reject',\n    }),\n    retrieveCurrent: stripeMethod({ method: 'GET', fullPath: '/v1/account' }),\n    retrieveCapability: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/capabilities/{capability}',\n    }),\n    retrieveExternalAccount: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}',\n    }),\n    retrievePerson: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/persons/{person}',\n    }),\n    updateCapability: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/capabilities/{capability}',\n    }),\n    updateExternalAccount: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}',\n    }),\n    updatePerson: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/persons/{person}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const AccountLinks = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/account_links' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const AccountSessions = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/account_sessions' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ApplePayDomains = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/apple_pay/domains' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/apple_pay/domains/{domain}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/apple_pay/domains',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/apple_pay/domains/{domain}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ApplicationFees = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/application_fees/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/application_fees',\n        methodType: 'list',\n    }),\n    createRefund: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/application_fees/{id}/refunds',\n    }),\n    listRefunds: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/application_fees/{id}/refunds',\n        methodType: 'list',\n    }),\n    retrieveRefund: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/application_fees/{fee}/refunds/{id}',\n    }),\n    updateRefund: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/application_fees/{fee}/refunds/{id}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Balance = StripeResource.extend({\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/balance' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const BalanceTransactions = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/balance_transactions/{id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/balance_transactions',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Charges = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/charges' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/charges/{charge}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/charges/{charge}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/charges',\n        methodType: 'list',\n    }),\n    capture: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/charges/{charge}/capture',\n    }),\n    search: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/charges/search',\n        methodType: 'search',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ConfirmationTokens = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/confirmation_tokens/{confirmation_token}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const CountrySpecs = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/country_specs/{country}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/country_specs',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Coupons = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/coupons' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/coupons/{coupon}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/coupons/{coupon}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/coupons',\n        methodType: 'list',\n    }),\n    del: stripeMethod({ method: 'DELETE', fullPath: '/v1/coupons/{coupon}' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const CreditNotes = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/credit_notes' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/credit_notes/{id}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/credit_notes/{id}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/credit_notes',\n        methodType: 'list',\n    }),\n    listLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/credit_notes/{credit_note}/lines',\n        methodType: 'list',\n    }),\n    listPreviewLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/credit_notes/preview/lines',\n        methodType: 'list',\n    }),\n    preview: stripeMethod({ method: 'GET', fullPath: '/v1/credit_notes/preview' }),\n    voidCreditNote: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/credit_notes/{id}/void',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const CustomerSessions = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/customer_sessions' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Customers = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/customers' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/customers/{customer}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/customers/{customer}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers',\n        methodType: 'list',\n    }),\n    del: stripeMethod({ method: 'DELETE', fullPath: '/v1/customers/{customer}' }),\n    createBalanceTransaction: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/balance_transactions',\n    }),\n    createFundingInstructions: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/funding_instructions',\n    }),\n    createSource: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/sources',\n    }),\n    createTaxId: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/tax_ids',\n    }),\n    deleteDiscount: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/customers/{customer}/discount',\n    }),\n    deleteSource: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/customers/{customer}/sources/{id}',\n    }),\n    deleteTaxId: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/customers/{customer}/tax_ids/{id}',\n    }),\n    listBalanceTransactions: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/balance_transactions',\n        methodType: 'list',\n    }),\n    listCashBalanceTransactions: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/cash_balance_transactions',\n        methodType: 'list',\n    }),\n    listPaymentMethods: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/payment_methods',\n        methodType: 'list',\n    }),\n    listSources: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/sources',\n        methodType: 'list',\n    }),\n    listTaxIds: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/tax_ids',\n        methodType: 'list',\n    }),\n    retrieveBalanceTransaction: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/balance_transactions/{transaction}',\n    }),\n    retrieveCashBalance: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/cash_balance',\n    }),\n    retrieveCashBalanceTransaction: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/cash_balance_transactions/{transaction}',\n    }),\n    retrievePaymentMethod: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/payment_methods/{payment_method}',\n    }),\n    retrieveSource: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/sources/{id}',\n    }),\n    retrieveTaxId: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/tax_ids/{id}',\n    }),\n    search: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/customers/search',\n        methodType: 'search',\n    }),\n    updateBalanceTransaction: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/balance_transactions/{transaction}',\n    }),\n    updateCashBalance: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/cash_balance',\n    }),\n    updateSource: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/sources/{id}',\n    }),\n    verifySource: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/sources/{id}/verify',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Disputes = StripeResource.extend({\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/disputes/{dispute}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/disputes/{dispute}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/disputes',\n        methodType: 'list',\n    }),\n    close: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/disputes/{dispute}/close',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const EphemeralKeys = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/ephemeral_keys',\n        validator: (data, options) => {\n            if (!options.headers || !options.headers['Stripe-Version']) {\n                throw new Error('Passing apiVersion in a separate options hash is required to create an ephemeral key. See https://stripe.com/docs/api/versioning?lang=node');\n            }\n        },\n    }),\n    del: stripeMethod({ method: 'DELETE', fullPath: '/v1/ephemeral_keys/{key}' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Events = StripeResource.extend({\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/events/{id}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/events',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ExchangeRates = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/exchange_rates/{rate_id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/exchange_rates',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const FileLinks = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/file_links' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/file_links/{link}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/file_links/{link}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/file_links',\n        methodType: 'list',\n    }),\n});\n", "import { flattenAndStringify, queryStringifyRequestData } from './utils.js';\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nconst multipartDataGenerator = (method, data, headers) => {\n    const segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n    headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\n    const textEncoder = new TextEncoder();\n    let buffer = new Uint8Array(0);\n    const endBuffer = textEncoder.encode('\\r\\n');\n    function push(l) {\n        const prevBuffer = buffer;\n        const newBuffer = l instanceof Uint8Array ? l : new Uint8Array(textEncoder.encode(l));\n        buffer = new Uint8Array(prevBuffer.length + newBuffer.length + 2);\n        buffer.set(prevBuffer);\n        buffer.set(newBuffer, prevBuffer.length);\n        buffer.set(endBuffer, buffer.length - 2);\n    }\n    function q(s) {\n        return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\n    }\n    const flattenedData = flattenAndStringify(data);\n    for (const k in flattenedData) {\n        if (!Object.prototype.hasOwnProperty.call(flattenedData, k)) {\n            continue;\n        }\n        const v = flattenedData[k];\n        push(`--${segno}`);\n        if (Object.prototype.hasOwnProperty.call(v, 'data')) {\n            const typedEntry = v;\n            push(`Content-Disposition: form-data; name=${q(k)}; filename=${q(typedEntry.name || 'blob')}`);\n            push(`Content-Type: ${typedEntry.type || 'application/octet-stream'}`);\n            push('');\n            push(typedEntry.data);\n        }\n        else {\n            push(`Content-Disposition: form-data; name=${q(k)}`);\n            push('');\n            push(v);\n        }\n    }\n    push(`--${segno}--`);\n    return buffer;\n};\nexport function multipartRequestDataProcessor(method, data, headers, callback) {\n    data = data || {};\n    if (method !== 'POST') {\n        return callback(null, queryStringifyRequestData(data));\n    }\n    this._stripe._platformFunctions\n        .tryBufferData(data)\n        .then((bufferedData) => {\n        const buffer = multipartDataGenerator(method, bufferedData, headers);\n        return callback(null, buffer);\n    })\n        .catch((err) => callback(err, null));\n}\n", "// File generated from our OpenAPI spec\nimport { multipartRequestDataProcessor } from '../multipart.js';\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Files = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/files',\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n        host: 'files.stripe.com',\n    }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/files/{file}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/files',\n        methodType: 'list',\n    }),\n    requestDataProcessor: multipartRequestDataProcessor,\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const InvoiceItems = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/invoiceitems' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoiceitems/{invoiceitem}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoiceitems/{invoiceitem}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoiceitems',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/invoiceitems/{invoiceitem}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const InvoicePayments = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoice_payments/{invoice_payment}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoice_payments',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const InvoiceRenderingTemplates = StripeResource.extend({\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoice_rendering_templates/{template}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoice_rendering_templates',\n        methodType: 'list',\n    }),\n    archive: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoice_rendering_templates/{template}/archive',\n    }),\n    unarchive: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoice_rendering_templates/{template}/unarchive',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Invoices = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/invoices' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/invoices/{invoice}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/invoices/{invoice}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoices',\n        methodType: 'list',\n    }),\n    del: stripeMethod({ method: 'DELETE', fullPath: '/v1/invoices/{invoice}' }),\n    addLines: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/add_lines',\n    }),\n    attachPayment: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/attach_payment',\n    }),\n    createPreview: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/create_preview',\n    }),\n    finalizeInvoice: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/finalize',\n    }),\n    listLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoices/{invoice}/lines',\n        methodType: 'list',\n    }),\n    markUncollectible: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/mark_uncollectible',\n    }),\n    pay: stripeMethod({ method: 'POST', fullPath: '/v1/invoices/{invoice}/pay' }),\n    removeLines: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/remove_lines',\n    }),\n    search: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/invoices/search',\n        methodType: 'search',\n    }),\n    sendInvoice: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/send',\n    }),\n    updateLines: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/update_lines',\n    }),\n    updateLineItem: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/lines/{line_item_id}',\n    }),\n    voidInvoice: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/void',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Mandates = StripeResource.extend({\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/mandates/{mandate}' }),\n});\n", "'use strict';\nimport { StripeResource } from '../StripeResource.js';\nimport { queryStringifyRequestData } from '../utils.js';\nconst stripeMethod = StripeResource.method;\nconst oAuthHost = 'connect.stripe.com';\nexport const OAuth = StripeResource.extend({\n    basePath: '/',\n    authorizeUrl(params, options) {\n        params = params || {};\n        options = options || {};\n        let path = 'oauth/authorize';\n        // For Express accounts, the path changes\n        if (options.express) {\n            path = `express/${path}`;\n        }\n        if (!params.response_type) {\n            params.response_type = 'code';\n        }\n        if (!params.client_id) {\n            params.client_id = this._stripe.getClientId();\n        }\n        if (!params.scope) {\n            params.scope = 'read_write';\n        }\n        return `https://${oAuthHost}/${path}?${queryStringifyRequestData(params)}`;\n    },\n    token: stripeMethod({\n        method: 'POST',\n        path: 'oauth/token',\n        host: oAuthHost,\n    }),\n    deauthorize(spec, ...args) {\n        if (!spec.client_id) {\n            spec.client_id = this._stripe.getClientId();\n        }\n        return stripeMethod({\n            method: 'POST',\n            path: 'oauth/deauthorize',\n            host: oAuthHost,\n        }).apply(this, [spec, ...args]);\n    },\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PaymentIntents = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/payment_intents' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_intents/{intent}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_intents',\n        methodType: 'list',\n    }),\n    applyCustomerBalance: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/apply_customer_balance',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/cancel',\n    }),\n    capture: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/capture',\n    }),\n    confirm: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/confirm',\n    }),\n    incrementAuthorization: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/increment_authorization',\n    }),\n    search: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_intents/search',\n        methodType: 'search',\n    }),\n    verifyMicrodeposits: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/verify_microdeposits',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PaymentLinks = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/payment_links' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_links/{payment_link}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_links/{payment_link}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_links',\n        methodType: 'list',\n    }),\n    listLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_links/{payment_link}/line_items',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PaymentMethodConfigurations = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_method_configurations',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_method_configurations/{configuration}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_method_configurations/{configuration}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_method_configurations',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PaymentMethodDomains = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_method_domains',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_method_domains/{payment_method_domain}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_method_domains/{payment_method_domain}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_method_domains',\n        methodType: 'list',\n    }),\n    validate: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_method_domains/{payment_method_domain}/validate',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PaymentMethods = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/payment_methods' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_methods/{payment_method}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_methods/{payment_method}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payment_methods',\n        methodType: 'list',\n    }),\n    attach: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_methods/{payment_method}/attach',\n    }),\n    detach: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payment_methods/{payment_method}/detach',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Payouts = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/payouts' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/payouts/{payout}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/payouts/{payout}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/payouts',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payouts/{payout}/cancel',\n    }),\n    reverse: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/payouts/{payout}/reverse',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Plans = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/plans' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/plans/{plan}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/plans/{plan}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/plans',\n        methodType: 'list',\n    }),\n    del: stripeMethod({ method: 'DELETE', fullPath: '/v1/plans/{plan}' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Prices = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/prices' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/prices/{price}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/prices/{price}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/prices',\n        methodType: 'list',\n    }),\n    search: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/prices/search',\n        methodType: 'search',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Products = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/products' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/products/{id}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/products/{id}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/products',\n        methodType: 'list',\n    }),\n    del: stripeMethod({ method: 'DELETE', fullPath: '/v1/products/{id}' }),\n    createFeature: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/products/{product}/features',\n    }),\n    deleteFeature: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/products/{product}/features/{id}',\n    }),\n    listFeatures: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/products/{product}/features',\n        methodType: 'list',\n    }),\n    retrieveFeature: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/products/{product}/features/{id}',\n    }),\n    search: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/products/search',\n        methodType: 'search',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const PromotionCodes = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/promotion_codes' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/promotion_codes/{promotion_code}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/promotion_codes/{promotion_code}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/promotion_codes',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Quotes = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/quotes' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/quotes/{quote}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/quotes/{quote}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/quotes',\n        methodType: 'list',\n    }),\n    accept: stripeMethod({ method: 'POST', fullPath: '/v1/quotes/{quote}/accept' }),\n    cancel: stripeMethod({ method: 'POST', fullPath: '/v1/quotes/{quote}/cancel' }),\n    finalizeQuote: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/quotes/{quote}/finalize',\n    }),\n    listComputedUpfrontLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/quotes/{quote}/computed_upfront_line_items',\n        methodType: 'list',\n    }),\n    listLineItems: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/quotes/{quote}/line_items',\n        methodType: 'list',\n    }),\n    pdf: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/quotes/{quote}/pdf',\n        host: 'files.stripe.com',\n        streaming: true,\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Refunds = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/refunds' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/refunds/{refund}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/refunds/{refund}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/refunds',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/refunds/{refund}/cancel',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Reviews = StripeResource.extend({\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/reviews/{review}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/reviews',\n        methodType: 'list',\n    }),\n    approve: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/reviews/{review}/approve',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const SetupAttempts = StripeResource.extend({\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/setup_attempts',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const SetupIntents = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/setup_intents' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/setup_intents/{intent}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/setup_intents/{intent}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/setup_intents',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/setup_intents/{intent}/cancel',\n    }),\n    confirm: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/setup_intents/{intent}/confirm',\n    }),\n    verifyMicrodeposits: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/setup_intents/{intent}/verify_microdeposits',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const ShippingRates = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/shipping_rates' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/shipping_rates/{shipping_rate_token}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/shipping_rates/{shipping_rate_token}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/shipping_rates',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Sources = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/sources' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/sources/{source}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/sources/{source}' }),\n    listSourceTransactions: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/sources/{source}/source_transactions',\n        methodType: 'list',\n    }),\n    verify: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/sources/{source}/verify',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const SubscriptionItems = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/subscription_items' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/subscription_items/{item}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/subscription_items/{item}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/subscription_items',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/subscription_items/{item}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const SubscriptionSchedules = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/subscription_schedules',\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/subscription_schedules/{schedule}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/subscription_schedules/{schedule}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/subscription_schedules',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/subscription_schedules/{schedule}/cancel',\n    }),\n    release: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/subscription_schedules/{schedule}/release',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Subscriptions = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/subscriptions' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/subscriptions/{subscription_exposed_id}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/subscriptions/{subscription_exposed_id}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/subscriptions',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/subscriptions/{subscription_exposed_id}',\n    }),\n    deleteDiscount: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/subscriptions/{subscription_exposed_id}/discount',\n    }),\n    migrate: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/subscriptions/{subscription}/migrate',\n    }),\n    resume: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/subscriptions/{subscription}/resume',\n    }),\n    search: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/subscriptions/search',\n        methodType: 'search',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const TaxCodes = StripeResource.extend({\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/tax_codes/{id}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax_codes',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const TaxIds = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/tax_ids' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/tax_ids/{id}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax_ids',\n        methodType: 'list',\n    }),\n    del: stripeMethod({ method: 'DELETE', fullPath: '/v1/tax_ids/{id}' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const TaxRates = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/tax_rates' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/tax_rates/{tax_rate}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/tax_rates/{tax_rate}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/tax_rates',\n        methodType: 'list',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Tokens = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/tokens' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/tokens/{token}' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Topups = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/topups' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/topups/{topup}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/topups/{topup}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/topups',\n        methodType: 'list',\n    }),\n    cancel: stripeMethod({ method: 'POST', fullPath: '/v1/topups/{topup}/cancel' }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const Transfers = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/transfers' }),\n    retrieve: stripeMethod({ method: 'GET', fullPath: '/v1/transfers/{transfer}' }),\n    update: stripeMethod({ method: 'POST', fullPath: '/v1/transfers/{transfer}' }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/transfers',\n        methodType: 'list',\n    }),\n    createReversal: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/transfers/{id}/reversals',\n    }),\n    listReversals: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/transfers/{id}/reversals',\n        methodType: 'list',\n    }),\n    retrieveReversal: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/transfers/{transfer}/reversals/{id}',\n    }),\n    updateReversal: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/transfers/{transfer}/reversals/{id}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { StripeResource } from '../StripeResource.js';\nconst stripeMethod = StripeResource.method;\nexport const WebhookEndpoints = StripeResource.extend({\n    create: stripeMethod({ method: 'POST', fullPath: '/v1/webhook_endpoints' }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/webhook_endpoints/{webhook_endpoint}',\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/webhook_endpoints/{webhook_endpoint}',\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/webhook_endpoints',\n        methodType: 'list',\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/webhook_endpoints/{webhook_endpoint}',\n    }),\n});\n", "// File generated from our OpenAPI spec\nimport { resourceNamespace } from './ResourceNamespace.js';\nimport { Accounts as FinancialConnectionsAccounts } from './resources/FinancialConnections/Accounts.js';\nimport { ActiveEntitlements as EntitlementsActiveEntitlements } from './resources/Entitlements/ActiveEntitlements.js';\nimport { Alerts as BillingAlerts } from './resources/Billing/Alerts.js';\nimport { Authorizations as TestHelpersIssuingAuthorizations } from './resources/TestHelpers/Issuing/Authorizations.js';\nimport { Authorizations as IssuingAuthorizations } from './resources/Issuing/Authorizations.js';\nimport { Calculations as TaxCalculations } from './resources/Tax/Calculations.js';\nimport { Cardholders as IssuingCardholders } from './resources/Issuing/Cardholders.js';\nimport { Cards as TestHelpersIssuingCards } from './resources/TestHelpers/Issuing/Cards.js';\nimport { Cards as IssuingCards } from './resources/Issuing/Cards.js';\nimport { Configurations as BillingPortalConfigurations } from './resources/BillingPortal/Configurations.js';\nimport { Configurations as TerminalConfigurations } from './resources/Terminal/Configurations.js';\nimport { ConfirmationTokens as TestHelpersConfirmationTokens } from './resources/TestHelpers/ConfirmationTokens.js';\nimport { ConnectionTokens as TerminalConnectionTokens } from './resources/Terminal/ConnectionTokens.js';\nimport { CreditBalanceSummary as BillingCreditBalanceSummary } from './resources/Billing/CreditBalanceSummary.js';\nimport { CreditBalanceTransactions as BillingCreditBalanceTransactions } from './resources/Billing/CreditBalanceTransactions.js';\nimport { CreditGrants as BillingCreditGrants } from './resources/Billing/CreditGrants.js';\nimport { CreditReversals as TreasuryCreditReversals } from './resources/Treasury/CreditReversals.js';\nimport { Customers as TestHelpersCustomers } from './resources/TestHelpers/Customers.js';\nimport { DebitReversals as TreasuryDebitReversals } from './resources/Treasury/DebitReversals.js';\nimport { Disputes as IssuingDisputes } from './resources/Issuing/Disputes.js';\nimport { EarlyFraudWarnings as RadarEarlyFraudWarnings } from './resources/Radar/EarlyFraudWarnings.js';\nimport { EventDestinations as V2CoreEventDestinations } from './resources/V2/Core/EventDestinations.js';\nimport { Events as V2CoreEvents } from './resources/V2/Core/Events.js';\nimport { Features as EntitlementsFeatures } from './resources/Entitlements/Features.js';\nimport { FinancialAccounts as TreasuryFinancialAccounts } from './resources/Treasury/FinancialAccounts.js';\nimport { InboundTransfers as TestHelpersTreasuryInboundTransfers } from './resources/TestHelpers/Treasury/InboundTransfers.js';\nimport { InboundTransfers as TreasuryInboundTransfers } from './resources/Treasury/InboundTransfers.js';\nimport { Locations as TerminalLocations } from './resources/Terminal/Locations.js';\nimport { MeterEventAdjustments as BillingMeterEventAdjustments } from './resources/Billing/MeterEventAdjustments.js';\nimport { MeterEventAdjustments as V2BillingMeterEventAdjustments } from './resources/V2/Billing/MeterEventAdjustments.js';\nimport { MeterEventSession as V2BillingMeterEventSession } from './resources/V2/Billing/MeterEventSession.js';\nimport { MeterEventStream as V2BillingMeterEventStream } from './resources/V2/Billing/MeterEventStream.js';\nimport { MeterEvents as BillingMeterEvents } from './resources/Billing/MeterEvents.js';\nimport { MeterEvents as V2BillingMeterEvents } from './resources/V2/Billing/MeterEvents.js';\nimport { Meters as BillingMeters } from './resources/Billing/Meters.js';\nimport { Orders as ClimateOrders } from './resources/Climate/Orders.js';\nimport { OutboundPayments as TestHelpersTreasuryOutboundPayments } from './resources/TestHelpers/Treasury/OutboundPayments.js';\nimport { OutboundPayments as TreasuryOutboundPayments } from './resources/Treasury/OutboundPayments.js';\nimport { OutboundTransfers as TestHelpersTreasuryOutboundTransfers } from './resources/TestHelpers/Treasury/OutboundTransfers.js';\nimport { OutboundTransfers as TreasuryOutboundTransfers } from './resources/Treasury/OutboundTransfers.js';\nimport { PersonalizationDesigns as TestHelpersIssuingPersonalizationDesigns } from './resources/TestHelpers/Issuing/PersonalizationDesigns.js';\nimport { PersonalizationDesigns as IssuingPersonalizationDesigns } from './resources/Issuing/PersonalizationDesigns.js';\nimport { PhysicalBundles as IssuingPhysicalBundles } from './resources/Issuing/PhysicalBundles.js';\nimport { Products as ClimateProducts } from './resources/Climate/Products.js';\nimport { Readers as TestHelpersTerminalReaders } from './resources/TestHelpers/Terminal/Readers.js';\nimport { Readers as TerminalReaders } from './resources/Terminal/Readers.js';\nimport { ReceivedCredits as TestHelpersTreasuryReceivedCredits } from './resources/TestHelpers/Treasury/ReceivedCredits.js';\nimport { ReceivedCredits as TreasuryReceivedCredits } from './resources/Treasury/ReceivedCredits.js';\nimport { ReceivedDebits as TestHelpersTreasuryReceivedDebits } from './resources/TestHelpers/Treasury/ReceivedDebits.js';\nimport { ReceivedDebits as TreasuryReceivedDebits } from './resources/Treasury/ReceivedDebits.js';\nimport { Refunds as TestHelpersRefunds } from './resources/TestHelpers/Refunds.js';\nimport { Registrations as TaxRegistrations } from './resources/Tax/Registrations.js';\nimport { ReportRuns as ReportingReportRuns } from './resources/Reporting/ReportRuns.js';\nimport { ReportTypes as ReportingReportTypes } from './resources/Reporting/ReportTypes.js';\nimport { Requests as ForwardingRequests } from './resources/Forwarding/Requests.js';\nimport { ScheduledQueryRuns as SigmaScheduledQueryRuns } from './resources/Sigma/ScheduledQueryRuns.js';\nimport { Secrets as AppsSecrets } from './resources/Apps/Secrets.js';\nimport { Sessions as BillingPortalSessions } from './resources/BillingPortal/Sessions.js';\nimport { Sessions as CheckoutSessions } from './resources/Checkout/Sessions.js';\nimport { Sessions as FinancialConnectionsSessions } from './resources/FinancialConnections/Sessions.js';\nimport { Settings as TaxSettings } from './resources/Tax/Settings.js';\nimport { Suppliers as ClimateSuppliers } from './resources/Climate/Suppliers.js';\nimport { TestClocks as TestHelpersTestClocks } from './resources/TestHelpers/TestClocks.js';\nimport { Tokens as IssuingTokens } from './resources/Issuing/Tokens.js';\nimport { TransactionEntries as TreasuryTransactionEntries } from './resources/Treasury/TransactionEntries.js';\nimport { Transactions as TestHelpersIssuingTransactions } from './resources/TestHelpers/Issuing/Transactions.js';\nimport { Transactions as FinancialConnectionsTransactions } from './resources/FinancialConnections/Transactions.js';\nimport { Transactions as IssuingTransactions } from './resources/Issuing/Transactions.js';\nimport { Transactions as TaxTransactions } from './resources/Tax/Transactions.js';\nimport { Transactions as TreasuryTransactions } from './resources/Treasury/Transactions.js';\nimport { ValueListItems as RadarValueListItems } from './resources/Radar/ValueListItems.js';\nimport { ValueLists as RadarValueLists } from './resources/Radar/ValueLists.js';\nimport { VerificationReports as IdentityVerificationReports } from './resources/Identity/VerificationReports.js';\nimport { VerificationSessions as IdentityVerificationSessions } from './resources/Identity/VerificationSessions.js';\nexport { Accounts as Account } from './resources/Accounts.js';\nexport { AccountLinks } from './resources/AccountLinks.js';\nexport { AccountSessions } from './resources/AccountSessions.js';\nexport { Accounts } from './resources/Accounts.js';\nexport { ApplePayDomains } from './resources/ApplePayDomains.js';\nexport { ApplicationFees } from './resources/ApplicationFees.js';\nexport { Balance } from './resources/Balance.js';\nexport { BalanceTransactions } from './resources/BalanceTransactions.js';\nexport { Charges } from './resources/Charges.js';\nexport { ConfirmationTokens } from './resources/ConfirmationTokens.js';\nexport { CountrySpecs } from './resources/CountrySpecs.js';\nexport { Coupons } from './resources/Coupons.js';\nexport { CreditNotes } from './resources/CreditNotes.js';\nexport { CustomerSessions } from './resources/CustomerSessions.js';\nexport { Customers } from './resources/Customers.js';\nexport { Disputes } from './resources/Disputes.js';\nexport { EphemeralKeys } from './resources/EphemeralKeys.js';\nexport { Events } from './resources/Events.js';\nexport { ExchangeRates } from './resources/ExchangeRates.js';\nexport { FileLinks } from './resources/FileLinks.js';\nexport { Files } from './resources/Files.js';\nexport { InvoiceItems } from './resources/InvoiceItems.js';\nexport { InvoicePayments } from './resources/InvoicePayments.js';\nexport { InvoiceRenderingTemplates } from './resources/InvoiceRenderingTemplates.js';\nexport { Invoices } from './resources/Invoices.js';\nexport { Mandates } from './resources/Mandates.js';\nexport { OAuth } from './resources/OAuth.js';\nexport { PaymentIntents } from './resources/PaymentIntents.js';\nexport { PaymentLinks } from './resources/PaymentLinks.js';\nexport { PaymentMethodConfigurations } from './resources/PaymentMethodConfigurations.js';\nexport { PaymentMethodDomains } from './resources/PaymentMethodDomains.js';\nexport { PaymentMethods } from './resources/PaymentMethods.js';\nexport { Payouts } from './resources/Payouts.js';\nexport { Plans } from './resources/Plans.js';\nexport { Prices } from './resources/Prices.js';\nexport { Products } from './resources/Products.js';\nexport { PromotionCodes } from './resources/PromotionCodes.js';\nexport { Quotes } from './resources/Quotes.js';\nexport { Refunds } from './resources/Refunds.js';\nexport { Reviews } from './resources/Reviews.js';\nexport { SetupAttempts } from './resources/SetupAttempts.js';\nexport { SetupIntents } from './resources/SetupIntents.js';\nexport { ShippingRates } from './resources/ShippingRates.js';\nexport { Sources } from './resources/Sources.js';\nexport { SubscriptionItems } from './resources/SubscriptionItems.js';\nexport { SubscriptionSchedules } from './resources/SubscriptionSchedules.js';\nexport { Subscriptions } from './resources/Subscriptions.js';\nexport { TaxCodes } from './resources/TaxCodes.js';\nexport { TaxIds } from './resources/TaxIds.js';\nexport { TaxRates } from './resources/TaxRates.js';\nexport { Tokens } from './resources/Tokens.js';\nexport { Topups } from './resources/Topups.js';\nexport { Transfers } from './resources/Transfers.js';\nexport { WebhookEndpoints } from './resources/WebhookEndpoints.js';\nexport const Apps = resourceNamespace('apps', { Secrets: AppsSecrets });\nexport const Billing = resourceNamespace('billing', {\n    Alerts: BillingAlerts,\n    CreditBalanceSummary: BillingCreditBalanceSummary,\n    CreditBalanceTransactions: BillingCreditBalanceTransactions,\n    CreditGrants: BillingCreditGrants,\n    MeterEventAdjustments: BillingMeterEventAdjustments,\n    MeterEvents: BillingMeterEvents,\n    Meters: BillingMeters,\n});\nexport const BillingPortal = resourceNamespace('billingPortal', {\n    Configurations: BillingPortalConfigurations,\n    Sessions: BillingPortalSessions,\n});\nexport const Checkout = resourceNamespace('checkout', {\n    Sessions: CheckoutSessions,\n});\nexport const Climate = resourceNamespace('climate', {\n    Orders: ClimateOrders,\n    Products: ClimateProducts,\n    Suppliers: ClimateSuppliers,\n});\nexport const Entitlements = resourceNamespace('entitlements', {\n    ActiveEntitlements: EntitlementsActiveEntitlements,\n    Features: EntitlementsFeatures,\n});\nexport const FinancialConnections = resourceNamespace('financialConnections', {\n    Accounts: FinancialConnectionsAccounts,\n    Sessions: FinancialConnectionsSessions,\n    Transactions: FinancialConnectionsTransactions,\n});\nexport const Forwarding = resourceNamespace('forwarding', {\n    Requests: ForwardingRequests,\n});\nexport const Identity = resourceNamespace('identity', {\n    VerificationReports: IdentityVerificationReports,\n    VerificationSessions: IdentityVerificationSessions,\n});\nexport const Issuing = resourceNamespace('issuing', {\n    Authorizations: IssuingAuthorizations,\n    Cardholders: IssuingCardholders,\n    Cards: IssuingCards,\n    Disputes: IssuingDisputes,\n    PersonalizationDesigns: IssuingPersonalizationDesigns,\n    PhysicalBundles: IssuingPhysicalBundles,\n    Tokens: IssuingTokens,\n    Transactions: IssuingTransactions,\n});\nexport const Radar = resourceNamespace('radar', {\n    EarlyFraudWarnings: RadarEarlyFraudWarnings,\n    ValueListItems: RadarValueListItems,\n    ValueLists: RadarValueLists,\n});\nexport const Reporting = resourceNamespace('reporting', {\n    ReportRuns: ReportingReportRuns,\n    ReportTypes: ReportingReportTypes,\n});\nexport const Sigma = resourceNamespace('sigma', {\n    ScheduledQueryRuns: SigmaScheduledQueryRuns,\n});\nexport const Tax = resourceNamespace('tax', {\n    Calculations: TaxCalculations,\n    Registrations: TaxRegistrations,\n    Settings: TaxSettings,\n    Transactions: TaxTransactions,\n});\nexport const Terminal = resourceNamespace('terminal', {\n    Configurations: TerminalConfigurations,\n    ConnectionTokens: TerminalConnectionTokens,\n    Locations: TerminalLocations,\n    Readers: TerminalReaders,\n});\nexport const TestHelpers = resourceNamespace('testHelpers', {\n    ConfirmationTokens: TestHelpersConfirmationTokens,\n    Customers: TestHelpersCustomers,\n    Refunds: TestHelpersRefunds,\n    TestClocks: TestHelpersTestClocks,\n    Issuing: resourceNamespace('issuing', {\n        Authorizations: TestHelpersIssuingAuthorizations,\n        Cards: TestHelpersIssuingCards,\n        PersonalizationDesigns: TestHelpersIssuingPersonalizationDesigns,\n        Transactions: TestHelpersIssuingTransactions,\n    }),\n    Terminal: resourceNamespace('terminal', {\n        Readers: TestHelpersTerminalReaders,\n    }),\n    Treasury: resourceNamespace('treasury', {\n        InboundTransfers: TestHelpersTreasuryInboundTransfers,\n        OutboundPayments: TestHelpersTreasuryOutboundPayments,\n        OutboundTransfers: TestHelpersTreasuryOutboundTransfers,\n        ReceivedCredits: TestHelpersTreasuryReceivedCredits,\n        ReceivedDebits: TestHelpersTreasuryReceivedDebits,\n    }),\n});\nexport const Treasury = resourceNamespace('treasury', {\n    CreditReversals: TreasuryCreditReversals,\n    DebitReversals: TreasuryDebitReversals,\n    FinancialAccounts: TreasuryFinancialAccounts,\n    InboundTransfers: TreasuryInboundTransfers,\n    OutboundPayments: TreasuryOutboundPayments,\n    OutboundTransfers: TreasuryOutboundTransfers,\n    ReceivedCredits: TreasuryReceivedCredits,\n    ReceivedDebits: TreasuryReceivedDebits,\n    TransactionEntries: TreasuryTransactionEntries,\n    Transactions: TreasuryTransactions,\n});\nexport const V2 = resourceNamespace('v2', {\n    Billing: resourceNamespace('billing', {\n        MeterEventAdjustments: V2BillingMeterEventAdjustments,\n        MeterEventSession: V2BillingMeterEventSession,\n        MeterEventStream: V2BillingMeterEventStream,\n        MeterEvents: V2BillingMeterEvents,\n    }),\n    Core: resourceNamespace('core', {\n        EventDestinations: V2CoreEventDestinations,\n        Events: V2CoreEvents,\n    }),\n});\n", "import * as _Error from './Error.js';\nimport { RequestSender } from './RequestSender.js';\nimport { StripeResource } from './StripeResource.js';\nimport { createWebhooks } from './Webhooks.js';\nimport { ApiVersion } from './apiVersion.js';\nimport { CryptoProvider } from './crypto/CryptoProvider.js';\nimport { HttpClient, HttpClientResponse } from './net/HttpClient.js';\nimport * as resources from './resources.js';\nimport { createApiKeyAuthenticator, determineProcessUserAgentProperties, pascalToCamelCase, validateInteger, } from './utils.js';\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = ApiVersion;\nconst DEFAULT_TIMEOUT = 80000;\nconst MAX_NETWORK_RETRY_DELAY_SEC = 5;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = [\n    'authenticator',\n    'apiVersion',\n    'typescript',\n    'maxNetworkRetries',\n    'httpAgent',\n    'httpClient',\n    'timeout',\n    'host',\n    'port',\n    'protocol',\n    'telemetry',\n    'appInfo',\n    'stripeAccount',\n    'stripeContext',\n];\nconst defaultRequestSenderFactory = (stripe) => new RequestSender(stripe, StripeResource.MAX_BUFFERED_REQUEST_METRICS);\nexport function createStripe(platformFunctions, requestSender = defaultRequestSenderFactory) {\n    Stripe.PACKAGE_VERSION = '18.4.0';\n    Stripe.API_VERSION = ApiVersion;\n    Stripe.USER_AGENT = Object.assign({ bindings_version: Stripe.PACKAGE_VERSION, lang: 'node', publisher: 'stripe', uname: null, typescript: false }, determineProcessUserAgentProperties());\n    Stripe.StripeResource = StripeResource;\n    Stripe.resources = resources;\n    Stripe.HttpClient = HttpClient;\n    Stripe.HttpClientResponse = HttpClientResponse;\n    Stripe.CryptoProvider = CryptoProvider;\n    Stripe.webhooks = createWebhooks(platformFunctions);\n    function Stripe(key, config = {}) {\n        if (!(this instanceof Stripe)) {\n            return new Stripe(key, config);\n        }\n        const props = this._getPropsFromConfig(config);\n        this._platformFunctions = platformFunctions;\n        Object.defineProperty(this, '_emitter', {\n            value: this._platformFunctions.createEmitter(),\n            enumerable: false,\n            configurable: false,\n            writable: false,\n        });\n        this.VERSION = Stripe.PACKAGE_VERSION;\n        this.on = this._emitter.on.bind(this._emitter);\n        this.once = this._emitter.once.bind(this._emitter);\n        this.off = this._emitter.removeListener.bind(this._emitter);\n        const agent = props.httpAgent || null;\n        this._api = {\n            host: props.host || DEFAULT_HOST,\n            port: props.port || DEFAULT_PORT,\n            protocol: props.protocol || 'https',\n            basePath: DEFAULT_BASE_PATH,\n            version: props.apiVersion || DEFAULT_API_VERSION,\n            timeout: validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n            maxNetworkRetries: validateInteger('maxNetworkRetries', props.maxNetworkRetries, 2),\n            agent: agent,\n            httpClient: props.httpClient ||\n                (agent\n                    ? this._platformFunctions.createNodeHttpClient(agent)\n                    : this._platformFunctions.createDefaultHttpClient()),\n            dev: false,\n            stripeAccount: props.stripeAccount || null,\n            stripeContext: props.stripeContext || null,\n        };\n        const typescript = props.typescript || false;\n        if (typescript !== Stripe.USER_AGENT.typescript) {\n            // The mutation here is uncomfortable, but likely fastest;\n            // serializing the user agent involves shelling out to the system,\n            // and given some users may instantiate the library many times without switching between TS and non-TS,\n            // we only want to incur the performance hit when that actually happens.\n            Stripe.USER_AGENT.typescript = typescript;\n        }\n        if (props.appInfo) {\n            this._setAppInfo(props.appInfo);\n        }\n        this._prepResources();\n        this._setAuthenticator(key, props.authenticator);\n        this.errors = _Error;\n        this.webhooks = Stripe.webhooks;\n        this._prevRequestMetrics = [];\n        this._enableTelemetry = props.telemetry !== false;\n        this._requestSender = requestSender(this);\n        // Expose StripeResource on the instance too\n        // @ts-ignore\n        this.StripeResource = Stripe.StripeResource;\n    }\n    Stripe.errors = _Error;\n    Stripe.createNodeHttpClient = platformFunctions.createNodeHttpClient;\n    /**\n     * Creates an HTTP client for issuing Stripe API requests which uses the Web\n     * Fetch API.\n     *\n     * A fetch function can optionally be passed in as a parameter. If none is\n     * passed, will default to the default `fetch` function in the global scope.\n     */\n    Stripe.createFetchHttpClient = platformFunctions.createFetchHttpClient;\n    /**\n     * Create a CryptoProvider which uses the built-in Node crypto libraries for\n     * its crypto operations.\n     */\n    Stripe.createNodeCryptoProvider = platformFunctions.createNodeCryptoProvider;\n    /**\n     * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n     * Crypto API spec for its crypto operations.\n     *\n     * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n     * is passed, will default to the default `crypto.subtle` object in the global\n     * scope.\n     */\n    Stripe.createSubtleCryptoProvider =\n        platformFunctions.createSubtleCryptoProvider;\n    Stripe.prototype = {\n        // Properties are set in the constructor above\n        _appInfo: undefined,\n        on: null,\n        off: null,\n        once: null,\n        VERSION: null,\n        StripeResource: null,\n        webhooks: null,\n        errors: null,\n        _api: null,\n        _prevRequestMetrics: null,\n        _emitter: null,\n        _enableTelemetry: null,\n        _requestSender: null,\n        _platformFunctions: null,\n        rawRequest(method, path, params, options) {\n            return this._requestSender._rawRequest(method, path, params, options);\n        },\n        /**\n         * @private\n         */\n        _setAuthenticator(key, authenticator) {\n            if (key && authenticator) {\n                throw new Error(\"Can't specify both apiKey and authenticator\");\n            }\n            if (!key && !authenticator) {\n                throw new Error('Neither apiKey nor config.authenticator provided');\n            }\n            this._authenticator = key\n                ? createApiKeyAuthenticator(key)\n                : authenticator;\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _setAppInfo(info) {\n            if (info && typeof info !== 'object') {\n                throw new Error('AppInfo must be an object.');\n            }\n            if (info && !info.name) {\n                throw new Error('AppInfo.name is required');\n            }\n            info = info || {};\n            this._appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n                if (typeof info[prop] == 'string') {\n                    accum = accum || {};\n                    accum[prop] = info[prop];\n                }\n                return accum;\n            }, {});\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _setApiField(key, value) {\n            this._api[key] = value;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */\n        getApiField(key) {\n            return this._api[key];\n        },\n        setClientId(clientId) {\n            this._clientId = clientId;\n        },\n        getClientId() {\n            return this._clientId;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */\n        getConstant: (c) => {\n            switch (c) {\n                case 'DEFAULT_HOST':\n                    return DEFAULT_HOST;\n                case 'DEFAULT_PORT':\n                    return DEFAULT_PORT;\n                case 'DEFAULT_BASE_PATH':\n                    return DEFAULT_BASE_PATH;\n                case 'DEFAULT_API_VERSION':\n                    return DEFAULT_API_VERSION;\n                case 'DEFAULT_TIMEOUT':\n                    return DEFAULT_TIMEOUT;\n                case 'MAX_NETWORK_RETRY_DELAY_SEC':\n                    return MAX_NETWORK_RETRY_DELAY_SEC;\n                case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n                    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n            }\n            return Stripe[c];\n        },\n        getMaxNetworkRetries() {\n            return this.getApiField('maxNetworkRetries');\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _setApiNumberField(prop, n, defaultVal) {\n            const val = validateInteger(prop, n, defaultVal);\n            this._setApiField(prop, val);\n        },\n        getMaxNetworkRetryDelay() {\n            return MAX_NETWORK_RETRY_DELAY_SEC;\n        },\n        getInitialNetworkRetryDelay() {\n            return INITIAL_NETWORK_RETRY_DELAY_SEC;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         *\n         * Gets a JSON version of a User-Agent and uses a cached version for a slight\n         * speed advantage.\n         */\n        getClientUserAgent(cb) {\n            return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         *\n         * Gets a JSON version of a User-Agent by encoding a seeded object and\n         * fetching a uname from the system.\n         */\n        getClientUserAgentSeeded(seed, cb) {\n            this._platformFunctions.getUname().then((uname) => {\n                var _a;\n                const userAgent = {};\n                for (const field in seed) {\n                    if (!Object.prototype.hasOwnProperty.call(seed, field)) {\n                        continue;\n                    }\n                    userAgent[field] = encodeURIComponent((_a = seed[field]) !== null && _a !== void 0 ? _a : 'null');\n                }\n                // URI-encode in case there are unusual characters in the system's uname.\n                userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n                const client = this.getApiField('httpClient');\n                if (client) {\n                    userAgent.httplib = encodeURIComponent(client.getClientName());\n                }\n                if (this._appInfo) {\n                    userAgent.application = this._appInfo;\n                }\n                cb(JSON.stringify(userAgent));\n            });\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */\n        getAppInfoAsString() {\n            if (!this._appInfo) {\n                return '';\n            }\n            let formatted = this._appInfo.name;\n            if (this._appInfo.version) {\n                formatted += `/${this._appInfo.version}`;\n            }\n            if (this._appInfo.url) {\n                formatted += ` (${this._appInfo.url})`;\n            }\n            return formatted;\n        },\n        getTelemetryEnabled() {\n            return this._enableTelemetry;\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _prepResources() {\n            for (const name in resources) {\n                if (!Object.prototype.hasOwnProperty.call(resources, name)) {\n                    continue;\n                }\n                // @ts-ignore\n                this[pascalToCamelCase(name)] = new resources[name](this);\n            }\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */\n        _getPropsFromConfig(config) {\n            // If config is null or undefined, just bail early with no props\n            if (!config) {\n                return {};\n            }\n            // config can be an object or a string\n            const isString = typeof config === 'string';\n            const isObject = config === Object(config) && !Array.isArray(config);\n            if (!isObject && !isString) {\n                throw new Error('Config must either be an object or a string');\n            }\n            // If config is a string, we assume the old behavior of passing in a string representation of the api version\n            if (isString) {\n                return {\n                    apiVersion: config,\n                };\n            }\n            // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n            const values = Object.keys(config).filter((value) => !ALLOWED_CONFIG_PROPERTIES.includes(value));\n            if (values.length > 0) {\n                throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n            }\n            return config;\n        },\n        parseThinEvent(payload, header, secret, tolerance, cryptoProvider, receivedAt) {\n            // parses and validates the event payload all in one go\n            return this.webhooks.constructEvent(payload, header, secret, tolerance, cryptoProvider, receivedAt);\n        },\n    };\n    return Stripe;\n}\n", "import { WebPlatformFunctions } from './platform/WebPlatformFunctions.js';\nimport { createStripe } from './stripe.core.js';\nexport const Stripe = createStripe(new WebPlatformFunctions());\nexport default Stripe;\n", "// Cloudflare Pages Function: /api/stripe-webhook\n// Handles Stripe webhook events to confirm purchases and activate premium features.\n\nimport type { PagesFunction } from '@cloudflare/workers-types';\nimport { Env } from '../lib/context';\nimport { DatabaseStorage } from '../../server/storage';\nimport Stripe from 'stripe';\nimport { drizzle } from 'drizzle-orm/d1';\nimport * as schema from '../../shared/schema';\n\n// Helper to create a JSON response\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': 'https://stripe.com', // Only allow Stripe\n    },\n  });\n}\n\n// Fallback: fetch webhook signing secret from DB settings if not provided in env\nasync function getWebhookSecret(env: Env): Promise<string | null> {\n  if (env.STRIPE_WEBHOOK_SECRET) return env.STRIPE_WEBHOOK_SECRET;\n  try {\n    const row = await env.DB.prepare('SELECT value FROM settings WHERE key = ?')\n      .bind('payment_stripeWebhookSecret')\n      .first<{ value: string }>();\n    if (row && row.value) return typeof row.value === 'string' ? row.value : String(row.value);\n  } catch (e) {\n    // ignore and return null\n  }\n  return null;\n}\n\n// Helper to generate invoice PDF (placeholder for now)\nasync function generateInvoicePDF(invoiceData: any): Promise<string> {\n  // TODO: Implement PDF generation using jsPDF or similar\n  // For now, return a placeholder URL\n  return `/api/invoices/${invoiceData.invoiceNumber}.pdf`;\n}\n\nexport const onRequestPost: PagesFunction<Env> = async (ctx) => {\n  const { request, env, waitUntil } = ctx as any;\n  const signature = request.headers.get('stripe-signature') || request.headers.get('Stripe-Signature');\n  if (!signature) {\n    console.error('Webhook Error: Missing Stripe-Signature header');\n    return new Response('Missing Stripe-Signature header', { status: 400 });\n  }\n\n  if (!env.STRIPE_SECRET_KEY) {\n    console.error('Missing STRIPE_SECRET_KEY');\n    return new Response('Server not configured', { status: 500 });\n  }\n\n  const webhookSecret = await getWebhookSecret(env);\n  if (!webhookSecret) {\n    console.error('Missing STRIPE_WEBHOOK_SECRET');\n    return new Response('Webhook not configured', { status: 500 });\n  }\n\n  let event: Stripe.Event;\n\n  try {\n    const stripe = new Stripe(env.STRIPE_SECRET_KEY, {\n      // Use account default API version\n      httpClient: Stripe.createFetchHttpClient(),\n    });\n\n    const body = await request.text();\n\n    const cryptoProvider = Stripe.createSubtleCryptoProvider();\n\n    // Verify webhook signature using Web Crypto provider (Workers-compatible)\n    event = await stripe.webhooks.constructEventAsync(body, signature, webhookSecret, undefined, cryptoProvider);\n    console.log('Stripe webhook signature verified for event:', event.type);\n  } catch (err: any) {\n    console.error('Webhook signature verification failed:', err?.message || err);\n    return new Response(`Webhook signature verification failed: ${err?.message || 'unknown error'}`, { status: 400 });\n  }\n\n  // Initialize database connection and storage\n  const db = drizzle(env.DB, { schema }) as any; // Type assertion for D1 compatibility\n  const storage = new DatabaseStorage(db);\n\n  try {\n    // Handle the event\n    switch (event.type) {\n      case 'checkout.session.completed':\n        console.log('Scheduling checkout.session.completed processing via waitUntil');\n        waitUntil((async () => {\n          try {\n            await handleCheckoutSessionCompleted(event.data.object as Stripe.Checkout.Session, storage);\n          } catch (e) {\n            console.error('Deferred processing error (checkout.session.completed):', e);\n          }\n        })());\n        break;\n      case 'payment_intent.succeeded':\n        console.log('Payment intent succeeded:', (event.data.object as any).id);\n        break;\n      case 'payment_intent.payment_failed':\n        console.log('Payment intent failed:', (event.data.object as any).id);\n        break;\n      case 'customer.subscription.created':\n      case 'customer.subscription.updated':\n      case 'customer.subscription.deleted':\n        console.log('Subscription event:', event.type, (event.data.object as any).id);\n        break;\n      default:\n        console.log(`Unhandled event type: ${event.type}`);\n    }\n\n    // Acknowledge immediately; processing continues asynchronously\n    return json({ received: true, scheduled: true });\n  } catch (err: any) {\n    console.error('Error processing Stripe webhook:', err);\n    return new Response(`Webhook processing error: ${err.message}`, { status: 500 });\n  }\n};\n\n// Handle checkout session completed event\nasync function handleCheckoutSessionCompleted(\n  session: Stripe.Checkout.Session,\n  storage: DatabaseStorage\n): Promise<void> {\n  console.log('Processing checkout.session.completed for session:', session.id);\n\n  const customerEmail = session.customer_details?.email;\n  const customerName = session.customer_details?.name;\n  const paymentIntentId = typeof session.payment_intent === 'string' ? session.payment_intent : '';\n  const amount = session.amount_total ? session.amount_total / 100 : 0;\n  const currency = session.currency || 'usd';\n\n  if (!customerEmail) {\n    throw new Error('Customer email is required for checkout completion');\n  }\n\n  // Idempotency guard: if we've already created an order for this payment intent, exit early\n  if (paymentIntentId) {\n    const existing = await storage.getOrderByPaymentIntentId(paymentIntentId);\n    if (existing) {\n      console.log(`Idempotency: order already exists for paymentIntentId=${paymentIntentId}. Order ID: ${existing.id}`);\n      return;\n    }\n  }\n\n  console.log(`Processing purchase for: ${customerEmail}, Amount: ${amount} ${currency.toUpperCase()}`);\n\n  const now = new Date().getTime();\n\n  try {\n    // 1. Find or create customer\n    let customer = await storage.getCustomerByEmail(customerEmail);\n    if (!customer) {\n      console.log(`Creating new customer: ${customerEmail}`);\n      customer = await storage.createCustomer({\n        email: customerEmail,\n        name: customerName || customerEmail,\n        extensionActivated: true,\n        subscriptionStatus: 'active',\n        totalSpent: amount.toString(),\n        totalOrders: 1,\n        lastOrderDate: now,\n      });\n    } else {\n      console.log(`Updating existing customer: ${customerEmail}`);\n      await storage.updateCustomer(customer.id, {\n        extensionActivated: true,\n        subscriptionStatus: 'active',\n        totalSpent: (parseFloat(customer.totalSpent) + amount).toString(),\n        totalOrders: customer.totalOrders + 1,\n        lastOrderDate: now,\n        updatedAt: now,\n      });\n    }\n\n    // 2. Update user if exists (for authenticated users)\n    const user = await storage.getUserByEmail(customerEmail);\n    if (user) {\n      console.log(`Updating user premium status: ${customerEmail}`);\n      await storage.updateUser(user.id, {\n        isPremium: true,\n        extensionActivated: true,\n        premiumActivatedAt: now.toString(),\n        totalSpent: (parseFloat(user.totalSpent) + amount).toString(),\n        totalOrders: user.totalOrders + 1,\n      });\n    }\n\n    // 3. Create order record\n    const downloadToken = `download_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const activationCode = `activation_${Date.now()}_${Math.random().toString(36).substr(2, 12)}`;\n\n    console.log('Creating order record...');\n    const order = await storage.createOrder({\n      userId: user?.id || null,\n      customerEmail,\n      customerName: customerName || customerEmail,\n      originalAmount: amount.toString(),\n      finalAmount: amount.toString(),\n      currency: currency.toLowerCase(),\n      status: 'completed',\n      paymentMethod: 'stripe',\n      paymentIntentId,\n      downloadToken,\n      activationCode,\n      completedAt: now,\n    });\n\n    console.log(`Order created with ID: ${order.id}`);\n\n    // 4. Create invoice\n    const invoiceNumber = `INV-${order.id}-${Date.now()}`;\n    console.log(`Creating invoice: ${invoiceNumber}`);\n\n    const invoice = await storage.createInvoice({\n      orderId: order.id,\n      invoiceNumber,\n      customerId: customer.id,\n      customerName: customerName || customerEmail,\n      customerEmail,\n      invoiceDate: now,\n      dueDate: now, // Immediate payment\n      subtotal: amount.toString(),\n      taxAmount: '0.00',\n      discountAmount: '0.00',\n      totalAmount: amount.toString(),\n      currency: currency.toUpperCase(),\n      status: 'paid',\n      paidAt: now,\n    });\n\n    // 5. Create invoice item\n    await storage.createInvoiceItem({\n      invoiceId: invoice.id,\n      productName: 'OCUS Job Hunter Extension',\n      description: 'Premium Chrome Extension for OCUS Job Hunting',\n      quantity: 1,\n      unitPrice: amount.toString(),\n      totalPrice: amount.toString(),\n    });\n\n    // 6. Generate activation key\n    const activationKey = await storage.createActivationKey({\n      activationKey: activationCode,\n      orderId: order.id,\n      userId: user?.id,\n    });\n\n    console.log(`Activation key created: ${activationKey.activationKey}`);\n\n    // 7. Generate invoice PDF URL (placeholder)\n    const invoiceUrl = await generateInvoicePDF({\n      invoiceNumber,\n      customerName: customerName || customerEmail,\n      customerEmail,\n      amount,\n      currency,\n      date: new Date(now).toISOString(),\n    });\n\n    // 8. Update order with invoice URL\n    await storage.updateOrder(order.id, { invoiceUrl });\n\n    console.log(`\u2705 Successfully processed purchase for ${customerEmail}:`);\n    console.log(`   - Customer ID: ${customer.id}`);\n    console.log(`   - Order ID: ${order.id}`);\n    console.log(`   - Invoice: ${invoiceNumber}`);\n    console.log(`   - Activation Code: ${activationCode}`);\n    console.log(`   - Amount: ${amount} ${currency.toUpperCase()}`);\n  } catch (error: any) {\n    console.error('Error in handleCheckoutSessionCompleted:', error);\n    throw new Error(`Failed to process checkout completion: ${error.message}`);\n  }\n}\n\nexport const onRequestOptions: PagesFunction<Env> = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': 'https://stripe.com',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, stripe-signature, Stripe-Signature',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n};\n", "import { SettingsStorage } from '../lib/settings-storage';\n\nexport const onRequestPost = async ({ request, env }: any) => {\n  try {\n    console.log('=== TEST UPLOAD ENDPOINT ===');\n    \n    if (!env.DB) {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'Database not available'\n      }), {\n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n\n    const formData = await request.formData();\n    console.log('Test upload - FormData keys:', Array.from(formData.keys()));\n    \n    const testFile = formData.get('testImage') as File;\n    console.log('Test file received:', testFile ? `${testFile.name} (${testFile.size} bytes, ${testFile.type})` : 'null');\n    \n    if (testFile && testFile.size > 0) {\n      console.log('Converting test file to base64...');\n      const arrayBuffer = await testFile.arrayBuffer();\n      const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\n      const dataUrl = `data:${testFile.type};base64,${base64}`;\n      console.log('Test file converted, data URL length:', dataUrl.length);\n      \n      const settingsStorage = new SettingsStorage(env.DB);\n      await settingsStorage.initializeSettings();\n      \n      console.log('Saving test image to database...');\n      await settingsStorage.setSetting('test_image', dataUrl);\n      console.log('Test image saved successfully');\n      \n      // Verify it was saved\n      console.log('Verifying saved data...');\n      const savedData = await settingsStorage.getSetting('test_image');\n      console.log('Retrieved data length:', savedData ? savedData.length : 'null');\n      \n      return new Response(JSON.stringify({\n        success: true,\n        message: 'Test upload successful',\n        originalSize: testFile.size,\n        dataUrlLength: dataUrl.length,\n        savedDataLength: savedData ? savedData.length : 0,\n        verified: savedData === dataUrl\n      }), {\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    } else {\n      return new Response(JSON.stringify({\n        success: false,\n        message: 'No file received or file is empty'\n      }), {\n        status: 400,\n        headers: { \n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n    }\n    \n  } catch (error) {\n    console.error('Test upload error:', error);\n    const message = error instanceof Error ? error.message : String(error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: `Test upload failed: ${message}`\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n};\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n};\n", "function json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*' \n    }\n  });\n}\n\n// Simple test endpoint to check user data\nexport const onRequestPost = async ({ request, env }: any) => {\n  try {\n    const body = await request.json() as { email?: string };\n    const email = body.email || 'heshmat@gmail.com';\n\n    if (!env.DB) {\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    // Check users table\n    const user = await env.DB.prepare(`\n      SELECT id, email, name, is_premium, extension_activated, premium_activated_at, created_at\n      FROM users WHERE email = ?\n    `).bind(email).first();\n\n    // Check customers table\n    const customer = await env.DB.prepare(`\n      SELECT id, email, name, is_premium, extension_activated, created_at\n      FROM customers WHERE email = ?\n    `).bind(email).first();\n\n    // Check orders for both user_id and customer_id\n    const ordersUserQuery = await env.DB.prepare(`\n      SELECT id, customer_id, customer_email, original_amount, final_amount, status, created_at, completed_at\n      FROM orders WHERE customer_email = ?\n    `).bind(email).all();\n\n    const ordersCustomerQuery = customer ? await env.DB.prepare(`\n      SELECT id, customer_id, customer_email, original_amount, final_amount, status, created_at, completed_at\n      FROM orders WHERE customer_id = ?\n    `).bind(customer.id).all() : { results: [] };\n\n    return json({\n      success: true,\n      email,\n      user,\n      customer,\n      ordersFromEmail: ordersUserQuery.results,\n      ordersFromCustomerId: ordersCustomerQuery.results,\n      summary: {\n        userExists: !!user,\n        customerExists: !!customer,\n        userPremium: user?.is_premium === 1,\n        customerPremium: customer?.is_premium === 1,\n        userExtensionActivated: user?.extension_activated === 1,\n        customerExtensionActivated: customer?.extension_activated === 1,\n        totalOrdersFromEmail: ordersUserQuery.results?.length || 0,\n        totalOrdersFromCustomerId: ordersCustomerQuery.results?.length || 0\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Error checking user data:', error);\n    return json({ \n      success: false, \n      message: error.message \n    }, 500);\n  }\n};\n", "// Cloudflare Pages Function: /api/tickets\n// Uses D1 database for persistent ticket storage\n\nimport { TicketStorage, Env } from '../../lib/db';\n\ninterface TicketPayload {\n  title?: string;\n  description?: string;\n  category?: string;\n  priority?: string;\n  customerEmail?: string;\n  customerName?: string;\n  customerId?: string;\n}\nimport { UserStorage } from '../../lib/user-storage';\nimport type { D1Database } from '@cloudflare/workers-types';\n\nfunction json(data: any, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n\nexport const onRequestOptions = async () => {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PATCH, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n};\n\nexport const onRequestGet = async ({ request, env }: { request: Request; env: Env }) => {\n  const expressBase: string | undefined = env?.EXPRESS_API_BASE;\n  if (expressBase) {\n    const base = expressBase.replace(/\\/$/, \"\");\n    const urlObj = new URL(request.url);\n    const qs = urlObj.search ? urlObj.search : '';\n    const url = `${base}/api/tickets${qs}`;\n    const headers: Record<string, string> = {};\n    const cookie = request.headers.get('cookie');\n    const auth = request.headers.get('authorization');\n    if (cookie) headers['cookie'] = cookie;\n    if (auth) headers['authorization'] = auth;\n    const proxied = await fetch(url, { headers, redirect: 'manual' });\n    const respHeaders = new Headers(proxied.headers);\n    const setCookie = respHeaders.get('set-cookie');\n    if (setCookie) {\n      const rewritten = setCookie.replace(/;\\s*Domain=[^;]+/i, '');\n      respHeaders.delete('set-cookie');\n      respHeaders.append('set-cookie', rewritten);\n    }\n    return new Response(proxied.body, { status: proxied.status, headers: respHeaders });\n  }\n\n  const url = new URL(request.url);\n  const isAdmin = url.searchParams.get('isAdmin') === 'true';\n  const customerEmail = url.searchParams.get('customerEmail');\n  const customerId = url.searchParams.get('customerId');\n\n  // Check if D1 database is available\n  if (!env.DB) {\n    console.error('D1 database not available');\n    return json({ error: 'Database not available' }, 500);\n  }\n\n  try {\n    const storage = new TicketStorage(env.DB);\n    let result: any[] = [];\n    \n    if (isAdmin) {\n      // Admin sees all tickets\n      result = await storage.getAllTickets();\n    } else if (customerId) {\n      // Customer sees only their tickets by customer ID\n      result = await storage.getTicketsByCustomerId(parseInt(customerId));\n    } else if (customerEmail) {\n      // Fallback to email-based filtering\n      result = await storage.getTicketsByCustomerEmail(customerEmail);\n    } else {\n      // No identification provided - return empty array for security\n      result = [];\n    }\n    \n    return json(result);\n  } catch (error: any) {\n    console.error('Database error:', error);\n    return json({ error: 'Database query failed', details: error.message }, 500);\n  }\n};\n\nexport const onRequestPost = async ({ request, env }: { request: Request; env: Env }) => {\n  try {\n    const expressBase: string | undefined = env?.EXPRESS_API_BASE;\n    if (expressBase) {\n      const base = expressBase.replace(/\\/$/, \"\");\n      const url = `${base}/api/tickets`;\n      const headers: Record<string, string> = {};\n      const cookie = request.headers.get('cookie');\n      const ct = request.headers.get('content-type');\n      const auth = request.headers.get('authorization');\n      if (cookie) headers['cookie'] = cookie;\n      if (ct) headers['content-type'] = ct;\n      if (auth) headers['authorization'] = auth;\n      const proxied = await fetch(url, { method: 'POST', headers, body: request.body, redirect: 'manual' });\n      const respHeaders = new Headers(proxied.headers);\n      const setCookie = respHeaders.get('set-cookie');\n      if (setCookie) {\n        const rewritten = setCookie.replace(/;\\s*Domain=[^;]+/i, '');\n        respHeaders.delete('set-cookie');\n        respHeaders.append('set-cookie', rewritten);\n      }\n      return new Response(proxied.body, { status: proxied.status, headers: respHeaders });\n    }\n    const body = await request.json() as TicketPayload;\n    const { title, description, category, priority, customerEmail, customerName, customerId } = body;\n    const parsedCustomerId = customerId ? parseInt(customerId) : undefined;\n    if (!title || !description || !customerEmail || !parsedCustomerId) {\n      return json({ success: false, message: 'Missing required fields' }, 400);\n    }\n\n    // Check if D1 database is available\n    if (!env.DB) {\n      console.error('D1 database not available for ticket creation');\n      return json({ success: false, message: 'Database not available' }, 500);\n    }\n\n    const storage = new TicketStorage(env.DB);\n    let finalCustomerName = customerName;\n    \n    // If we have customerId but no customerName, fetch from user storage\n    if (parsedCustomerId && !customerName) {\n      try {\n        const userStorage = new UserStorage(env.DB as D1Database);\n        await userStorage.initializeUsers();\n        const user = await userStorage.getUserById(parsedCustomerId);\n        if (user) {\n          finalCustomerName = user.name;\n        }\n      } catch (error) {\n        console.error('Failed to fetch user name:', error);\n      }\n    }\n\n    const ticket = await storage.createTicket({\n      customer_id: parsedCustomerId,\n      title,\n      description,\n      category: category || 'general',\n      priority: priority || 'medium',\n      status: 'open',\n      customer_email: customerEmail,\n      customer_name: finalCustomerName || customerEmail,\n    });\n\n    return json({ success: true, ticket });\n  } catch (e) {\n    console.error('Failed to create ticket:', e);\n    const message = e instanceof Error ? e.message : 'An unknown error occurred';\n    return json({ success: false, message }, 500);\n  }\n};\n", "export const onRequestGet = async () => {\n  return new Response(JSON.stringify({\n    status: 'ok',\n    timestamp: Date.now(),\n    message: 'OCUS Job Hunter API is running'\n  }), {\n    headers: { \n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n};\n", "import { onRequestOptions as __api_admin_announcement_badges_translate_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges/translate.ts\"\nimport { onRequestPost as __api_admin_announcement_badges_translate_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges/translate.ts\"\nimport { onRequestGet as __api_invoices_admin_list_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices/admin/list.ts\"\nimport { onRequestDelete as __api_admin_announcement_badges__id__ts_onRequestDelete } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges/[id].ts\"\nimport { onRequestGet as __api_admin_announcement_badges__id__ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges/[id].ts\"\nimport { onRequestOptions as __api_admin_announcement_badges__id__ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges/[id].ts\"\nimport { onRequestPut as __api_admin_announcement_badges__id__ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges/[id].ts\"\nimport { onRequestDelete as __api_admin_countdown_banners__id__ts_onRequestDelete } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners/[id].ts\"\nimport { onRequestGet as __api_admin_countdown_banners__id__ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners/[id].ts\"\nimport { onRequestOptions as __api_admin_countdown_banners__id__ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners/[id].ts\"\nimport { onRequestPut as __api_admin_countdown_banners__id__ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners/[id].ts\"\nimport { onRequestOptions as __api_admin_dashboard_features__feature__ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/dashboard-features/[feature].ts\"\nimport { onRequestPut as __api_admin_dashboard_features__feature__ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/dashboard-features/[feature].ts\"\nimport { onRequestPut as __api_admin_orders__orderId__ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/orders/[orderId].ts\"\nimport { onRequestGet as __api_extension_check__id__ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/extension/check/[id].ts\"\nimport { onRequestGet as __api_extension_downloads__id__ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/extension/downloads/[id].ts\"\nimport { onRequestGet as __api_invoices__id__download_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices/[id]/download.ts\"\nimport { onRequestGet as __api_invoices__id__download_receipt_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices/[id]/download-receipt.ts\"\nimport { onRequestGet as __api_invoices__id__html_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices/[id]/html.ts\"\nimport { onRequestGet as __api_invoices__id__receipt_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices/[id]/receipt.ts\"\nimport { onRequestPost as __api_tickets__id__archive_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id]/archive.ts\"\nimport { onRequestGet as __api_tickets__id__messages_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id]/messages.ts\"\nimport { onRequestOptions as __api_tickets__id__messages_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id]/messages.ts\"\nimport { onRequestPost as __api_tickets__id__messages_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id]/messages.ts\"\nimport { onRequestOptions as __api_tickets__id__status_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id]/status.ts\"\nimport { onRequestPut as __api_tickets__id__status_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id]/status.ts\"\nimport { onRequestGet as __api_user__id__purchase_status_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/user/[id]/purchase-status.ts\"\nimport { onRequestGet as __api_user__userId__invoices_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/user/[userId]/invoices.ts\"\nimport { onRequestOptions as __api_user__userId__invoices_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/user/[userId]/invoices.ts\"\nimport { onRequestGet as __api_user__userId__orders_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/user/[userId]/orders.ts\"\nimport { onRequestOptions as __api_user__userId__orders_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/user/[userId]/orders.ts\"\nimport { onRequestGet as __api_user__userId__purchase_status_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/user/[userId]/purchase-status.ts\"\nimport { onRequestOptions as __api_user__userId__purchase_status_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/user/[userId]/purchase-status.ts\"\nimport { onRequestGet as __api_admin_analytics_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/analytics.ts\"\nimport { onRequestOptions as __api_admin_analytics_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/analytics.ts\"\nimport { onRequestDelete as __api_admin_announcement_badges_ts_onRequestDelete } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges.ts\"\nimport { onRequestGet as __api_admin_announcement_badges_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges.ts\"\nimport { onRequestOptions as __api_admin_announcement_badges_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges.ts\"\nimport { onRequestPost as __api_admin_announcement_badges_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges.ts\"\nimport { onRequestPut as __api_admin_announcement_badges_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/announcement-badges.ts\"\nimport { onRequestGet as __api_admin_auth_settings_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/auth-settings.ts\"\nimport { onRequestOptions as __api_admin_auth_settings_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/auth-settings.ts\"\nimport { onRequestPut as __api_admin_auth_settings_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/auth-settings.ts\"\nimport { onRequestGet as __api_admin_chat_settings_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/chat-settings.ts\"\nimport { onRequestOptions as __api_admin_chat_settings_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/chat-settings.ts\"\nimport { onRequestPut as __api_admin_chat_settings_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/chat-settings.ts\"\nimport { onRequestGet as __api_admin_check_user_data_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/check-user-data.ts\"\nimport { onRequestDelete as __api_admin_countdown_banners_ts_onRequestDelete } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners.ts\"\nimport { onRequestGet as __api_admin_countdown_banners_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners.ts\"\nimport { onRequestOptions as __api_admin_countdown_banners_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners.ts\"\nimport { onRequestPost as __api_admin_countdown_banners_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners.ts\"\nimport { onRequestPut as __api_admin_countdown_banners_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/countdown-banners.ts\"\nimport { onRequestOptions as __api_admin_create_default_banner_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/create-default-banner.ts\"\nimport { onRequestPost as __api_admin_create_default_banner_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/create-default-banner.ts\"\nimport { onRequestGet as __api_admin_customers_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/customers.ts\"\nimport { onRequestOptions as __api_admin_customers_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/customers.ts\"\nimport { onRequestGet as __api_admin_dashboard_features_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/dashboard-features.ts\"\nimport { onRequestOptions as __api_admin_dashboard_features_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/dashboard-features.ts\"\nimport { onRequestPut as __api_admin_dashboard_features_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/dashboard-features.ts\"\nimport { onRequestPost as __api_admin_fix_banner_price_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/fix-banner-price.ts\"\nimport { onRequestOptions as __api_admin_fix_existing_purchases_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/fix-existing-purchases.ts\"\nimport { onRequestPost as __api_admin_fix_existing_purchases_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/fix-existing-purchases.ts\"\nimport { onRequestPost as __api_admin_fix_premium_users_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/fix-premium-users.ts\"\nimport { onRequestPost as __api_admin_fix_purchased_users_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/fix-purchased-users.ts\"\nimport { onRequestGet as __api_admin_force_update_price_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/force-update-price.ts\"\nimport { onRequestGet as __api_admin_invoices_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/invoices.ts\"\nimport { onRequestOptions as __api_admin_invoices_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/invoices.ts\"\nimport { onRequestOptions as __api_admin_login_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/login.ts\"\nimport { onRequestPost as __api_admin_login_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/login.ts\"\nimport { onRequestGet as __api_admin_orders_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/orders.ts\"\nimport { onRequestOptions as __api_admin_orders_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/orders.ts\"\nimport { onRequestGet as __api_admin_payment_settings_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/payment-settings.ts\"\nimport { onRequestOptions as __api_admin_payment_settings_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/payment-settings.ts\"\nimport { onRequestPut as __api_admin_payment_settings_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/payment-settings.ts\"\nimport { onRequestGet as __api_admin_pricing_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/pricing.ts\"\nimport { onRequestOptions as __api_admin_pricing_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/pricing.ts\"\nimport { onRequestPut as __api_admin_pricing_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/pricing.ts\"\nimport { onRequestOptions as __api_admin_reset_db_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/reset-db.ts\"\nimport { onRequestPost as __api_admin_reset_db_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/reset-db.ts\"\nimport { onRequestGet as __api_admin_seo_settings_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/seo-settings.ts\"\nimport { onRequestOptions as __api_admin_seo_settings_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/seo-settings.ts\"\nimport { onRequestPatch as __api_admin_seo_settings_ts_onRequestPatch } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/seo-settings.ts\"\nimport { onRequestPut as __api_admin_seo_settings_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/seo-settings.ts\"\nimport { onRequestGet as __api_admin_stats_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/stats.ts\"\nimport { onRequestOptions as __api_admin_stats_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/stats.ts\"\nimport { onRequestOptions as __api_admin_sync_banner_price_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/sync-banner-price.ts\"\nimport { onRequestPost as __api_admin_sync_banner_price_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/sync-banner-price.ts\"\nimport { onRequestGet as __api_admin_tickets_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/tickets.ts\"\nimport { onRequestOptions as __api_admin_tickets_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/tickets.ts\"\nimport { onRequestOptions as __api_admin_update_banner_price_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/update-banner-price.ts\"\nimport { onRequestPost as __api_admin_update_banner_price_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/update-banner-price.ts\"\nimport { onRequestGet as __api_admin_update_banner_price_direct_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/update-banner-price-direct.ts\"\nimport { onRequestGet as __api_admin_update_premium_status_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/update-premium-status.ts\"\nimport { onRequestOptions as __api_admin_update_premium_status_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/update-premium-status.ts\"\nimport { onRequestPost as __api_admin_update_user_premium_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/update-user-premium.ts\"\nimport { onRequestGet as __api_admin_users_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/users.ts\"\nimport { onRequestOptions as __api_admin_users_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/admin/users.ts\"\nimport { onRequestGet as __api_announcement_badge_active_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/announcement-badge/active.ts\"\nimport { onRequestOptions as __api_announcement_badge_active_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/announcement-badge/active.ts\"\nimport { onRequestGet as __api_auth_facebook_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/auth/facebook.ts\"\nimport { onRequestGet as __api_auth_github_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/auth/github.ts\"\nimport { onRequestGet as __api_auth_google_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/auth/google.ts\"\nimport { onRequestOptions as __api_auth_register_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/auth/register.ts\"\nimport { onRequestPost as __api_auth_register_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/auth/register.ts\"\nimport { onRequestGet as __api_countdown_banner_active_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/countdown-banner/active.ts\"\nimport { onRequestOptions as __api_countdown_banner_active_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/countdown-banner/active.ts\"\nimport { onRequestOptions as __api_customer_login_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/login.ts\"\nimport { onRequestPost as __api_customer_login_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/login.ts\"\nimport { onRequestGet as __api_customer_profile_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/profile.ts\"\nimport { onRequestOptions as __api_customer_profile_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/profile.ts\"\nimport { onRequestPut as __api_customer_profile_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/profile.ts\"\nimport { onRequestOptions as __api_customer_register_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/register.ts\"\nimport { onRequestPost as __api_customer_register_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/register.ts\"\nimport { onRequestGet as __api_customer_stats_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/stats.ts\"\nimport { onRequestOptions as __api_customer_stats_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/customer/stats.ts\"\nimport { onRequestGet as __api_download_extension_premium_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/download-extension/premium.ts\"\nimport { onRequestGet as __api_download_extension_trial_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/download-extension/trial.ts\"\nimport { onRequestGet as __api_downloads_premium_extension_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/downloads/premium-extension.ts\"\nimport { onRequestOptions as __api_downloads_premium_extension_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/downloads/premium-extension.ts\"\nimport { onRequestGet as __api_invoices_customer_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices/customer.ts\"\nimport { onRequestGet as __api_invoices_generate_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices/generate.ts\"\nimport { onRequestOptions as __api_invoices_generate_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices/generate.ts\"\nimport { onRequestGet as __api_me_invoices_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/me/invoices.ts\"\nimport { onRequestOptions as __api_me_invoices_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/me/invoices.ts\"\nimport { onRequestGet as __api_me_orders_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/me/orders.ts\"\nimport { onRequestOptions as __api_me_orders_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/me/orders.ts\"\nimport { onRequestOptions as __api_orders_complete_purchase_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/orders/complete-purchase.ts\"\nimport { onRequestPost as __api_orders_complete_purchase_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/orders/complete-purchase.ts\"\nimport { onRequestGet as __api_orders_user_orders_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/orders/user-orders.ts\"\nimport { onRequestOptions as __api_orders_user_orders_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/orders/user-orders.ts\"\nimport { onRequestGet as __api_products_pricing_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/products/pricing.ts\"\nimport { onRequestOptions as __api_products_pricing_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/products/pricing.ts\"\nimport { onRequestGet as __api_download_extension__type__ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/download-extension/[type].ts\"\nimport { onRequestOptions as __api_download_extension__type__ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/download-extension/[type].ts\"\nimport { onRequestPost as __api_generate_invoice__orderId__ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/generate-invoice/[orderId].ts\"\nimport { onRequestDelete as __api_tickets__id__ts_onRequestDelete } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id].ts\"\nimport { onRequestOptions as __api_tickets__id__ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id].ts\"\nimport { onRequestPatch as __api_tickets__id__ts_onRequestPatch } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id].ts\"\nimport { onRequestPut as __api_tickets__id__ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/[id].ts\"\nimport { onRequestGet as __api_auth_settings_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/auth-settings.ts\"\nimport { onRequestOptions as __api_auth_settings_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/auth-settings.ts\"\nimport { onRequestOptions as __api_chat_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/chat.ts\"\nimport { onRequestPost as __api_chat_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/chat.ts\"\nimport { onRequestOptions as __api_complete_stripe_payment_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/complete-stripe-payment.ts\"\nimport { onRequestPost as __api_complete_stripe_payment_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/complete-stripe-payment.ts\"\nimport { onRequestOptions as __api_create_user_payment_intent_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/create-user-payment-intent.ts\"\nimport { onRequestPost as __api_create_user_payment_intent_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/create-user-payment-intent.ts\"\nimport { onRequestGet as __api_download_premium_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/download-premium.ts\"\nimport { onRequestOptions as __api_download_premium_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/download-premium.ts\"\nimport { onRequestPost as __api_download_premium_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/download-premium.ts\"\nimport { onRequestGet as __api_init_db_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/init-db.ts\"\nimport { onRequestOptions as __api_init_db_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/init-db.ts\"\nimport { onRequestGet as __api_invoice_settings_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoice-settings.ts\"\nimport { onRequestOptions as __api_invoice_settings_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoice-settings.ts\"\nimport { onRequestPut as __api_invoice_settings_ts_onRequestPut } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoice-settings.ts\"\nimport { onRequestGet as __api_invoices_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/invoices.ts\"\nimport { onRequestGet as __api_me_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/me.ts\"\nimport { onRequestGet as __api_migrate_db_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/migrate-db.ts\"\nimport { onRequestOptions as __api_migrate_db_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/migrate-db.ts\"\nimport { onRequestOptions as __api_purchase_complete_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/purchase-complete.ts\"\nimport { onRequestPost as __api_purchase_complete_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/purchase-complete.ts\"\nimport { onRequestOptions as __api_stripe_webhook_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/stripe-webhook.ts\"\nimport { onRequestPost as __api_stripe_webhook_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/stripe-webhook.ts\"\nimport { onRequestOptions as __api_test_upload_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/test-upload.ts\"\nimport { onRequestPost as __api_test_upload_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/test-upload.ts\"\nimport { onRequestPost as __api_test_user_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/test-user.ts\"\nimport { onRequestGet as __api_tickets_index_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/index.ts\"\nimport { onRequestOptions as __api_tickets_index_ts_onRequestOptions } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/index.ts\"\nimport { onRequestPost as __api_tickets_index_ts_onRequestPost } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/api/tickets/index.ts\"\nimport { onRequestGet as __health_ts_onRequestGet } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/functions/health.ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/admin/announcement-badges/translate\",\n      mountPath: \"/api/admin/announcement-badges\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges_translate_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges/translate\",\n      mountPath: \"/api/admin/announcement-badges\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges_translate_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/invoices/admin/list\",\n      mountPath: \"/api/invoices/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoices_admin_list_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges/:id\",\n      mountPath: \"/api/admin/announcement-badges\",\n      method: \"DELETE\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges__id__ts_onRequestDelete],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges/:id\",\n      mountPath: \"/api/admin/announcement-badges\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges__id__ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges/:id\",\n      mountPath: \"/api/admin/announcement-badges\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges__id__ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges/:id\",\n      mountPath: \"/api/admin/announcement-badges\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges__id__ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners/:id\",\n      mountPath: \"/api/admin/countdown-banners\",\n      method: \"DELETE\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners__id__ts_onRequestDelete],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners/:id\",\n      mountPath: \"/api/admin/countdown-banners\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners__id__ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners/:id\",\n      mountPath: \"/api/admin/countdown-banners\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners__id__ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners/:id\",\n      mountPath: \"/api/admin/countdown-banners\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners__id__ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/dashboard-features/:feature\",\n      mountPath: \"/api/admin/dashboard-features\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_dashboard_features__feature__ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/dashboard-features/:feature\",\n      mountPath: \"/api/admin/dashboard-features\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_dashboard_features__feature__ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/orders/:orderId\",\n      mountPath: \"/api/admin/orders\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_orders__orderId__ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/extension/check/:id\",\n      mountPath: \"/api/extension/check\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_extension_check__id__ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/extension/downloads/:id\",\n      mountPath: \"/api/extension/downloads\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_extension_downloads__id__ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/invoices/:id/download\",\n      mountPath: \"/api/invoices/:id\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoices__id__download_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/invoices/:id/download-receipt\",\n      mountPath: \"/api/invoices/:id\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoices__id__download_receipt_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/invoices/:id/html\",\n      mountPath: \"/api/invoices/:id\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoices__id__html_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/invoices/:id/receipt\",\n      mountPath: \"/api/invoices/:id\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoices__id__receipt_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/tickets/:id/archive\",\n      mountPath: \"/api/tickets/:id\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_tickets__id__archive_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/tickets/:id/messages\",\n      mountPath: \"/api/tickets/:id\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_tickets__id__messages_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/tickets/:id/messages\",\n      mountPath: \"/api/tickets/:id\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_tickets__id__messages_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/tickets/:id/messages\",\n      mountPath: \"/api/tickets/:id\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_tickets__id__messages_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/tickets/:id/status\",\n      mountPath: \"/api/tickets/:id\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_tickets__id__status_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/tickets/:id/status\",\n      mountPath: \"/api/tickets/:id\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_tickets__id__status_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/user/:id/purchase-status\",\n      mountPath: \"/api/user/:id\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_user__id__purchase_status_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/user/:userId/invoices\",\n      mountPath: \"/api/user/:userId\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_user__userId__invoices_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/user/:userId/invoices\",\n      mountPath: \"/api/user/:userId\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_user__userId__invoices_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/user/:userId/orders\",\n      mountPath: \"/api/user/:userId\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_user__userId__orders_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/user/:userId/orders\",\n      mountPath: \"/api/user/:userId\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_user__userId__orders_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/user/:userId/purchase-status\",\n      mountPath: \"/api/user/:userId\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_user__userId__purchase_status_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/user/:userId/purchase-status\",\n      mountPath: \"/api/user/:userId\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_user__userId__purchase_status_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/analytics\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_analytics_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/analytics\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_analytics_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges\",\n      mountPath: \"/api/admin\",\n      method: \"DELETE\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges_ts_onRequestDelete],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/announcement-badges\",\n      mountPath: \"/api/admin\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_announcement_badges_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/auth-settings\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_auth_settings_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/auth-settings\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_auth_settings_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/auth-settings\",\n      mountPath: \"/api/admin\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_auth_settings_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/chat-settings\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_chat_settings_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/chat-settings\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_chat_settings_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/chat-settings\",\n      mountPath: \"/api/admin\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_chat_settings_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/check-user-data\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_check_user_data_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners\",\n      mountPath: \"/api/admin\",\n      method: \"DELETE\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners_ts_onRequestDelete],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/countdown-banners\",\n      mountPath: \"/api/admin\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_countdown_banners_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/create-default-banner\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_create_default_banner_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/create-default-banner\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_create_default_banner_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/customers\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_customers_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/customers\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_customers_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/dashboard-features\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_dashboard_features_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/dashboard-features\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_dashboard_features_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/dashboard-features\",\n      mountPath: \"/api/admin\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_dashboard_features_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/fix-banner-price\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_fix_banner_price_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/fix-existing-purchases\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_fix_existing_purchases_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/fix-existing-purchases\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_fix_existing_purchases_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/fix-premium-users\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_fix_premium_users_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/fix-purchased-users\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_fix_purchased_users_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/force-update-price\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_force_update_price_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/invoices\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_invoices_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/invoices\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_invoices_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/login\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_login_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/login\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_login_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/orders\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_orders_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/orders\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_orders_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/payment-settings\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_payment_settings_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/payment-settings\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_payment_settings_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/payment-settings\",\n      mountPath: \"/api/admin\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_payment_settings_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/pricing\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_pricing_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/pricing\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_pricing_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/pricing\",\n      mountPath: \"/api/admin\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_pricing_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/reset-db\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_reset_db_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/reset-db\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_reset_db_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/seo-settings\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_seo_settings_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/seo-settings\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_seo_settings_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/seo-settings\",\n      mountPath: \"/api/admin\",\n      method: \"PATCH\",\n      middlewares: [],\n      modules: [__api_admin_seo_settings_ts_onRequestPatch],\n    },\n  {\n      routePath: \"/api/admin/seo-settings\",\n      mountPath: \"/api/admin\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_admin_seo_settings_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/admin/stats\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_stats_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/stats\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_stats_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/sync-banner-price\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_sync_banner_price_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/sync-banner-price\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_sync_banner_price_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/tickets\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_tickets_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/tickets\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_tickets_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/update-banner-price\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_update_banner_price_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/update-banner-price\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_update_banner_price_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/update-banner-price-direct\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_update_banner_price_direct_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/update-premium-status\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_update_premium_status_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/update-premium-status\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_update_premium_status_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/update-user-premium\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_update_user_premium_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/users\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_users_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/users\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_users_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/announcement-badge/active\",\n      mountPath: \"/api/announcement-badge\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_announcement_badge_active_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/announcement-badge/active\",\n      mountPath: \"/api/announcement-badge\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_announcement_badge_active_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/auth/facebook\",\n      mountPath: \"/api/auth\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_facebook_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/github\",\n      mountPath: \"/api/auth\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_github_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/google\",\n      mountPath: \"/api/auth\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_google_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/register\",\n      mountPath: \"/api/auth\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_auth_register_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/auth/register\",\n      mountPath: \"/api/auth\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_auth_register_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/countdown-banner/active\",\n      mountPath: \"/api/countdown-banner\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_countdown_banner_active_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/countdown-banner/active\",\n      mountPath: \"/api/countdown-banner\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_countdown_banner_active_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/customer/login\",\n      mountPath: \"/api/customer\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_customer_login_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/customer/login\",\n      mountPath: \"/api/customer\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_customer_login_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/customer/profile\",\n      mountPath: \"/api/customer\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_customer_profile_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/customer/profile\",\n      mountPath: \"/api/customer\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_customer_profile_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/customer/profile\",\n      mountPath: \"/api/customer\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_customer_profile_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/customer/register\",\n      mountPath: \"/api/customer\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_customer_register_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/customer/register\",\n      mountPath: \"/api/customer\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_customer_register_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/customer/stats\",\n      mountPath: \"/api/customer\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_customer_stats_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/customer/stats\",\n      mountPath: \"/api/customer\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_customer_stats_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/download-extension/premium\",\n      mountPath: \"/api/download-extension\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_download_extension_premium_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/download-extension/trial\",\n      mountPath: \"/api/download-extension\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_download_extension_trial_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/downloads/premium-extension\",\n      mountPath: \"/api/downloads\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_downloads_premium_extension_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/downloads/premium-extension\",\n      mountPath: \"/api/downloads\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_downloads_premium_extension_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/invoices/customer\",\n      mountPath: \"/api/invoices\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoices_customer_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/invoices/generate\",\n      mountPath: \"/api/invoices\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoices_generate_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/invoices/generate\",\n      mountPath: \"/api/invoices\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_invoices_generate_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/me/invoices\",\n      mountPath: \"/api/me\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_me_invoices_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/me/invoices\",\n      mountPath: \"/api/me\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_me_invoices_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/me/orders\",\n      mountPath: \"/api/me\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_me_orders_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/me/orders\",\n      mountPath: \"/api/me\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_me_orders_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/orders/complete-purchase\",\n      mountPath: \"/api/orders\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_orders_complete_purchase_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/orders/complete-purchase\",\n      mountPath: \"/api/orders\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_orders_complete_purchase_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/orders/user-orders\",\n      mountPath: \"/api/orders\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_orders_user_orders_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/orders/user-orders\",\n      mountPath: \"/api/orders\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_orders_user_orders_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/products/pricing\",\n      mountPath: \"/api/products\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_products_pricing_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/products/pricing\",\n      mountPath: \"/api/products\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_products_pricing_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/download-extension/:type\",\n      mountPath: \"/api/download-extension\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_download_extension__type__ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/download-extension/:type\",\n      mountPath: \"/api/download-extension\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_download_extension__type__ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/generate-invoice/:orderId\",\n      mountPath: \"/api/generate-invoice\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_generate_invoice__orderId__ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/tickets/:id\",\n      mountPath: \"/api/tickets\",\n      method: \"DELETE\",\n      middlewares: [],\n      modules: [__api_tickets__id__ts_onRequestDelete],\n    },\n  {\n      routePath: \"/api/tickets/:id\",\n      mountPath: \"/api/tickets\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_tickets__id__ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/tickets/:id\",\n      mountPath: \"/api/tickets\",\n      method: \"PATCH\",\n      middlewares: [],\n      modules: [__api_tickets__id__ts_onRequestPatch],\n    },\n  {\n      routePath: \"/api/tickets/:id\",\n      mountPath: \"/api/tickets\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_tickets__id__ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/auth-settings\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_settings_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth-settings\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_auth_settings_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/chat\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_chat_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/chat\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_chat_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/complete-stripe-payment\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_complete_stripe_payment_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/complete-stripe-payment\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_complete_stripe_payment_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/create-user-payment-intent\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_create_user_payment_intent_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/create-user-payment-intent\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_create_user_payment_intent_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/download-premium\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_download_premium_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/download-premium\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_download_premium_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/download-premium\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_download_premium_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/init-db\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_init_db_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/init-db\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_init_db_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/invoice-settings\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoice_settings_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/invoice-settings\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_invoice_settings_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/invoice-settings\",\n      mountPath: \"/api\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_invoice_settings_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/invoices\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoices_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/me\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_me_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/migrate-db\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_migrate_db_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/migrate-db\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_migrate_db_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/purchase-complete\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_purchase_complete_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/purchase-complete\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_purchase_complete_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/stripe-webhook\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_stripe_webhook_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/stripe-webhook\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_stripe_webhook_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/test-upload\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_test_upload_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/test-upload\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_test_upload_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/test-user\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_test_user_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/tickets\",\n      mountPath: \"/api/tickets\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_tickets_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/tickets\",\n      mountPath: \"/api/tickets\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_tickets_index_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/tickets\",\n      mountPath: \"/api/tickets\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_tickets_index_ts_onRequestPost],\n    },\n  {\n      routePath: \"/health\",\n      mountPath: \"/\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__health_ts_onRequestGet],\n    },\n  ]", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/.wrangler/tmp/bundle-vdH2kt/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/.wrangler/tmp/bundle-vdH2kt/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/.wrangler/tmp/bundle-vdH2kt/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/houmanghavamzadeh/CascadeProjects/ocus-job-hunter/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,IAC9D;AAOA,IAAI,SAAS;AAAA,MACX;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAAY;AAAA,MAC5D;AAAA,MAAY;AAAA,MAA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",
  "names": ["settings", "text", "onRequestOptions", "onRequestGet", "onRequestOptions", "onRequestGet", "onRequestPut", "onRequestDelete", "init_id", "onRequestPut", "onRequestOptions", "onRequestPut", "json", "onRequestGet", "init_id", "json", "onRequestGet", "init_id", "settings", "onRequestGet", "settings", "onRequestGet", "generateInvoiceHTML", "settings", "onRequestGet", "generateReceiptHTML", "settings", "onRequestGet", "onRequestPost", "storage", "nodeCrypto", "callback", "salt", "hash", "err", "customers", "json", "onRequestPost", "onRequestGet", "onRequestOptions", "ct", "text", "storage", "json", "onRequestPut", "onRequestOptions", "json", "onRequestGet", "onRequestGet", "onRequestOptions", "invoices", "onRequestGet", "onRequestOptions", "onRequestGet", "onRequestOptions", "init_purchase_status", "onRequestGet", "onRequestOptions", "onRequestOptions", "onRequestGet", "onRequestPost", "onRequestPut", "onRequestDelete", "onRequestGet", "onRequestPut", "onRequestOptions", "defaultSettings", "authSettings", "settings", "onRequestGet", "onRequestPut", "onRequestOptions", "settings", "json", "onRequestGet", "orders", "invoices", "onRequestOptions", "onRequestGet", "onRequestPost", "onRequestPut", "onRequestDelete", "onRequestPost", "onRequestOptions", "onRequestGet", "onRequestOptions", "customers", "onRequestGet", "onRequestPut", "onRequestOptions", "storage", "onRequestPost", "json", "onRequestPost", "onRequestOptions", "onRequestPost", "json", "onRequestPost", "onRequestGet", "onRequestGet", "onRequestOptions", "init_invoices", "onRequestPost", "onRequestOptions", "onRequestGet", "onRequestOptions", "init_orders", "orders", "onRequestGet", "onRequestPut", "onRequestOptions", "settings", "defaultSettings", "onRequestGet", "onRequestPut", "onRequestOptions", "sql", "onRequestPost", "onRequestOptions", "onRequestGet", "onRequestPut", "onRequestOptions", "onRequestGet", "onRequestOptions", "onRequestPost", "onRequestOptions", "onRequestGet", "onRequestOptions", "storage", "tickets", "onRequestPost", "onRequestOptions", "onRequestGet", "json", "onRequestGet", "onRequestOptions", "onRequestPost", "onRequestGet", "onRequestOptions", "users", "onRequestOptions", "onRequestGet", "onRequestGet", "authSettings", "onRequestGet", "authSettings", "onRequestGet", "authSettings", "onRequestPost", "onRequestOptions", "onRequestGet", "onRequestOptions", "init_active", "onRequestPost", "onRequestOptions", "init_login", "onRequestGet", "onRequestPut", "onRequestOptions", "onRequestPost", "onRequestOptions", "init_register", "onRequestGet", "onRequestOptions", "init_stats", "onRequestGet", "onRequestGet", "onRequestGet", "onRequestOptions", "json", "onRequestGet", "onRequestGet", "onRequestOptions", "json", "onRequestGet", "onRequestOptions", "init_invoices", "invoices", "json", "onRequestGet", "onRequestOptions", "init_orders", "orders", "onRequestPost", "onRequestOptions", "value", "startFrom", "ref", "actions", "sql", "otel", "rawTracer", "param", "escapeString", "sql", "placeholder", "name", "SQL", "init_alias", "result", "ForeignKeyBuilder", "ForeignKey", "init_foreign_keys", "uniqueKeyName", "UniqueConstraintBuilder", "UniqueOnConstraintBuilder", "UniqueConstraint", "init_unique_constraint", "init_common", "init_foreign_keys", "init_unique_constraint", "ref", "actions", "ForeignKeyBuilder", "uniqueKeyName", "init_common", "init_common", "init_common", "init_common", "init_common", "init_common", "init_common", "name", "init_table", "init_table", "InlineForeignKeys", "init_table", "init_table", "relations", "init_sql", "init_sql", "init_table", "table", "select", "sql", "joinOn", "field", "init_select", "init_query_builder", "init_select", "init_table", "init_query_builder", "init_table", "init_query_builder", "init_select", "init_db", "PrimaryKeyBuilder", "PrimaryKey", "init_primary_keys", "init_table", "init_db", "sql", "init_subquery", "init_utils", "init_query_builder", "init_table", "init_alias", "init_db", "init_foreign_keys", "init_primary_keys", "init_subquery", "init_table", "init_unique_constraint", "init_utils", "init_expressions", "init_expressions", "init_sql", "errorMap", "version", "r", "_a", "_b", "util", "objectUtil", "json", "errorUtil", "ctx", "result", "issues", "elements", "processed", "ZodFirstPartyTypeKind", "z", "zod", "coerce", "integer", "columns", "exists", "downloads", "init_session", "builtQuery", "init_db", "init_session", "init_session", "onRequestGet", "onRequestOptions", "storage", "orders", "onRequestGet", "onRequestOptions", "init_pricing", "onRequestGet", "onRequestOptions", "onRequestPost", "init_orderId", "json", "onRequestPatch", "onRequestPut", "onRequestDelete", "onRequestOptions", "init_id", "storage", "onRequestGet", "onRequestOptions", "init_auth_settings", "onRequestPost", "onRequestOptions", "json", "onRequestPost", "onRequestOptions", "storage", "onRequestPost", "onRequestOptions", "settings", "json", "onRequestPost", "onRequestGet", "onRequestOptions", "onRequestGet", "onRequestOptions", "json", "onRequestGet", "onRequestPut", "onRequestOptions", "settings", "json", "onRequestGet", "init_invoices", "invoices", "json", "onRequestGet", "json", "onRequestGet", "onRequestOptions", "json", "onRequestPost", "onRequestOptions", "isNaN", "concatty", "slicy", "Empty", "desc", "undefined", "doEval", "stringToPath", "match", "getBaseIntrinsic", "desc", "desc", "hasPropertyDescriptors", "desc", "applyBind", "compactQueue", "arrayToObject", "merge", "encode", "compact", "isRegExp", "isBuffer", "combine", "maybeMap", "isNonNullishPrimitive", "stringify", "value", "normalizeStringifyOptions", "normalizeParseOptions", "stringify", "parse", "text", "init_utils", "init_utils", "init_utils", "jsonResponse", "settings", "headers", "authenticator", "data", "init_utils", "result", "init_utils", "init_utils", "data", "urlData", "settings", "signature", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Authorizations", "init_Authorizations", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Cards", "init_Cards", "stripeMethod", "stripeMethod", "Configurations", "init_Configurations", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "InboundTransfers", "init_InboundTransfers", "stripeMethod", "stripeMethod", "stripeMethod", "MeterEventAdjustments", "init_MeterEventAdjustments", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "MeterEvents", "init_MeterEvents", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "OutboundPayments", "init_OutboundPayments", "stripeMethod", "stripeMethod", "OutboundTransfers", "init_OutboundTransfers", "stripeMethod", "stripeMethod", "PersonalizationDesigns", "init_PersonalizationDesigns", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Readers", "init_Readers", "stripeMethod", "stripeMethod", "ReceivedCredits", "init_ReceivedCredits", "stripeMethod", "stripeMethod", "ReceivedDebits", "init_ReceivedDebits", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Sessions", "init_Sessions", "stripeMethod", "Sessions", "init_Sessions", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Transactions", "init_Transactions", "stripeMethod", "Transactions", "init_Transactions", "stripeMethod", "Transactions", "init_Transactions", "stripeMethod", "Transactions", "init_Transactions", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Accounts", "init_Accounts", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "ConfirmationTokens", "init_ConfirmationTokens", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Customers", "init_Customers", "stripeMethod", "Disputes", "init_Disputes", "stripeMethod", "stripeMethod", "Events", "init_Events", "stripeMethod", "stripeMethod", "init_utils", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "init_utils", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Products", "init_Products", "stripeMethod", "stripeMethod", "stripeMethod", "Refunds", "init_Refunds", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "stripeMethod", "Tokens", "init_Tokens", "stripeMethod", "stripeMethod", "stripeMethod", "Accounts", "ConfirmationTokens", "Customers", "Disputes", "Events", "Products", "Refunds", "Tokens", "init_Authorizations", "init_Cards", "init_Configurations", "init_InboundTransfers", "init_MeterEventAdjustments", "init_MeterEvents", "init_OutboundPayments", "init_OutboundTransfers", "init_PersonalizationDesigns", "init_Readers", "init_ReceivedCredits", "init_ReceivedDebits", "init_Sessions", "init_Transactions", "init_Accounts", "init_ConfirmationTokens", "init_Customers", "init_Disputes", "init_Events", "init_Products", "init_Refunds", "init_Tokens", "Sessions", "Transactions", "Authorizations", "Cards", "PersonalizationDesigns", "Configurations", "Readers", "InboundTransfers", "OutboundPayments", "OutboundTransfers", "ReceivedCredits", "ReceivedDebits", "MeterEventAdjustments", "MeterEvents", "Stripe", "isObject", "init_utils", "json", "storage", "onRequestPost", "onRequestOptions", "onRequestPost", "onRequestOptions", "json", "onRequestPost", "json", "onRequestOptions", "onRequestGet", "onRequestPost", "init_tickets", "qs", "url", "storage", "onRequestGet", "init_id", "init_purchase_status", "init_invoices", "init_orders", "init_active", "init_login", "init_register", "init_stats", "init_pricing", "init_orderId", "init_auth_settings", "init_tickets", "onRequestGet", "onRequestOptions", "onRequestDelete", "onRequestPut", "onRequestPost", "onRequestPatch", "count", "value", "_a", "result", "char", "prefix", "i"]
}
