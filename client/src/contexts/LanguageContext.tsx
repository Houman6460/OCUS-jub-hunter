import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Language, translations, Translations } from '@/lib/translations';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: Translations;
  currentLanguage: Language;
  languages: Array<{ code: Language; name: string; flag: string }>;
}

export const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<Language>(() => {
    // Get saved language from localStorage or default to English
    const saved = localStorage.getItem('preferred-language');
    return (saved as Language) || 'en';
  });

  const t = translations[language];

  const languages = [
    { code: 'en' as Language, name: 'English', flag: 'üá∫üá∏' },
    { code: 'fr' as Language, name: 'Fran√ßais', flag: 'üá´üá∑' },
    { code: 'pt' as Language, name: 'Portugu√™s', flag: 'üáµüáπ' },
    { code: 'es' as Language, name: 'Espa√±ol', flag: 'üá™üá∏' },
    { code: 'de' as Language, name: 'Deutsch', flag: 'üá©üá™' },
    { code: 'it' as Language, name: 'Italiano', flag: 'üáÆüáπ' },
    { code: 'ru' as Language, name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'ar' as Language, name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
    { code: 'zh' as Language, name: '‰∏≠Êñá', flag: 'üá®üá≥' },
    { code: 'ja' as Language, name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
    { code: 'ko' as Language, name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
    { code: 'hi' as Language, name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'nl' as Language, name: 'Nederlands', flag: 'üá≥üá±' }
  ];

  useEffect(() => {
    // Save language preference to localStorage
    localStorage.setItem('preferred-language', language);
  }, [language]);

  return (
    <LanguageContext.Provider value={{ 
      language, 
      setLanguage, 
      t, 
      currentLanguage: language,
      languages 
    }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}

export function LanguageSelector() {
  const { language, setLanguage } = useLanguage();
  
  const languageOptions = [
    { value: 'en', label: 'English' },
    { value: 'pt', label: 'Portugu√™s' },
    { value: 'fr', label: 'Fran√ßais' },
    { value: 'es', label: 'Espa√±ol' },
    { value: 'de', label: 'Deutsch' },
    { value: 'it', label: 'Italiano' },
    { value: 'nl', label: 'Nederlands' },
    { value: 'pl', label: 'Polski' },
    { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
    { value: 'da', label: 'Dansk' },
    { value: 'no', label: 'Norsk' },
    { value: 'fi', label: 'Suomi' },
    { value: 'tr', label: 'T√ºrk√ße' },
  ];

  return (
    <Select value={language} onValueChange={(value: Language) => setLanguage(value)}>
      <SelectTrigger className="w-32">
        <SelectValue />
      </SelectTrigger>
      <SelectContent>
        {languageOptions.map((option) => (
          <SelectItem key={option.value} value={option.value}>
            {option.label}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
}